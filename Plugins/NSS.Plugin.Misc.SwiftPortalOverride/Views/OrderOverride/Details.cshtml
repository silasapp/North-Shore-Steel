@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using Syncfusion.EJ2
@model OrderDetailsModel
@inject IThemeContext themeContext
@using Nop.Web.Framework.Themes

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.OrderDetails").Text);
    //page class
    Html.AppendPageCssClassParts("html-order-details-page");
}
@{
    var themeName = themeContext.WorkingThemeName;
    string CLOSED_ORDER_STATUS_NAME = "Invoiced";
}

<style>
    .cart-total-left, .cart-total-right {
        display: table-cell !important;
    }

    .eqaul-width {
        flex-basis: 0;
        flex-grow: 1;
    }

    hr {
        margin-left: 1rem;
        margin-right: 1rem;
    }
    .position-align {
        line-height: 21px;
    }
    tbody:nth-child(odd) {
        background: #F2F2F2;
    }
</style>

@{

    Func<object, object>
    Content1 =
    @<div id="viewMtrModal">
        @if (Model.MtrCount > 1)
        {
            <div class="d-flex flex-column">
                <div class="d-flex flex-column mt-4 mb-2">
                    <table class="table table-striped nss-table">
                        <thead class="thead-default">
                            <tr>
                                <td scope="col">MTR #</td>
                                <td scope="col">Heat #</td>
                                <td scope="col" class="text-center">Line #</td>
                                <td scope="col">Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.MTRs)
                            {
                                <tr>
                                    <td><a href="@item.MtrFile" target="_blank" scope="row">@item.MtrId</a></td>
                                    <td>@item.HeatNo</td>
                                    <td class="text-center">@item.LineNo</td>
                                    <td>@item.Description</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>
        }
    </div>;
}

@{
    Func<object, object>
    Content2 =
    @<div id="viewMultipleShipmentModal">
        <div class="col-md-12 py-3 d-flex flex-row mt-1" v-if="multipleShipments.PoNo">
            <label class="h4-primary-500-teko text-uppercase mr-3">PO #</label>
            <div class="h5-default position-align">{{multipleShipments.PoNo}}</div>
        </div>
        <div class="d-flex flex-column mb-2">
            <table class="table nss-table">
                <thead class="thead-default">
                    <tr>
                        <td scope="col">Status</td>
                        <td scope="col" class="text-center">Scheduled Date</td>
                        <td scope="col" class="text-center">Shipment Weight (lb)</td>
                        <td scope="col">Item</td>
                        <td scope="col" class="text-right">Qty.</td>
                        <td scope="col" class="text-center">Tot. Item Weight (lb)</td>
                    </tr>
                </thead>
                <tbody v-for="mS in multipleShipments.Shipments">
                    <tr>
                        <td v-bind:rowspan="mS.Items.length">{{mS.Status }}</td>
                        <template v-if="mS.Status.toLowerCase() != `shipped`">
                            <td v-bind:rowspan="mS.Items.length" class="text-center">{{mS.ScheduledDate | date }}</td>
                        </template>
                        <template v-else>
                            <td v-bind:rowspan="mS.Items.length"></td>
                        </template>
                        <td v-bind:rowspan="mS.Items.length" class="text-right">{{mS.TotalWeight }}</td>
                        <td style="white-space: normal;">{{mS.Items[0].Description}}</td>
                        <td class="text-right">{{mS.Items[0].Quantity}}</td>
                        <td class="text-right">{{mS.Items[0].Weight}}</td>
                    </tr>
                    <template v-for="(item, index) in mS.Items.slice(1)">
                        <tr>
                            <td style="white-space: normal;">{{item.Description}}</td>
                            <td class="text-right">{{item.Quantity}}</td>
                            <td class="text-right">{{item.Weight}}</td>
                        </tr>
                    </template>
                </tbody>
                </table>
        </div>
    </div>;
    }

    @{
        Func<object, object>
        Content3 =
        @<div id="viewMultipleShipmentMobileModal">
            <div class="mx-0 bg-white-shadow mt-4" style="box-shadow: 0px 0px 15px 3px #00000029;" v-for="mS in multipleShipments.Shipments">
                <div class="shipment-data-grid">
                    <div>
                        <label class="h4-primary-500-teko mb-0">PO #</label>
                        <ul class="h5-default pb-3">
                            <li>{{multipleShipments.PoNo}}</li>
                        </ul>
                    </div>
                    <div>
                        <label class="h4-primary-500-teko mb-0">Status</label>
                        <ul class="h5-default pb-3">
                            <li>{{mS.Status}}</li>
                        </ul>
                    </div>
                    <div>
                        <label class="h4-primary-500-teko mb-0">Scheduled Date</label>
                        <template v-if="mS.Status.toLowerCase() != `shipped`">
                            <ul class="h5-default pb-3">
                                <li>{{mS.ScheduledDate}}</li>
                            </ul>
                        </template>
                        <template v-else>
                        </template>

                    </div>
                    <div>
                        <label class="h4-primary-500-teko mb-0">Shipment Weight (Lb)</label>
                        <ul class="h5-default pb-3">
                            <li>{{mS.TotalWeight}}</li>
                        </ul>
                    </div>
                </div>
                <hr>
                <template v-for="item in mS.Items">
                    <div class="shipment-data-grid">
                        <div>
                            <label class="h4-primary-500-teko mb-0">Item</label>
                            <ul class="h5-default pb-3">
                                <li>{{item.Description}}</li>
                            </ul>
                        </div>
                        <div>
                            <label class="h4-primary-500-teko mb-0">Qty.</label>
                            <ul class="h5-default pb-3">
                                <li>{{item.Quantity}}</li>
                            </ul>
                        </div>
                        <div>
                            <label class="h4-primary-500-teko mb-0">Total Item Weight (Lb)</label>
                            <ul class="h5-default pb-3">
                                <li>{{item.Weight}}</li>
                            </ul>
                        </div>
                    </div>
                </template>

            </div>
        </div>;
    }


    <div id="order-detail" class="page order-details-page">
        <div class="d-flex flex-md-row justify-content-between align-items-md-start bg-white-shadow px-5 py-2" v-bind:style="{'background': isMobile ? '#f6f6f6' : '#ffffff'}">
            <div class="h4-primary d-flex flex-row my-3 cursor-pointer p-2" v-bind:class="{'eqaul-width': !isMobile}"></div>

            <label v-if="!isMobile" class="h3-primary-sans my-3" v-bind:class="{'eqaul-width': !isMobile,'d-flex': !isMobile}" v-bind:style="{'justify-content': !isMobile? 'center' : 'unset'}">ORDER NUMBER: @Model.OrderId</label>

            @if (Model.SysOrderId != null && Model.CanBuy)
            {
                <div class="h4-primary d-flex flex-row my-3 cursor-pointer p-2" onclick="setLocation('@Url.RouteUrl("ReOrder", new { orderId = Model.SysOrderId })')" v-bind:class="{'eqaul-width': !isMobile}" v-bind:style="{'height': isMobile ? '40px' : 'auto','background': isMobile ? '#ffffff' : 'transparent', 'justify-content': !isMobile? 'flex-end' : 'unset'}">
                    <img src="~/Themes/@themeName/Content/assets/reload.svg" alt="" width="20" class="mr-2">
                    Order Again
                </div>
            }
            else
            {
                <div class="h4-primary d-flex flex-row my-3 cursor-pointer p-2" v-bind:class="{'eqaul-width': !isMobile}"></div>
            }

        </div>
        <div class="row mx-0 d-flex flex-row bg-white-shadow  mt-4" v-bind:style="{'background': isMobile ? 'transparent' : '#ffffff'}" v-bind:class="{'px-4': !isMobile, 'pt-4': !isMobile, 'pb-0': isMobile}">
            <div class="col-md-3 col-sm-6 text-left" v-bind:style="{'width': isMobile ? '50%' : 'auto','background': isMobile ? '#f6f6f6' : 'transparent'}" v-bind:class="{'px-4': isMobile, 'pt-4': isMobile, 'pb-0': isMobile}">
                <div class="row">
                    <div class="col-md-12 pb-3">
                        <label class="h4-primary-500-teko text-uppercase mb-0">PO #</label>
                        <ul class="h5-default">
                            <li class="name">@Model.PoNo </li>
                        </ul>
                    </div>
                    <div class="col-md-12 pb-3">
                        <label class="h4-primary-500-teko text-uppercase mb-0">SALESPERSON</label>
                        <ul class="h5-default">
                            <li class="name">@Model.SalespersonName</li>
                        </ul>
                    </div>
                    <div class="col-md-12 pb-3">
                        <label class="h4-primary-500-teko text-uppercase mb-0">BUYER</label>
                        <ul class="h5-default">
                            <li class="name">@Model.BuyerName</li>
                        </ul>
                    </div>
                </div>

            </div>
            <div class="col-md-3 col-sm-6 text-left"
                 v-bind:style="{'width': isMobile ? '50%' : 'auto','background': isMobile ? '#f6f6f6' : 'transparent'}"
                 v-bind:class="{'px-4': isMobile, 'pt-4': isMobile, 'pb-0': isMobile}">
                <div class="row">
                    <div class="col-md-12 pb-3">
                        <label class="h4-primary-500-teko text-uppercase mb-0">PROMISE DATE</label>
                        <ul class="h5-default">
                            <li class="name">@Model.PromiseDate?.ToString("MM/dd/yyyy")</li>
                        </ul>
                    </div>

                    @if (Model?.OrderStatusName.ToLower() != CLOSED_ORDER_STATUS_NAME.ToLower())
                    {
                        <div class="col-md-12 pb-3">
                            <label class="h4-primary-500-teko text-uppercase mb-0">SCHEDULED DATE</label>
                            <ul class="h5-default">
                                <li class="name">@Model.ScheduledDate?.ToString("MM/dd/yyyy")</li>
                            </ul>
                        </div>
                    }

                    @if (Model?.OrderStatusName.ToLower() == CLOSED_ORDER_STATUS_NAME.ToLower())
                    {

                        <div class="col-md-12 pb-3">
                            <label class="h4-primary-500-teko text-uppercase mb-0">DELIVERED DATE</label>
                            <ul class="h5-default">
                                <li class="name">@Model.DeliveryDate?.ToString("MM/dd/yyyy")</li>
                            </ul>
                        </div>
                    }

                    <div class="col-md-12 pb-3">

                        <label class="h4-primary-500-teko text-uppercase mb-0">SHIP VIA</label>
                        <ul class="h5-default">
                            <li class="name">@Model.DeliveryMethodName</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="col-md-4 col-sm-6 text-left"
                 v-bind:style="{'width': isMobile ? '100%' : 'auto','background': isMobile ? '#f6f6f6' : 'transparent'}"
                 v-bind:class="{'px-4': isMobile, 'pt-0': isMobile, 'pb-4': isMobile, 'mb-4': isMobile}">
                @if (Model.DeliveryMethodName != "WILL CALL" && Model.DeliveryMethodName != "NOT APPLICABLE")
                {

                    <div class="shipping-info-wrap pb-3">
                        <div class="shipping-info">
                            <label class="h4-primary-500-teko text-uppercase mb-0">@(Model.IsPickup ? T("Order.PickupAddress") : T("Order.ShippingAddress"))</label>
                            <ul class="h5-default lh-md">
                                @if (!Model.IsPickup)
                                {
                                    <li class="name">
                                        @Model.ShippingAddress.FirstName @Model.ShippingAddress.LastName
                                    </li>
                                    <li class="email">
                                        @Model.ShippingAddress.Email
                                    </li>
                                    <li class="phone">
                                        @Model.ShippingAddress.PhoneNumber
                                    </li>

                                    if (!string.IsNullOrEmpty(Model.ShippingAddress.Company))
                                    {
                                        <li class="company">
                                            @Model.ShippingAddress.Company
                                        </li>
                                    }

                                    <li class="address1">
                                        @Model.ShippingAddress.Address1
                                    </li>

                                    if (!string.IsNullOrEmpty(Model.ShippingAddress.Address2))
                                    {
                                        <li class="address2">
                                            @Model.ShippingAddress.Address2
                                        </li>
                                    }

                                    @if (Model.ShippingAddress.CityEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.City) ||

!string.IsNullOrEmpty(Model.ShippingAddress.County) ||
!string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))


                                    {
                                        <li class="city-state-zip">
                                            @if (!string.IsNullOrEmpty(Model.ShippingAddress.City))
                                            {
                                                @Model.ShippingAddress.City
                                                @if (!string.IsNullOrEmpty(Model.ShippingAddress.County) ||
                      !string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
                      !string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                                {
                                                    <text>, </text>
                                                }
                                            }

                                            @if (!string.IsNullOrEmpty(Model.ShippingAddress.County))
                                            {
                                                @Model.ShippingAddress.County
                                                @if (!string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
                          !string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                                {
                                                    <text>, </text>
                                                }
                                            }

                                            @if (!string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName))
                                            {
                                                @Model.ShippingAddress.StateProvinceName
                                                @if (!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                                {
                                                    <text>, </text>
                                                }
                                            }

                                            @if (!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                            {
                                                @Model.ShippingAddress.ZipPostalCode
                                            }
                                        </li>
                                    }

                                    if (!string.IsNullOrEmpty(Model.ShippingAddress.CountryName))
                                    {
                                        <li class="country">
                                            @Model.ShippingAddress.CountryName
                                        </li>
                                    }

                                    if (!string.IsNullOrEmpty(Model.ShippingAddress.FormattedCustomAddressAttributes))
                                    {
                                        <li class="custom-attributes-view">
                                            @Html.Raw(Model.ShippingAddress.FormattedCustomAddressAttributes)
                                        </li>
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(Model.PickupAddress.Address1))
                                    {
                                        <li class="address1">
                                            @Model.PickupAddress.Address1
                                        </li>
                                    }

                                    if (!string.IsNullOrEmpty(Model.PickupAddress.City) ||
                                        !string.IsNullOrEmpty(Model.PickupAddress.County) ||
                                        !string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName) ||
                                        !string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                    {
                                        <li class="city-state-zip">
                                            @if (!string.IsNullOrEmpty(Model.PickupAddress.City))
                                            {
                                                @Model.PickupAddress.City
                                                @if (!string.IsNullOrEmpty(Model.PickupAddress.County) ||
!string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName) ||
                      !string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                                {
                                                    <text>, </text>
                                                }
                                            }
                                            @if (!string.IsNullOrEmpty(Model.PickupAddress.County))
                                            {
                                                @Model.PickupAddress.County
                                                @if (!string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName) ||
                                                  !string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                                {
                                                    <text>, </text>
                                                }
                                            }
                                            @if (!string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName))
                                            {
                                                @Model.PickupAddress.StateProvinceName
                                                @if (!string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                                {
                                                    <text>, </text>
                                                }
                                            }
                                            @if (!string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                            {
                                                @Model.PickupAddress.ZipPostalCode
                                            }
                                        </li>
                                    }

                                    if (!string.IsNullOrEmpty(Model.PickupAddress.CountryName))
                                    {
                                        <li class="country">
                                            @Model.PickupAddress.CountryName
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                }

                <div class="col-md-12 pb-3 pl-0 pr-0">
                    <label class="h4-primary-500-teko text-uppercase mb-0">STATUS</label>
                    <ul class="h5-default">
                        @if (Model.OrderStatusName == "*MULTIPLE*")
                        {
                            <li class="name"><a v-on:click="handleMultipleShipmentModal(@Model.OrderId)" scope="row" class="nss-light-blue">Multiple</a></li>
                        }
                        else
                        {
                            <li class="name">@Model.OrderStatusName</li>
                        }
                    </ul>
                </div>
            </div>

            <div class="col-md-2 col-sm-6 d-flex flex-column align-items-center align-items-md-start text-left"
                 v-bind:style="{'background': isMobile ? '#f6f6f6' : 'transparent'}"
                 v-bind:class="{'px-4': isMobile, 'py-4': isMobile}">
                @if (Model.OrderFile != null)
                {
                    <a href="@Model.OrderFile" target="_blank" class="text-decoration-none">
                        <div class="d-flex flex-row mb-3 cursor-pointer" v-on:mouseover="isHoveringViewOrder = true;" v-on:mouseleave="isHoveringViewOrder = false;">
                            <img alt="Order Icon"
                                 v-bind:src="isHoveringViewOrder ? '/Themes/@themeName/Content/assets/icn-invoice-dark.svg' : '/Themes/@themeName/Content/assets/icn-invoice.svg'" />
                            <label class="h4-primary mb-0 ml-1 cursor-pointer">View Order</label>
                        </div>
                    </a>
                }

                @if (Model.InvoiceFile != null)
                {
                    <a href="@Model.InvoiceFile" target="_blank" class="text-decoration-none">
                        <div class="d-flex flex-row mb-3 cursor-pointer" v-on:mouseover="isHoveringViewInvoice = true;" v-on:mouseleave="isHoveringViewInvoice = false;">
                            <img alt="Invoice Icon" v-bind:src="isHoveringViewInvoice ? '/Themes/@themeName/Content/assets/icn-invoice-dark.svg' : '/Themes/@themeName/Content/assets/icn-invoice.svg'" />
                            <label class="h4-primary mb-0 ml-1 cursor-pointer">View Invoice</label>
                        </div>
                    </a>
                }

                @if (Model.DeliveryTicketFile != null)
                {
                    <a href="@Model.DeliveryTicketFile" target="_blank" class="text-decoration-none">
                        <div class="d-flex flex-row mb-3 cursor-pointer" v-on:mouseover="isHoveringViewTicket = true;" v-on:mouseleave="isHoveringViewTicket = false;">
                            <img alt="Ticket Icon"
                                 v-bind:src="isHoveringViewTicket ? '/Themes/@themeName/Content/assets/icn-delivery-ticket-dark.svg' : '/Themes/@themeName/Content/assets/icn-delivery-ticket.svg'" />
                            <label class="h4-primary mb-0 ml-1 cursor-pointer">View POD</label>
                        </div>
                    </a>
                }

                @if (Model.MtrCount > 0)
                {
                    <div class="d-flex flex-row mb-3 cursor-pointer" v-on:mouseover="isHoveringViewMTR = true;" v-on:mouseleave="isHoveringViewMTR = false;">
                        <img alt="MTR Icon" v-bind:src="isHoveringViewMTR ? '/Themes/@themeName/Content/assets/icn-mt-report-blue.svg' : '/Themes/@themeName/Content/assets/icn-mt-report.svg'" />

                        @if (Model.MtrCount == 1)
                        {
                            <a href="@Model.MTRs.FirstOrDefault()?.MtrFile" target="_blank" class="text-decoration-none">
                                <label class="h4-primary mb-0 ml-1 cursor-pointer">View MTR</label>
                            </a>
                        }
                        else if (Model.MtrCount > 1)
                        {
                            <label class="h4-primary mb-0 ml-1 cursor-pointer" onclick="handleMtrModal()">View MTRs</label>
                        }
                    </div>
                }

            </div>

        </div>
        <div v-if="!isMobile" class="mt-4 bg-white-shadow">
            <table class="table table-striped nss-table">
                <thead>
                    <tr>
                        <th class="sku" style="width:1%">Line #</th>
                        <th class="name" style="width:1%">Description</th>
                        <th class="vendor" style="width:1%">Customer Part #</th>
                        <th class="text-center" style="width:1%">UOM</th>
                        <th class="text-center" style="width:1%">Qty.</th>
                        <th class="total text-center" style="width:1%">Weight (lb)</th>
                        <th class="price text-center" style="width:1%">Unit Price</th>
                        <th class="quantity text-center" style="width:1%">Total Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderItems)
                    {
                        <tr>
                            <td class="sku">@item.LineNo</td>
                            <td class="product">@item.Description</td>
                            <td>@item.CustomerPartNo</td>
                            <td class="text-center">@item.UOM</td>
                            <td class="text-right">@item.Quantity</td>
                            <td class="text-right">@string.Format("{0:N0}", item.TotalWeight)</td>
                            <td class="text-right">$@DoFormat(item.UnitPrice)</td>
                            <td class="text-right">$@DoFormat(item.TotalPrice)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @* Cart items - Mobile View *@
        <div v-if="isMobile" v-bind:class="{'mt-4': isMobile}">
            @foreach (var item in Model.OrderItems)
            {
                <div class="cart-item d-flex flex-column bg-accent p-3 mb-3">
                    <div class="d-flex flex-row justify-content-between align-items-center">
                        <label class="fs12-primary-500">Item: @item.LineNo</label>
                    </div>
                    <label class="h2-primary mt-3 mb-2" v-bind:class="{'text-left': isMobile}">@item.Description</label>
                    <div class="d-flex flex-row justify-content-between align-items-center my-2">
                        <label class="h5-default-500">Customer Part #</label>
                        <label class="h5-primary-600">@item.CustomerPartNo</label>
                    </div>
                    <div class="d-flex flex-row justify-content-between align-items-center my-2">
                        <label class="h5-default-500">Quantity</label>
                        <label class="h5-primary-600">@item.Quantity</label>
                    </div>
                    <div class="d-flex flex-row justify-content-between align-items-center my-2">
                        <label class="h5-default-500">Unit Price</label>
                        <label class="h5-primary-600">$@DoFormat(item.UnitPrice)</label>
                    </div>
                    <div class="d-flex flex-row justify-content-between align-items-center my-2">
                        <label class="h5-default-500">Total Price</label>
                        <label class="h5-primary-600">$@DoFormat(item.TotalPrice)</label>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-4 offset-md-8 bg-white-shadow p-4 mt-4" v-bind:style="{'background': isMobile ? '#f6f6f6' : '#ffffff','margin-bottom': isMobile ? '70px' : '0'}">
            <table class="cart-total">
                <tbody>
                    <tr>
                        <td class="cart-total-left">
                            <label class="mb-0">@T("Order.SubTotal"):</label>
                        </td>
                        <td class="cart-total-right">
                            <span>$@DoFormat(Model.LineItemTotal)</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="cart-total-left">
                            <label>@T("Order.Tax"):</label>
                        </td>
                        <td class="cart-total-right">
                            <span>$@DoFormat(Model.TaxTotal)</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="mt-0">
                            <label class="h2-default-teko text-uppercase">Total</label>
                        </td>
                        <td class="cart-total-right">
                            <span class="h2-default-teko">$@DoFormat(Model.OrderTotal)</span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="page-body">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageBottom, additionalData = Model })
        </div>

        @{ var title = "<span class='dialog-header'>ORDER <span class='order-detail-id'></span> - Multiple Delivery Details</span>"; }
        @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onDialogCreated").Header("<span class='dialog-header'>VIEW MTRS</span>").ContentTemplate(@Content1).ShowCloseIcon(true).Visible(false).Width("700px").Target("body").Render()
        @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onMultipleDialogCreated").Header(title).ContentTemplate(@Content2).ShowCloseIcon(true).Visible(false).Width("850px").Target("body").Render()
        @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onMultipleMobileDialogCreated").Header(title).ContentTemplate(@Content3).ShowCloseIcon(true).Visible(false).Height("100%").Width("100%").Target("body").Render()
    </div>

    @{
        @using Newtonsoft.Json.Serialization;
        @using Newtonsoft.Json;

        var contractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() };
        var shippingAddresses = JsonConvert.SerializeObject(Model, new JsonSerializerSettings
        {
            ContractResolver = contractResolver,
            Formatting = Formatting.None
        });
    }

    @functions{
        string DoFormat(decimal myNumber)
        {
            var s = string.Format("{0:N2}", myNumber);

            return s;
        }
    }

    <script>
    function onDialogCreated() {
        viewMtrModal = this;
    }

    new Vue({
        el: '#order-detail',
        data: {
            isHoveringViewInvoice: false,
            isHoveringViewTicket: false,
            isHoveringViewMTR: false,
            isHoveringViewOrder: false,
            window: {
                width: 0,
                height: 0,
            },
            multipleShipments: {}
        },
        created: function () {
            window.addEventListener("resize", this.handleResize);
            this.handleResize();
        },
        computed: {
            isMobile: function () {
                return this.window.width <= 767.98;
            },
        },
        methods: {
            showLoading: function () {
                $('#custom-loading').show();
            },
            hideLoading: function () {
                $('#custom-loading').hide();
            },
            handleMultipleShipmentModal: function (orderId) {
                const request = { orderId }
                this.showLoading();
                const self = this;
                $.ajax({
                    url: "@Url.Action("Shipments", "OrderOverride")",
                    type: 'GET',
                    data: request,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data, _, _) {
                        $('.order-detail-id').html(orderId);
                        self.formatNumber(data.Shipments);
                        self.multipleShipments = data;
                        const elements = document.getElementsByClassName("e-dlg-closeicon-btn")
                        for (var i = 0; i < elements.length; i++) {
                            $(elements[i]).removeClass("e-dlg-closeicon-btn");
                        }
                        self.isMobile ? viewMultipleShipmentMobileModal.show() : viewMultipleShipmentModal.show();
                        self.hideLoading();
                    },
                    error: function (xhr, _, thrownError) {
                        if (thrownError == "Unauthorized") {
                            location.reload();
                        }
                        self.hideLoading();
                    }
                });
            },
            formatNumber: function (data) {
                data.map(g => {
                    g.TotalWeight = (g.TotalWeight).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')
                    g.Items.map(it => {
                        it.Weight = (it.Weight).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')
                    })
                });
            },
            handleResize: function () {
                this.window.width = window.innerWidth;
                this.window.height = window.innerHeight;
            },
            onFocused: function () {
                this.isHoveringViewTicket = true;
            },
            onBlur: function () {
                this.isHoveringViewTicket = false;
            }
        },
    });

    function handleMtrModal() {
        viewMtrModal.show();
    }

    function onMultipleMobileDialogCreated() {
        viewMultipleShipmentMobileModal = this;
    }

    function onMultipleDialogCreated() {
        viewMultipleShipmentModal = this;
    }
    </script>

    <ejs-scripts></ejs-scripts>

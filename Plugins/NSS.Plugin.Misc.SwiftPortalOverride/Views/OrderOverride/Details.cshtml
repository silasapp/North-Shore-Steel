@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using Syncfusion.EJ2
@model OrderDetailsModel
@inject IThemeContext themeContext
@using Nop.Web.Framework.Themes

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.OrderDetails").Text);
    //page class
    Html.AppendPageCssClassParts("html-order-details-page");
}
@{
    var themeName = themeContext.WorkingThemeName;
}

@{

    Func<object, object>
    Content1 =
    @<div id="viewMtrModal">
        @if (Model.MtrCount > 1)
        {
            <div class="d-flex flex-column">
                <div class="d-flex flex-column mt-4 mb-2">
                    @foreach (var item in Model.MTRs)
                    {
                        <div class="d-flex flex-row mt-4 cursor-pointer">
                            <label class="h4-primary mb-0 ml-1 cursor-pointer">View MTR @item.MtrId</label>
                        </div>
                    }
                </div>
            </div>
        }
    </div>;
}

<div id="order-detail" class="page order-details-page">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-center align-items-md-start bg-white-shadow px-5 py-4">
        <div class="h4-primary d-flex flex-row my-3 cursor-pointer" onclick="setLocation('/orders')">
            <img src="~/Themes/@themeName/Content/assets/enter.svg" alt="" width="20" class="mr-2">
            Back to Orders
        </div>
        <label class="h3-primary-sans my-3">ORDER NUMBER: @Model.OrderId</label>
        @if (Model.SysOrderId != null)
        {
            @if (Model.CanBuy)
            {
                <div class="h4-primary d-flex flex-row my-3 cursor-pointer" onclick="setLocation('@Url.RouteUrl("ReOrder", new { orderId = Model.SysOrderId })')">
                    <img src="~/Themes/@themeName/Content/assets/reload.svg" alt="" width="20" class="mr-2">
                    Order Again
                </div>
            }
        }

    </div>
    <div class="row mx-0 d-flex flex-row bg-white-shadow px-4 py-4 mt-4">
        <div class="col-md-4 col-sm-6">
            <label class="h4-primary-500-teko text-uppercase mb-0">@T("Order.BillingAddress")</label>
            <ul class="h5-default">
                <li class="name">
                    @Model.BillingAddress.FirstName @Model.BillingAddress.LastName
                </li>
                <li class="email">
                    @Model.BillingAddress.Email
                </li>
                @if (Model.BillingAddress.PhoneEnabled)
                {
                    <li class="phone">
                        @Model.BillingAddress.PhoneNumber
                    </li>
                }
                @if (Model.BillingAddress.CompanyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.Company))
                {
                    <li class="company">
                        @Model.BillingAddress.Company
                    </li>
                }
                <li class="address1">
                    @Model.BillingAddress.Address1
                </li>
                <li class="address2">
                    @Model.BillingAddress.Address2
                </li>
                <li class="city-state-zip">
                    @if (!string.IsNullOrEmpty(Model.BillingAddress.City))
                    {
                        @Model.BillingAddress.City
                        @if (!string.IsNullOrEmpty(Model.BillingAddress.County) ||
!string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                        {
                            <text>,</text>
                        }
                    }
                    @if (!string.IsNullOrEmpty(Model.BillingAddress.County))
                    {
                        @Model.BillingAddress.County
                        @if (!string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                        {
                            <text>,</text>
                        }
                    }
                    @if (!string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName))
                    {
                        @Model.BillingAddress.StateProvinceName
                        @if (!string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                        {
                            <text>,</text>
                        }
                    }
                    @if (!string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                    {
                        @Model.BillingAddress.ZipPostalCode
                    }
                </li>

                @if (!string.IsNullOrEmpty(Model.BillingAddress.CountryName))
                {
                    <li class="country">
                        @Model.BillingAddress.CountryName
                    </li>
                }
                @if (!string.IsNullOrEmpty(Model.BillingAddress.FormattedCustomAddressAttributes))
                {
                    <li class="custom-attributes-view">
                        @Html.Raw(Model.BillingAddress.FormattedCustomAddressAttributes)
                    </li>
                }
            </ul>
            @*@if (!string.IsNullOrEmpty(Model.Pay))
                {
                    <div class="mt-3">
                        <label class="h4-primary-500-teko text-uppercase mb-0">@T("Order.Payment") Method</label>
                        <ul class="h5-default lh-md">
                            <li class="payment-method">
                                <span class="value">
                                    @Model.PaymentMethod
                                </span>
                            </li>
                            @if (!Model.PrintMode && Model.CanRePostProcessPayment)
                            {
                                <li class="repost">
                                    <form asp-route="OrderDetails" method="post">
                                        <input type="submit" name="repost-payment" value="@T("Order.RetryPayment")" class="button-2 re-order-button" />
                                        <p class="hint">
                                            <em>@T("Order.RetryPayment.Hint")</em>
                                        </p>
                                    </form>
                                </li>
                            }
                        </ul>
                    </div>
                }*@
        </div>
        <div class="col-md-4 col-sm-6">
            <div class="shipping-info-wrap">
                <div class="shipping-info">
                    <label class="h4-primary-500-teko text-uppercase mb-0">@(Model.IsPickup ? T("Order.PickupAddress") : T("Order.ShippingAddress"))</label>
                    <ul class="h5-default lh-md">
                        @if (!Model.IsPickup)
                        {
                            <li class="name">
                                @Model.ShippingAddress.FirstName @Model.ShippingAddress.LastName
                            </li>
                            <li class="email">
                                @Model.ShippingAddress.Email
                            </li>
                            <li class="phone">
                                @Model.ShippingAddress.PhoneNumber
                            </li>
                            if (!string.IsNullOrEmpty(Model.ShippingAddress.Company))
                            {
                                <li class="company">
                                    @Model.ShippingAddress.Company
                                </li>
                            }
                            <li class="address1">
                                @Model.ShippingAddress.Address1
                            </li>
                            if (!string.IsNullOrEmpty(Model.ShippingAddress.Address2))
                            {
                                <li class="address2">
                                    @Model.ShippingAddress.Address2
                                </li>
                            }
                            @if (Model.ShippingAddress.CityEnabled && !string.IsNullOrEmpty(Model.ShippingAddress.City) ||
!string.IsNullOrEmpty(Model.ShippingAddress.County) ||
!string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                            {
                                <li class="city-state-zip">
                                    @if (!string.IsNullOrEmpty(Model.ShippingAddress.City))
                                    {
                                        @Model.ShippingAddress.City
                                        @if (!string.IsNullOrEmpty(Model.ShippingAddress.County) ||
!string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                        {
                                            <text>,</text>
                                        }
                                    }
                                    @if (!string.IsNullOrEmpty(Model.ShippingAddress.County))
                                    {
                                        @Model.ShippingAddress.County
                                        @if (!string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                        {
                                            <text>,</text>
                                        }
                                    }
                                    @if (!string.IsNullOrEmpty(Model.ShippingAddress.StateProvinceName))
                                    {
                                        @Model.ShippingAddress.StateProvinceName
                                        @if (!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                        {
                                            <text>,</text>
                                        }
                                    }
                                    @if (!string.IsNullOrEmpty(Model.ShippingAddress.ZipPostalCode))
                                    {
                                        @Model.ShippingAddress.ZipPostalCode
                                    }
                                </li>
                            }
                            if (!string.IsNullOrEmpty(Model.ShippingAddress.CountryName))
                            {
                                <li class="country">
                                    @Model.ShippingAddress.CountryName
                                </li>
                            }
                            if (!string.IsNullOrEmpty(Model.ShippingAddress.FormattedCustomAddressAttributes))
                            {
                                <li class="custom-attributes-view">
                                    @Html.Raw(Model.ShippingAddress.FormattedCustomAddressAttributes)
                                </li>
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(Model.PickupAddress.Address1))
                            {
                                <li class="address1">
                                    @Model.PickupAddress.Address1
                                </li>
                            }
                            if (!string.IsNullOrEmpty(Model.PickupAddress.City) ||
                                !string.IsNullOrEmpty(Model.PickupAddress.County) ||
                                !string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName) ||
                                !string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                            {
                                <li class="city-state-zip">
                                    @if (!string.IsNullOrEmpty(Model.PickupAddress.City))
                                    {
                                        @Model.PickupAddress.City
                                        @if (!string.IsNullOrEmpty(Model.PickupAddress.County) ||
!string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                        {
                                            <text>,</text>
                                        }
                                    }
                                    @if (!string.IsNullOrEmpty(Model.PickupAddress.County))
                                    {
                                        @Model.PickupAddress.County
                                        @if (!string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName) ||
!string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                        {
                                            <text>,</text>
                                        }
                                    }
                                    @if (!string.IsNullOrEmpty(Model.PickupAddress.StateProvinceName))
                                    {
                                        @Model.PickupAddress.StateProvinceName
                                        @if (!string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                        {
                                            <text>,</text>
                                        }
                                    }
                                    @if (!string.IsNullOrEmpty(Model.PickupAddress.ZipPostalCode))
                                    {
                                        @Model.PickupAddress.ZipPostalCode
                                    }
                                </li>
                            }
                            if (!string.IsNullOrEmpty(Model.PickupAddress.CountryName))
                            {
                                <li class="country">
                                    @Model.PickupAddress.CountryName
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>


        </div>
        <div class="col-md-4 col-sm-6 d-flex flex-column align-items-center align-items-md-start">
            <div class="d-flex flex-row mb-4 cursor-pointer" v-on:mouseover="isHoveringViewInvoice = true;" v-on:mouseleave="isHoveringViewInvoice = false;">
                <img alt="Invoice Icon" v-bind:src="isHoveringViewInvoice ? '/Themes/@themeName/Content/assets/icn-invoice-dark.svg' : '/Themes/@themeName/Content/assets/icn-invoice.svg'" />
                <label class="h4-primary mb-0 ml-1 cursor-pointer">View Invoice</label>
            </div>
            <div class="d-flex flex-row cursor-pointer" v-on:mouseover="isHoveringViewTicket = true;" v-on:mouseleave="isHoveringViewTicket = false;">
                <img alt="Ticket Icon"
                     v-bind:src="isHoveringViewTicket ? '/Themes/@themeName/Content/assets/icn-delivery-ticket-dark.svg' : '/Themes/@themeName/Content/assets/icn-delivery-ticket.svg'" />
                <label class="h4-primary mb-0 ml-1 cursor-pointer">View Delivery Ticket</label>
            </div>
            @if (Model.MtrCount > 0)
            {
                <div class="d-flex flex-row mt-4 cursor-pointer" v-on:mouseover="isHoveringViewMTR = true;" v-on:mouseleave="isHoveringViewMTR = false;">
                    <img alt="MTR Icon" v-bind:src="isHoveringViewMTR ? '/Themes/@themeName/Content/assets/invoice-dark.svg' : '/Themes/@themeName/Content/assets/invoice.svg'" />

                    @if (Model.MtrCount == 1)
                    {
                        <label class="h4-primary mb-0 ml-1 cursor-pointer">View MTR @Model.MTRs.FirstOrDefault()?.MtrId</label>
                    }
                    else if (Model.MtrCount > 1)
                    {
                        <label class="h4-primary mb-0 ml-1 cursor-pointer" onclick="handleMtrModal()">View MTRs</label>
                    }
                </div>
            }

        </div>
    </div>
    <div class="mt-4 bg-white-shadow">
        <table class="table table-striped w3-animate-left nss-table">
            <colgroup>
                <col width="10%" />
                <col />
                <col width="8%" />
                <col width="8%" />
                <col width="8%" />
                <col width="8%" />
                <col width="8%" />
                <col width="5%" />
                <col width="8%" />
                <col width="10%" />
            </colgroup>
            <thead>
                <tr>
                    <th class="sku">Item #</th>
                    <th class="name">Description</th>
                    <th class="vendor">Customer Part #</th>
                    <th class="price">Unit Price</th>
                    <th class="quantity">Total Price</th>
                    <th class="total">Weight (lb)</th>
                    <th>PO #</th>
                    <th class="text-center">Qty.</th>
                    <th class="text-center">UOM</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.OrderItems)
                {
                    <tr>
                        <td class="sku">@item.LineNo</td>
                        <td class="product">@item.Description</td>
                        <td>@item.CustomerPartNo</td>
                        <td>$@DoFormat(item.UnitPrice)</td>
                        <td>$@DoFormat(item.TotalPrice)</td>
                        <td>@string.Format("{0:N0}", item.TotalWeight)</td>
                        <td>@Model.PoNo</td>
                        <td class="text-center">@item.Quantity</td>
                        <td class="text-center">@item.UOM</td>
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4 offset-md-8 bg-white-shadow p-4 mt-4">
        <table class="cart-total">
            <tbody>
                <tr>
                    <td class="cart-total-left">
                        <label class="mb-0">@T("Order.SubTotal"):</label>
                    </td>
                    <td class="cart-total-right">
                        <span>$@DoFormat(Model.LineItemTotal)</span>
                    </td>
                </tr>
                <tr>
                    <td class="cart-total-left">
                        <label>@T("Order.Tax"):</label>
                    </td>
                    <td class="cart-total-right">
                        <span>$@DoFormat(Model.TaxTotal)</span>
                    </td>
                </tr>
                <tr>
                    <td class="mt-0">
                        <label class="h2-default-teko text-uppercase">Total</label>
                    </td>
                    <td class="cart-total-right">
                        <span class="h2-default-teko">$@DoFormat(Model.OrderTotal)</span>
                    </td>
                </tr>
            </tbody>
        </table>

    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageBottom, additionalData = Model })
    </div>
    @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onDialogCreated").Header("<span class='dialog-header'>VIEW MTRS</span>").ContentTemplate(
@Content1).ShowCloseIcon(true).Visible(false).Width("450px").Target("body").Render();
</div>

@{
    @using Newtonsoft.Json.Serialization;
    @using Newtonsoft.Json;

    var contractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() };
    var shippingAddresses = JsonConvert.SerializeObject(Model, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });
}

@functions{
    string DoFormat(decimal myNumber)
    {
        var s = string.Format("{0:N2}", myNumber);

        return s;
    }
}

<script>
    function onDialogCreated() {
        viewMtrModal = this;
    }

    console.log("model: ", @Html.Raw(shippingAddresses));
    new Vue({
        el: '#order-detail',
        data: {
            isHoveringViewInvoice: false,
            isHoveringViewTicket: false,
            isHoveringViewMTR: false,
        },
        methods: {
            onFocused: function () {
                this.isHoveringViewTicket = true;
                console.log("onFocused: ");
            },
            onBlur: function () {
                this.isHoveringViewTicket = false;
                console.log("onBlur: ");
            }
        },
    });

    function handleMtrModal() {
        viewMtrModal.show();
    }

</script>
<ejs-scripts></ejs-scripts>
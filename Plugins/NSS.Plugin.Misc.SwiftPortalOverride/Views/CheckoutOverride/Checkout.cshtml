@using NSS.Plugin.Misc.SwiftCore.Helpers
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using Nop.Core.Domain.Catalog
@using Nop.Services.Common
@using Nop.Core
@using NSS.Plugin.Misc.SwiftCore.Services
@using NSS.Plugin.Misc.SwiftPortalOverride
@using Nop.Services.Catalog
@using NSS.Plugin.Misc.SwiftCore.Domain.Customers

@inject IGenericAttributeService genericAttributeService
@inject IProductService productService
@inject IWorkContext workContext
@inject ICustomerCompanyService customerCompanyService
@inject ICompanyService companyService
@inject ICustomerCompanyProductService customerCompanyProductService

@model CheckoutCompleteOverrideModel
@{
    Layout = "_ColumnsOne";
    var themeName = Constants.ThemeName;

    //page class
    Html.AppendPageCssClassParts("html-home-page");
    Html.AddCssFileParts("~/Plugins/Misc.SwiftPortalOverride/Content/checkout.css");
}

@{
    @using Newtonsoft.Json.Serialization;
    @using Newtonsoft.Json;

    var contractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() };
    var shippingAddresses = JsonConvert.SerializeObject(Model.ShippingAddressModel.ExistingAddresses, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });

    var billingAddresses = JsonConvert.SerializeObject(Model.BillingAddressModel.BillingAddress.ExistingAddresses, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });

    var pickupPoints = JsonConvert.SerializeObject(Model.ShippingAddressModel.PickupPointsModel.PickupPoints, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });

    var accountCredit = JsonConvert.SerializeObject(Model.AccountCreditModel, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });

    var states = JsonConvert.SerializeObject(Model.StateProvinces, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });
    var cart = JsonConvert.SerializeObject(Model.ShoppingCartModel, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });
    var orderTotals = JsonConvert.SerializeObject(Model.OrderTotals, new JsonSerializerSettings
    {
        ContractResolver = contractResolver,
        Formatting = Formatting.None
    });
}

@{
    var checkoutAttributes = Model.ShoppingCartModel.CheckoutAttributes;
    var purchaseOrder = checkoutAttributes.FirstOrDefault(x => x.Name == "Purchase Order #")?.DefaultValue ?? "0";
    var shippingMethodsSelected = checkoutAttributes.FirstOrDefault(x => x.Name == "Delivery Option")?.Values;
    var isDelivery = shippingMethodsSelected?.FirstOrDefault(x => x.Name == "Ship to Customer")?.IsPreSelected ?? false;
    var isPickup = shippingMethodsSelected?.FirstOrDefault(x => x.Name == "Pickup from North Shore Steel")?.IsPreSelected;
}

@{
    var customer = workContext.CurrentCustomer;
    var customerId = customer.Id;
    string ERPComId = SwiftPortalOverrideDefaults.ERPCompanyId;
    ERPComId += customerId;
    int.TryParse(Context.Request.Cookies[ERPComId], out int ERPCompanyId);
    Company company = new Company();
    CustomerCompany customerCompany = new CustomerCompany();
    if (!String.IsNullOrEmpty(ERPCompanyId.ToString()))
        company = companyService.GetCompanyEntityByErpEntityId(ERPCompanyId);
    if (company != null)
        customerCompany = customerCompanyService.GetCustomerCompany(customerId, company.Id);
}

@Html.Raw(Model.PaypalScript);
<style>
    .paypal-button.paypal-button-color-blue, .paypal-button-row.paypal-button-color-blue .menu-button {
        background: red !important;
    }
</style>
<div id="checkout" class="page home-page" v-cloak>
    <div class="page-body">

        <label class="h4 text-primary font-weight-bold text-center w-100 mt-4 mb-0">CHECKOUT</label>
        <hr style="height: 2px; color: #000; opacity: 0.5;margin-bottom: 30px;">
        <div class="row px-5" style="justify-content: space-between;">
            <div class="col-9">
                <div class="card card-mod">
                    <label class="h5 text-primary font-weight-bold mb-4">ORDER INFORMATION</label>
                    <div class="d-flex flex-row justify-content-between mt-2">
                        <div class="d-flex flex-column">
                            <label for="purchaseOrder" class="fs-13 text-black">Purchase Order #</label>
                            <label id="purchaseOrder" class="p-2 text-black">{{ purchaseOrder }}</label>
                        </div>
                        <div class="d-flex flex-column ml-5">
                            <label for="deliveryDate" class="fs-13 text-black">Estimated Delivery Date</label>
                            <label id="deliveryDate" class="p-2 text-black">{{ formatDate(deliveryDate) }}</label>
                        </div>
                        <button class="h6 text-primary mr-5" onclick="setLocation('@Url.Action("Cart", "CartOverride")')">
                            <img src="Themes/@themeName/Content/assets/enter.svg" alt="" width="20" class="mr-2">
                            Edit Shopping Cart
                        </button>
                    </div>
                </div>
                <div class="card card-mod">
                    <h1 class="h5 text-primary font-weight-bold mb-4">SHIPPING OR PICKUP</h1>
                    <div class="d-flex flex-row justify-content-center mb-3">
                        <button class="fs-14 shipping-tab mr-2" v-bind:class="{'active': isDelivery}" v-on:click="isDelivery = true; getShippingRate();">
                            Delivery
                        </button>
                        <button id="pickup" class="font14 shipping-tab" v-bind:class="{'active': !isDelivery}" v-on:click="isDelivery = false; getShippingRate()">
                            Pickup
                        </button>
                    </div>

                    <div class="d-flex flex-column mb-3" v-if="isDelivery">
                        <label for="shippingAddress" class="fs-14 text-black mb-1">Shipping Address</label>
                        <div class="d-flex flex-row">
                            <select type="text" class="bg-accent text-black px-2 py-2" id="shippingAddress"
                                    v-on:change="showNewShippingAddress = false; $event.target.value ? getShippingRate() : null;"
                                    v-model="shippingAddressId"
                                    v-bind:class="{'w-100': showNewShippingAddress, 'w-75': !showNewShippingAddress}">
                                <option v-bind:value="null">-Select Address-</option>
                                <option v-bind:value="address.id" v-for="address in shared.shippingAddresses">
                                    {{ address.address1 }}{{ address.address1 ? ', ' : '' }}
                                    {{ address.city }}{{ address.city ? ', ' : '' }}
                                    {{ address.stateProvinceName }} {{ address.zipPostalCode }}
                                </option>
                            </select>
                            <button class="fs-14 w-25 text-primary justify-content-end text-decoration-underline"
                                    v-if="!showNewShippingAddress" v-on:click="showNewShippingAddress = true; shippingAddressId = null">
                                Enter a new shiping address
                            </button>
                        </div>
                        <label class="text-danger mt-1 mb-0" v-if="!shippingAddressId && !showNewShippingAddress && isDelivery && dirty">Shipping Address is required</label>
                    </div>
                    <div class="d-flex flex-column mb-3" v-if="!isDelivery">
                        <label for="shippingAddress" class="fs-14 text-black mb-1">North Shore Steel Pickup Location</label>
                        <div class="d-flex flex-row">
                            <select type="text" class="bg-accent text-black w-100 px-2 py-2"
                                    name="shipping-address" id="shippingAddress"
                                    v-on:change="$event.target.value ? getShippingRate() : null;" v-model="pickupPointId">
                                <option v-bind:value="null">-Select Address-</option>
                                <option v-bind:value="address.id" v-for="address in shared.pickupPoints">
                                    {{ address.name }}, {{ address.address }}, {{ address.city }}, {{ address.stateProvinceName }} {{ address.zipPostalCode }}
                                </option>
                            </select>
                        </div>
                        <label class="text-danger mt-1 mb-0" v-if="!pickupPointId && !isDelivery && dirty">Pickup Location is required</label>
                    </div>

                    <hr v-if="showNewShippingAddress && isDelivery" />
                    <div class="d-flex flex-column" v-if="showNewShippingAddress && isDelivery">
                        <h1 class="h5 text-primary font-weight-bold mb-2">NEW ADDRESS</h1>
                        <div class="d-flex flex-row mt-3">
                            <div class="d-flex flex-column w-50 mr-2">
                                <label class="fs-14 text-black mb-1">Address Line 1</label>
                                <input type="text" class="nss-form-control" v-model="newShippingAddress.address1" placeholder="Ex: 1234 Main St." v-on:blur="getShippingRate" />
                                <label class="text-danger mt-1 mb-0" v-if="isDelivery && dirty && !newShippingAddress.address1">Address Line 1 is required</label>
                            </div>
                            <div class="d-flex flex-column w-50 ml-2">
                                <label class="fs-14 text-black mb-1">Address Line 2</label>
                                <input type="text" class="nss-form-control" v-model="newShippingAddress.address2" placeholder="Ex: Ste. 800" v-on:blur="getShippingRate" />
                            </div>
                        </div>
                        <div class="row d-flex flex-row mt-4">
                            <div class="col-md-6 d-flex flex-column pr-2">
                                <label class="fs-14 text-black mb-1">City</label>
                                <input type="text" class="nss-form-control" v-model="newShippingAddress.city" placeholder="Ex: Dallas" v-on:blur="getShippingRate" />
                                <label class="text-danger mt-1 mb-0" v-if="isDelivery && dirty && !newShippingAddress.city">City is required</label>
                            </div>
                            <div class="col-md-4 d-flex flex-column px-2">
                                <label class="fs-14 text-black mb-1">State</label>
                                <select type="text" class="nss-form-control" name="state" v-model="newShippingAddress.stateProvinceId" v-on:blur="getShippingRate">
                                    <option v-bind:value="null">-Select-</option>
                                    <option v-bind:value="option.id" v-for="option in shared.states">
                                        {{ option.name }}
                                    </option>
                                </select>
                                <label class="text-danger mt-1 mb-0" v-if="isDelivery && dirty && !newShippingAddress.stateProvinceId">State is required</label>
                            </div>
                            <div class="col-md-2 d-flex flex-column pl-2">
                                <label class="fs-14 text-black mb-1">Zip Code</label>
                                <input type="text" class="nss-form-control" v-model="newShippingAddress.zipPostalCode" placeholder="Ex: 77014" v-on:blur="getShippingRate" />
                                <label class="text-danger mt-1 mb-0" v-if="isDelivery && dirty && !newShippingAddress.zipPostalCode">Zip Code is required</label>
                            </div>
                        </div>
                        <div class="d-flex flex-row mt-4">
                            <label class="nss-radio-button">
                                Save to My Addresses
                                <input type="checkbox" v-bind:checked="newShippingAddress.saveToMyAddresses" />
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="d-flex flex-row mt-3">
                            <div class="d-flex flex-column w-75">
                                <label class="fs-14 text-black mb-1">Address Nickname</label>
                                <input type="text" class="nss-form-control" placeholder="Ex: 'South Warehouse'" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card card-mod">
                    <label class="h5 text-primary font-weight-bold mb-4">PAYMENT METHOD</label>
                    <div class="d-flex flex-column mb-3">
                        <div class="d-flex flex-row flex-wrap justify-content-between">
                            <div class="d-flex flex-row payment-item-card align-items-start p-4 w-30"
                                 v-bind:class="{'active': paymentMethodIndex === shared.constants.PAYMENT_METHOD_CREDIT_CARD}"
                                 v-on:click="paymentMethodIndex = shared.constants.PAYMENT_METHOD_CREDIT_CARD">
                                <img src="Themes/@themeName/Content/assets/credit-card.svg" alt="" width="24">
                                <div class="d-flex flex-column ml-2">
                                    <label class="fs-18 font-weight-bold mb-1">Credit/Debit</label>
                                    <label class="fs-12 mb-0">Pay with credit/debit card</label>
                                </div>
                            </div>
                            <div class="d-flex flex-row payment-item-card align-items-start p-4 w-30"
                                 v-bind:class="{'active': paymentMethodIndex === shared.constants.PAYMENT_METHOD_PAYPAL}"
                                 v-on:click="paymentMethodIndex = shared.constants.PAYMENT_METHOD_PAYPAL">
                                <img src="Themes/@themeName/Content/assets/paypal.svg" alt="" width="24">
                                <div class="d-flex flex-column ml-2">
                                    <label class="fs-18 font-weight-bold mb-1">Paypal</label>
                                    <label class="fs-12 mb-0">Pay with PayPal account</label>
                                </div>
                            </div>
                            <div class="d-flex flex-row payment-item-card align-items-start p-4 w-30"
                                 v-bind:class="{
                                 'active': paymentMethodIndex === shared.constants.PAYMENT_METHOD_LINE_OF_CREDIT,
                                 'disabled': lineOfCreditDisabled
                                 }"
                                 v-on:click="lineOfCreditDisabled ? null : paymentMethodIndex = shared.constants.PAYMENT_METHOD_LINE_OF_CREDIT"
                                 v-if="shared.accountCredit.canCredit">
                                <img src="Themes/@themeName/Content/assets/dollar.svg" alt="" width="24">
                                <div class="d-flex flex-column ml-2">
                                    <label class="fs-18 font-weight-bold mb-1">Line of Credit</label>
                                    <label class="fs-12 mb-0">Balance: ${{ formatMoney(shared.accountCredit.creditAmount) }}</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div v-show="paymentMethodIndex === shared.constants.PAYMENT_METHOD_CREDIT_CARD">
                        <div class="d-flex flex-column">
                            <div class="row d-flex flex-row mt-3">
                                <div class="col-md-7 d-flex flex-column">
                                    <label class="fs-14 text-black mb-1">Cardholder name</label>
                                    <input id="cardholdername" type="text" class="nss-form-control" v-model="paymentCard.cardHolderName" placeholder="Ex: James Doe" />
                                    <label class="text-danger mt-1 mb-0" v-if="dirty && !paymentCard.cardHolderName">Cardholder name is required</label>
                                </div>
                            </div>
                            <div class="row d-flex flex-row mt-3">
                                <div class="col-md-6 d-flex flex-column">
                                    <label for="card-number" class="fs-14 text-black mb-1">Card Number</label>
                                    <div id="card-number" class="nss-form-control" style="height: 40px;"></div>
                                </div>
                                <div class="col-md-4 d-flex flex-column">
                                    <label for="expiration-date" class="fs-14 text-black mb-1">Expiration Date</label>
                                    <div id="expiration-date" class="nss-form-control" style="height: 40px;"></div>
                                </div>
                                <div class="col-md-2 d-flex flex-column">
                                    <label for="cvv" class="fs-14 text-black mb-1">CVV</label>
                                    <div id="cvv" class="nss-form-control" style="height: 40px;"></div>
                                </div>
                            </div>

                            <h1 class="h5 text-primary font-weight-bold mt-3">Billing Address</h1>
                            <div class="d-flex flex-column mt-2" v-if="!shipToSameAddress || !isDelivery">
                                <div class="d-flex flex-row">
                                    <select type="text" class="bg-accent text-black px-2 py-2"
                                            id="shippingAddress" v-on:change="showNewBillingAddress = false;" v-model="billingAddressId"
                                            v-bind:class="{'w-100': showNewBillingAddress, 'w-75' : !showNewBillingAddress}">
                                        <option v-bind:value="null">-Select Address-</option>
                                        <option v-bind:value="address.id" v-for="address in shared.billingAddresses">
                                            {{ address.address1 }}{{ address.address1 ? ', ' : '' }}
                                            {{ address.city }}{{ address.city ? ', ' : '' }}
                                            {{ address.stateProvinceName }} {{ address.zipPostalCode }}
                                        </option>
                                    </select>
                                    <button class="fs-14 w-25 text-primary justify-content-end text-decoration-underline"
                                            v-if="!showNewBillingAddress" v-on:click="showNewBillingAddress = true; billingAddressId = null">
                                        Enter new billing address
                                    </button>
                                </div>
                                <label class="text-danger mt-1 mb-0" v-if="dirty && !billingAddressId && !showNewBillingAddress">Billing address is required</label>

                                <div class="d-flex flex-column" v-if="showNewBillingAddress">
                                    <h1 class="h5 text-primary font-weight-bold mb-2 mt-3">NEW ADDRESS</h1>
                                    <div class="d-flex flex-row mt-3">
                                        <div class="d-flex flex-column w-50 mr-2">
                                            <label class="fs-14 text-black mb-1">Address Line 1</label>
                                            <input type="text" class="nss-form-control" v-model="newBillingAddress.address1" placeholder="Ex: 1234 Main St." />
                                            <label class="text-danger mt-1 mb-0" v-if="dirty && !newBillingAddress.address1">Address Line 1 is required</label>
                                        </div>
                                        <div class="d-flex flex-column w-50 ml-2">
                                            <label class="fs-14 text-black mb-1">Address Line 2</label>
                                            <input type="text" class="nss-form-control" v-model="newBillingAddress.address2" placeholder="Ex: Ste. 800" />
                                        </div>
                                    </div>
                                    <div class="row d-flex flex-row mt-4">
                                        <div class="col-md-6 d-flex flex-column pr-2">
                                            <label class="fs-14 text-black mb-1">City</label>
                                            <input type="text" class="nss-form-control" v-model="newBillingAddress.city" placeholder="Ex: Dallas" />
                                            <label class="text-danger mt-1 mb-0" v-if="dirty && !newBillingAddress.city">City is required</label>
                                        </div>
                                        <div class="col-md-4 d-flex flex-column px-2">
                                            <label class="fs-14 text-black mb-1">State</label>
                                            <select type="text" class="nss-form-control" v-model="newBillingAddress.stateProvinceId">
                                                <option v-bind:value="null">-Select-</option>
                                                <option v-bind:value="option.id" v-for="option in shared.states">
                                                    {{ option.name }}
                                                </option>
                                            </select>
                                            <label class="text-danger mt-1 mb-0" v-if="dirty && !newBillingAddress.stateProvinceId">State is required</label>
                                        </div>
                                        <div class="col-md-2 d-flex flex-column pl-2">
                                            <label class="fs-14 text-black mb-1">Zip Code</label>
                                            <input type="text" class="nss-form-control" v-model="newBillingAddress.zipPostalCode" placeholder="Ex: 77014" />
                                            <label class="text-danger mt-1 mb-0" v-if="dirty && !newBillingAddress.zipPostalCode">Zip Code is required</label>
                                        </div>
                                    </div>
                                    <div class="d-flex flex-row mt-4">
                                        <label class="nss-radio-button">
                                            Save to My Addresses
                                            <input type="checkbox" v-bind:checked="newBillingAddress.saveToMyAddresses" />
                                            <span class="checkmark"></span>
                                        </label>
                                    </div>
                                    <div class="d-flex flex-row mt-3">
                                        <div class="d-flex flex-column w-75">
                                            <label class="fs-14 text-black mb-1">Address Nickname</label>
                                            <input type="text" class="nss-form-control" placeholder="Ex: 'South Warehouse'" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3" v-if="isDelivery">
                                <label class="nss-checkbox">
                                    Same as shipping address
                                    <input type="checkbox" v-bind:checked="shipToSameAddress"
                                           v-on:change="shipToSameAddress = !shipToSameAddress;">
                                    <span class="checkmark"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div v-show="paymentMethodIndex === shared.constants.PAYMENT_METHOD_PAYPAL">
                        <label class="text-primary">
                            You will be redirected to a paypal page where you'll be able to make payment when you click "PLACE ORDER".
                        </label>
                    </div>
                    <div v-show="paymentMethodIndex === shared.constants.PAYMENT_METHOD_LINE_OF_CREDIT">
                        <label class="text-primary">Line of credit payment method will be used when you click "PLACE ORDER".</label>
                    </div>
                </div>
                <div class="d-flex flex-column">

                    <label class="h4 text-primary font-weight-bold text-center mt-4 mb-0">ORDER SUMMARY</label>
                    <hr style="color: rgb(7, 7, 107); margin-bottom: 20px;">
                    <table class="table table-bordered catalog-table font12" id="catalogTable" onload="sortTable(0)">
                        <thead>
                            <tr>
                                <th scope="col">Item #</th>
                                <th scope="col">Description</th>
                                <th scope="col">Customer Part #</th>
                                <th scope="col">Unit Price</th>
                                <th scope="col">Total Price</th>
                                <th scope="col">Total Weight (lbs)</th>
                                <th scope="col">Qty.</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.ShoppingCartModel.Items)
                            {
                                var product = productService.GetProductById(item.ProductId);
                                var attr = genericAttributeService.GetAttributesForEntity(item.ProductId, nameof(Product));

                                var customerPathNo = "";
                                if (customerCompany != null)
                                {
                                    var customerCompanyProduct = customerCompanyProductService.GetCustomerCompanyProductById(customerCompany.CompanyId, item.ProductId);
                                    customerPathNo = customerCompanyProduct != null ? customerCompanyProduct.CustomerPartNo : "";
                                }

                                var itemTagNo = attr.FirstOrDefault(x => x.Key == "itemTagNo")?.Value;
                                var itemNo = attr.FirstOrDefault(x => x.Key == "itemNo")?.Value;
                                string serialized = attr.FirstOrDefault(x => x.Key == "serialized")?.Value;
                                var iNo = serialized == "True" ? itemTagNo : itemNo;
                                var weight = Decimal.ToDouble(product.Weight);
                                weight = (weight * item.Quantity);
                                var totalWeight = DoFormat(weight);

                                <tr>
                                    <td>@iNo</td>
                                    <td>@item.ProductName</td>
                                    <td>@customerPathNo</td>
                                    <td>@item.UnitPrice / CW</td>
                                    <td>@item.SubTotal</td>
                                    <td>@totalWeight</td>
                                    <td>@item.Quantity</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-3">
                <div class="card card-mod">
                    <label class="fs-14 text-primary font-weight-bold text-center">ORDER SUMMARY</label>
                    <div class="order-summary mt-2">
                        <div class="price-summary">
                            <label class="text-muted">Sub-Total:</label>
                            <label class="text-black">{{ subTotal }}</label>
                        </div>
                        <div class="price-summary">
                            <label class="text-muted">Shipping:</label>
                            <label class="text-black">{{ formatMoney(shippingAmount) }}</label>
                        </div>
                        <div class="price-summary">
                            <label class="text-muted">Discount:</label>
                            <label class="text-black">{{ formatMoney(discountAmount) }}</label>
                        </div>
                        <div class="price-summary">
                            <label class="text-muted">Tax:</label>
                            <label class="text-black">
                                {{ taxAmount }}
                            </label>
                        </div>
                        <div class="price-summary">
                            <label class="h5 text-black font-weight-bold">TOTAL</label>
                            <label class="h5 text-black font-weight-bold">${{ formatMoney(orderTotal) }}</label>
                        </div>
                    </div>
                </div>
                <div style="display:flex;justify-content: center;">
                    <button id="place-order" v-show="paymentMethodIndex !== shared.constants.PAYMENT_METHOD_PAYPAL"
                            v-on:click="placeOrder" v-bind:disabled="disableSubmit">
                        PLACE ORDER
                    </button>
                    <div id="paypal-button-container" v-show="paymentMethodIndex === shared.constants.PAYMENT_METHOD_PAYPAL"></div>
                </div>
            </div>
        </div>

    </div>
</div>
@functions{
    string DoFormat(double myNumber)
    {
        var s = string.Format("{0:0.00}", myNumber);

        return s;
    }
}
<script>
    var shippingAddresses = @Html.Raw(shippingAddresses);
    var billingAddresses = @Html.Raw(billingAddresses);
    var pickupPoints = @Html.Raw(pickupPoints);
    var accountCredit = @Html.Raw(accountCredit);
    var states = @Html.Raw(states);
    var cart = @Html.Raw(cart);
    var orderTotals = @Html.Raw(orderTotals);
    var purchaseOrder = '@purchaseOrder';
    var isDelivery = '@isDelivery' === 'True';

    const store = {
        state: {
            shippingAddresses,
            billingAddresses,
            pickupPoints,
            accountCredit,
            states,
            cart,
            orderTotals,

            constants: {
                PAYMENT_METHOD_CREDIT_CARD: 1,
                PAYMENT_METHOD_PAYPAL: 2,
                PAYMENT_METHOD_LINE_OF_CREDIT: 3,
            },
        },
    };

    new Vue({
        el: '#checkout',
        data: {
            shared: store.state,
            deliveryDate: null,
            purchaseOrder,
            isDelivery,
            shippingAddressId: shippingAddresses.length > 0 ? shippingAddresses[0].id : null,
            pickupPointId: pickupPoints.length > 0 ? pickupPoints[0].id : null,
            showNewShippingAddress: false,
            newShippingAddress: {
                address1: null,
                address2: null,
                city: null,
                stateProvinceId: null,
                zipPostalCode: null,
                saveToMyAddresses: false,
                countryId: 1,
            },
            paymentMethodIndex: 1,
            paymentCard: {
                cardType: null,
                cardHolderName: null,
                cardNumber: null,
                cardExpirationMonth: null,
                cardExpirationYear: null,
                expirationDate: null,
                cardCode: null,
            },
            shipToSameAddress: true,
            expirationMonths: [],
            expirationYears: [],
            billingAddressId: null,
            showNewBillingAddress: false,
            newBillingAddress: {
                address1: null,
                address2: null,
                city: null,
                stateProvinceId: null,
                zipPostalCode: null,
                saveToMyAddresses: false,
                countryId: 1,
            },
            dirty: false,
            subTotal: orderTotals.subTotal.replace("$", ""),
            shippingAmount: orderTotals.shipping.replace("$", ""),
            discountAmount: orderTotals.subTotalDiscount ? orderTotals.subTotalDiscount : 0,
            taxAmount: orderTotals.tax.replace("$", ""),
            orderTotal: orderTotals.orderTotal.replace("$", ""),
            disableSubmit: false,
        },
        mounted: function () {
            this.setupCreditCardMethod();
            this.setupPaypalMethod();
            this.getShippingRate(true);
        },
        computed: {
            lineOfCreditDisabled: function () {
                return this.shared.accountCredit.creditAmount < Number(this.orderTotal);
            },
        },
        methods: {
            showLoading: function () {
                AjaxCart.setLoadWaiting(true);
            },
            hideLoading: function () {
                AjaxCart.setLoadWaiting(false);
            },
            formatMoney: function (input) {
                return input.toLocaleString(undefined, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            },
            formatDate: function (date) {
                if (!date) return 'N/A';
                const localTime = moment.utc(date).toDate();
                return moment(localTime).format("MM/DD/YYYY");
            },

            getShippingRate: function (disableSpinner) {
                if (this.showNewShippingAddress && (!this.newShippingAddress.address1 ||
                    !this.newShippingAddress.city || !this.newShippingAddress.stateProvinceId ||
                    !this.newShippingAddress.zipPostalCode)) return;

                if (this.isDelivery && !this.shippingAddressId && !this.showNewShippingAddress) return;

                this.disableSubmit = true;
                let address;
                if (this.isDelivery) {
                    if (this.showNewShippingAddress) address = this.newShippingAddress;
                    else address = this.shared.shippingAddresses.find(x => x.id === this.shippingAddressId);
                } else {
                    address = this.shared.pickupPoints.find(x => x.id === this.pickupPointId);
                    address.address1 = address.address;
                }
                console.log("address: ", address);

                const request = {
                    isPickup: !this.isDelivery,
                    address1: address.address1,
                    address2: address.address2,
                    stateProvinceId: address.stateProvinceId,
                    city: address.city,
                    zipPostalCode: address.zipPostalCode,
                };
                const self = this;
                if (!disableSpinner)
                    this.showLoading();
                $.ajax({
                    url: "@Url.Action("GetShippingRate", "CheckoutOverride")",
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(request),
                    success: function (data, _, _) {
                        console.log("GetShippingRate success: ", data);
                        self.disableSubmit = false;
                        if (data != null) {
                            self.shippingAmount = data.shippingCalculatorResponse.shippingCost;
                            self.discountAmount = data.orderDiscountAmount;
                            self.orderTotal = data.orderTotal;
                            self.deliveryDate = data.shippingCalculatorResponse.deliveryDate;
                        }
                        if (!disableSpinner)
                            self.hideLoading();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        self.disableSubmit = false;
                        if (!disableSpinner)
                            self.hideLoading();
                        console.log(thrownError, 'GetShippingRate datadata-error', xhr);
                    }
                });
            },

            placeOrder: function () {
                this.dirty = true;
                if (this.paymentMethodIndex !== this.shared.constants.PAYMENT_METHOD_LINE_OF_CREDIT) return;

                console.log("isValid: ", this.validate());
                if (!this.validate()) return;
                this.showLoading();
                this.finalizeOrder();
            },
            initializeOrder: async function () {
                const self = this;
                let orderId = '';
                const shippingAddressId = self.shippingAddressId ? self.shippingAddressId : 0;
                let shippingNewAddress = { ...self.newShippingAddress };
                let pickupPoint = self.shared.pickupPoints.find(x => x.id === self.pickupPointId);

                const shipToSameAddress = self.paymentMethodIndex === self.shared.constants.PAYMENT_METHOD_LINE_OF_CREDIT
                    ? true : self.shipToSameAddress;
                const billingAddressId = shipToSameAddress ? shippingAddressId : (self.billingAddressId ? self.billingAddressId : 0);
                const billingNewAddress = { ...self.newBillingAddress };

                const request = {
                    shippingAddress: {
                        shippingNewAddress,
                        pickupPoint,
                        shippingAddressId,
                        saveToAddressBook: self.newShippingAddress.saveToMyAddresses,
                        isPickupInStore: !self.isDelivery,
                    },
                    billingAddress: {
                        shipToSameAddress,
                        billingNewAddress,
                        billingAddressId,
                        saveToAddressBook: self.newBillingAddress.saveToMyAddresses,
                    },
                    paymentMethodModel: {
                        checkoutPaymentMethodType: self.paymentMethodIndex,
                    },
                    hasError: false,
                };
                console.log('creating order...', request);
                await $.ajax({
                    url: "@Url.Action("CreatePayPalOrder", "CheckoutOverride")",
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(request),
                    success: function (data, textStatus, XMLHttpRequest) {
                        console.log('success - created order...', data);
                        //if (data?.error === 1) return;
                        orderId = data.orderId;
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log("createOrder error: ", thrownError, xhr);
                    }
                });
                return orderId;
            },
            finalizeOrder: function () {
                 const shippingAddressId = this.shippingAddressId ? this.shippingAddressId : 0;
                let shippingNewAddress = {...this.newShippingAddress};
                let pickupPoint = this.shared.pickupPoints.find(x => x.id === this.pickupPointId);

                const shipToSameAddress = this.paymentMethodIndex === this.shared.constants.PAYMENT_METHOD_LINE_OF_CREDIT
                    ? true : this.shipToSameAddress;
                const billingAddressId = shipToSameAddress ? shippingAddressId : (this.billingAddressId ? this.billingAddressId : 0);
                const billingNewAddress = {...this.newBillingAddress};

                const request = {
                    shippingAddress: {
                        shippingNewAddress,
                        pickupPoint,
                        shippingAddressId,
                        saveToAddressBook: this.newShippingAddress.saveToMyAddresses,
                        isPickupInStore: !this.isDelivery,
                    },
                    billingAddress: {
                        shipToSameAddress,
                        billingNewAddress,
                        billingAddressId,
                        saveToAddressBook: this.newBillingAddress.saveToMyAddresses,
                    },
                    paymentMethodModel: {
                        checkoutPaymentMethodType: this.paymentMethodIndex,
                    },
                    hasError: false,
                };
                console.log("request: ", request);
                $.ajax({
                    url: "@Url.Action("PlaceOrder", "CheckoutOverride")",
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(request),
                    success: function (data, textStatus, XMLHttpRequest) {
                        console.log("PlaceOrder response: ", data);
                        if (data?.error === 1) {
                            alert(data.message);
                            return;
                        }
                        if (data != null) {
                            window.location.href = '/Completed';
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        self.hideLoading();
                        console.log("PlaceOrder error: ", thrownError, xhr);
                    }
                });
            },

            validate: function () {
                if ((!this.pickupPointId && !this.isDelivery) || (this.isDelivery && !this.showNewShippingAddress && !this.shippingAddressId))
                    return false;

                if (this.showNewShippingAddress && this.isDelivery) {
                    if (!this.newShippingAddress.address1 || !this.newShippingAddress.city || !this.newShippingAddress.zipPostalCode ||
                        !this.newShippingAddress.stateProvinceId)
                        return false;
                }
                if (this.showNewBillingAddress) {
                    if (!this.newBillingAddress.address1 || !this.newBillingAddress.city || !this.newBillingAddress.zipPostalCode ||
                        !this.newBillingAddress.stateProvinceId)
                        return false;
                }
                if (this.paymentMethodIndex === this.shared.constants.PAYMENT_METHOD_CREDIT_CARD) {
                    if (!this.paymentCard.cardHolderName)
                        return false;
                }
                return true;
            },

            setupCreditCardMethod: function () {
                if (paypal.HostedFields.isEligible()) {
                    const self = this;
                    paypal.HostedFields.render({
                        createOrder: async function () {
                            return await self.initializeOrder();
                        }, // replace order-ID with the order ID
                        styles: {
                            ':focus': {
                                color: 'black',
                            },
                            '::placeholder': {
                                'font- style': 'italic',
                                'color': '#C3C3C3',
                            }
                        },
                        fields: {
                            number: {
                                selector: '#card-number',
                                placeholder: 'Ex: 0000 0000 0000 0000',
                            },
                            cvv: {
                                selector: '#cvv',
                                placeholder: 'Ex: 000',
                            },
                            expirationDate: {
                                selector: '#expiration-date',
                                placeholder: 'Ex: MM/YY',
                            },
                        },
                    }).then(function (hf) {
                        $('#place-order').click(function (event) {
                            event.preventDefault();
                            if (self.paymentMethodIndex !== self.shared.constants.PAYMENT_METHOD_CREDIT_CARD || !self.validate()) return;

                            self.showLoading();

                            hf.submit({
                                cardholderName: self.paymentCard.cardHolderName,
                            }).then(function (data) {
                                    self.finalizeOrder();
                                })
                                .catch(function (err) {
                                    console.log('error: ', JSON.stringify(err));
                                    self.hideLoading();
                                    const title = 'The following error(s) occured: \n\n';
                                    const errors = err.details.map(x => '•  ' + x.description).join('\n');
                                    const footer = '\n\n' + err.message;
                                    alert(title + errors + footer);
                                });
                        });
                    });
                } else {
                    //$('#my-sample-form').hide(); // hides the advanced credit and debit card payments fields if merchant isn't eligible
                }
            },

            setupPaypalMethod: function () {
                const self = this;
                paypal
                    .Buttons({
                        commit: false,
                        style: {
                            layout: 'vertical',
                            color: 'blue',
                            shape: 'rect',
                        },
                        //onInit: function (data, actions) {

                        //    // Disable the buttons
                        //    actions.disable();

                        //    // Listen for changes to the checkbox
                        //    //document.querySelector('#check')
                        //    //    .addEventListener('change', function (event) {

                        //    //        // Enable or disable the button when it is checked or unchecked
                        //    //        if (event.target.checked) {
                        //    //            actions.enable();
                        //    //        } else {
                        //    //            actions.disable();
                        //    //        }
                        //    //    });
                        //},
                        onClick: function (e, actions) {
                            self.dirty = true;
                            if (!self.validate() || self.disableSubmit) return actions.reject();
                            else return actions.resolve();
                        },
                        createOrder: async function (data, actions) {
                            // This function sets up the details of the transaction, including the amount and line item details
                            return await self.initializeOrder();
                        },
                        onCancel: function (data) {
                            // Show a cancel page, or return to cart
                        },
                        onApprove: function (data, actions) {
                            // This function captures the funds from the transaction
                            return self.finalizeOrder();
                        },
                    }).render('#paypal-button-container');
            },
        },
    });

</script>
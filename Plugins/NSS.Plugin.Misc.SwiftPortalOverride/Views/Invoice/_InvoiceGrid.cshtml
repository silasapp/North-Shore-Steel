@using NSS.Plugin.Misc.SwiftPortalOverride.Models

@model CompanyInvoiceListModel
@using Syncfusion.EJ2

<style>
    .e-headercell.e-lastcell, .e-rowcell.e-gridchkbox {
        padding-left: 0.6rem
    }

    .colorRed {
        color: red !important;
    }

    .home-table-sm-header {
        width: 110px !important;
        background-color: #1899E1 !important;
        /* border-bottom: 0.1px solid white; */
    }
    .invisible-grid {
        height: 0 !important;
        visibility: hidden;
    }
</style>
<div id="invoicesGrid">
    <div v-bind:class="{'invisible-grid': isMobile}">
        <ejs-grid id="InvoiceGrid" dataSource="@Model.Invoices" excelQueryCellInfo="excelQueryCellInfo"
                  queryCellInfo="customiseCell" allowExcelExport="true" allowPaging="true" allowFiltering="true"
                  rowSelected="onRowSelected" rowDeselected="onRowDeselected">
            <e-grid-filtersettings type="Menu"></e-grid-filtersettings>
            <e-grid-pagesettings pageSize="100"></e-grid-pagesettings>
            <e-grid-columns>
                <e-grid-column template="#invoiceNo" headerText="Invoice #" minWidth="80" width="100" maxWidth="120" allowFiltering="false"></e-grid-column>
                <e-grid-column template="#orderNo" headerText="Order #" minWidth="80" width="90" maxWidth="100" allowFiltering="false"></e-grid-column>
                <e-grid-column field="PoNo" headerText="Purchase Order #" minWidth="130" width="140" maxWidth="150" allowFiltering="false"></e-grid-column>
                <e-grid-column field="InvoiceAmount" headerText="Invoice Amount" format="C2" minWidth="130" width="140" maxWidth="150" allowFiltering="false"></e-grid-column>
                @if (!Model.IsClosed)
                {
                    <e-grid-column field="BalanceAmount" headerText="Balance Amount" format="C2" minWidth="130" width="140" maxWidth="150" allowFiltering="false"></e-grid-column>
                }
                <e-grid-column field="InvoiceDate" headerText="Invoice Date" minWidth="110" width="120" maxWidth="130" format="M/d/yy" allowFiltering="false"></e-grid-column>
                @if (Model.IsClosed)
                {
                    <e-grid-column field="InvoicePaidDate" headerText="Paid Date" minWidth="80" width="100" maxWidth="120" format="M/d/yy" allowFiltering="false"></e-grid-column>
                }
                else
                {
                    <e-grid-column field="InvoiceDueDate" headerText="Due Date" minWidth="80" width="100" maxWidth="120" format="M/d/yy" allowFiltering="false"></e-grid-column>
                    <e-grid-column field="InvoiceStatusName" headerText="Status" filter="@(new { type = "CheckBox" })" minWidth="80" width="100" maxWidth="120"></e-grid-column>
                }
                <e-grid-column type="checkbox" width="30"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
    <div v-if="isMobile" v-bind:style="{'margin-bottom': isMobile ? '40px':'0', 'margin-right': isMobile && isExportMode ? '-21px' : '0'}">
        <div v-if="@Model.Invoices.Count == 0" style="background:#ffffff; padding: 10px;">
            <label class=".fs12-default"> No records to display</label>
        </div>
        @foreach (var invoice in Model.Invoices)
        {
            <div class="d-flex">
                <label v-if="isExportMode" class="nss-checkbox mr-3  d-flex align-items-center" style="position: relative;">
                    <input type="checkbox"
                           v-on:change="onCheck(@invoice.InvoiceId)">
                    <span class="checkmark"></span>
                </label>
                <div class="d-flex flex-column bg-white-shadow mb-3 w-100">

                    <div class="d-flex flex-row">
                        <div class="d-flex bg-primary p-2 home-table-sm-header">
                            <label class="fs12-white mb-0">Invoice #</label>
                        </div>
                        <div class="d-flex p-2">
                            <a href="@invoice.InvoiceFile" class="fs12-link" target="_blank">@invoice.InvoiceId</a>
                        </div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex bg-primary p-2 home-table-sm-header">
                            <label class="fs12-white mb-0">Order #</label>
                        </div>
                        <div class="d-flex p-2">
                            <a class="fs12-link" href="/orders/@invoice.OrderNo">@invoice.OrderNo</a>
                        </div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex bg-primary p-2 home-table-sm-header">
                            <label class="fs12-white mb-0">Purchase Order #</label>
                        </div>
                        <div class="d-flex p-2">
                            <a class="fs12-default">@invoice.PoNo</a>
                        </div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex bg-primary p-2 home-table-sm-header">
                            <label class="fs12-white mb-0">Invoice Amount</label>
                        </div>
                        <div class="d-flex p-2">
                            <label class="fs12-default mb-0">@invoice.InvoiceAmount</label>
                        </div>
                    </div>


                    @if (!Model.IsClosed)
                    {
                        <div class="d-flex flex-row">
                            <div class="d-flex bg-primary p-2 home-table-sm-header">
                                <label class="fs12-white mb-0">Balance Amount</label>
                            </div>
                            <div class="d-flex p-2">
                                <label class="fs12-default mb-0">@invoice.BalanceAmount</label>
                            </div>
                        </div>

                    }
                    <div class="d-flex flex-row">
                        <div class="d-flex bg-primary p-2 home-table-sm-header">
                            <label class="fs12-white mb-0">Invoice Date</label>
                        </div>
                        <div class="d-flex p-2">
                            <label class="fs12-default mb-0">@invoice.InvoiceDate.ToString("MM/dd/yyyy")</label>
                        </div>
                    </div>

                    @if (Model.IsClosed)
                    {
                        <div class="d-flex flex-row">
                            <div class="d-flex bg-primary p-2 home-table-sm-header">
                                <label class="fs12-white mb-0">Paid Date</label>
                            </div>
                            <div class="d-flex p-2">
                                <label class="fs12-default mb-0">@invoice.InvoicePaidDate.ToString("MM/dd/yyyy")</label>
                            </div>
                        </div>

                    }
                    else
                    {
                        <div class="d-flex flex-row">
                            <div class="d-flex bg-primary p-2 home-table-sm-header">
                                <label class="fs12-white mb-0">Due Date</label>
                            </div>
                            <div class="d-flex p-2">
                                <label class="fs12-default mb-0">@invoice.InvoiceDueDate.ToString("MM/dd/yyyy")</label>
                            </div>
                        </div>
                        <div class="d-flex flex-row">
                            <div class="d-flex bg-primary p-2 home-table-sm-header">
                                <label class="fs12-white mb-0">Status</label>
                            </div>
                            <div class="d-flex p-2">
                                <label class="fs12-default mb-0">@invoice.InvoiceStatusName</label>
                            </div>
                        </div>
                    }


                </div>
            </div>
        }
    </div>
</div>
@functions{
    @using Newtonsoft.Json.Serialization;
    @using Newtonsoft.Json;

    string Serialize(object input)
    {
        return JsonConvert.SerializeObject(input, new JsonSerializerSettings
        {
            ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() },
            Formatting = Formatting.None
        });
    }
}
<script>
    var invoicegridvm = new Vue({
        el: '#invoicesGrid',
        data: {
            window: {
                width: 0,
                height: 0,
            },
            isExportMode: false,
        },
        created: function () {
            window.addEventListener("resize", this.handleResize);
            this.handleResize();
        },
        destroyed: function () {
            window.removeEventListener("resize", this.handleResize);
        },
        computed: {
            isMobile: function () {
                return this.window.width <= 767.98;
            },
        },
        methods: {
            handleResize: function () {
                this.window.width = window.innerWidth;
                this.window.height = window.innerHeight;
            },
            switchToExport: function () {
                this.isExportMode = true;
            },
            cancelExportMode: function () {
                this.isExportMode = false;
            }

        },
    });
</script>
<script>
    function formatDate(date) {
        date = new Date(date);
        return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
    }
    var pageModel = @Html.Raw(Serialize(Model));
        var mobileExcelData = [];
        function onCheck(orderId) {
            var found = mobileExcelData.find(x => x.orderId == orderId);
            if (!found) {
                var data = pageModel.orders.find(x => x.orderId == orderId);

                Object.keys(data).map(function (key, index) {
                    data["orderDate"] = formatDate(data["orderDate"] );
                    data["deliveryDate"] = formatDate(data["deliveryDate"] );
                    data["promiseDate"] = formatDate(data["promiseDate"] );
                    data["scheduledDate"] = formatDate(data["scheduledDate"]);
                });
                for (var key in data) {
                    var temp;
                    if (data.hasOwnProperty(key)) {
                        temp = data[key];
                        delete data[key];
                        data[key.charAt(0).toUpperCase() + key.substring(1)] = temp;
                    }
                }
                mobileExcelData.push(data);
                var exportBtn = document.getElementById('export-mob-btn');
                exportBtn.innerHTML = "<img src='Themes/SwiftPortal/Content/assets/icn-download.svg' alt=''><span class='mr-1'>" + mobileExcelData.length +  "</span>Export";
            } else {
                mobileExcelData = mobileExcelData.filter(x => x.orderId != orderId);
            }
            console.log('mobileExcelData', mobileExcelData);
        }
    function toolbarClick() {
        var gridObj = document.getElementById("InvoiceGrid").ej2_instances[0];
        var exceldata = gridObj.getSelectedRecords();
        if (exceldata.length > 0) {
            var exportProperties = {
                dataSource: exceldata,
                fileName: "InvoiceExport.xlsx"
            };
            gridObj.excelExport(exportProperties);
        }
    }
    function exportExcelMobile() {
        var gridObj = document.getElementById("OrderGrid").ej2_instances[0];
        //var exceldata = gridObj.getSelectedRecords();
        console.log(mobileExcelData);
        if (mobileExcelData.length > 0) {
            var exportProperties = {
                dataSource: mobileExcelData,
                fileName: "OrdersExport.xlsx"
            };
            gridObj.excelExport(exportProperties);
        }
    }

    function excelQueryCellInfo(args) {
        if (args.column.headerText == "Invoice #" && args.value.length === 0) { args.value = args.data.InvoiceId; }
        if (args.column.headerText == "Order #" && args.value.length === 0) { args.value = args.data.OrderNo; }
        if (args.column.headerText == "Invoice Amount" && args.value.length === 0) { args.value = args.data.InvoiceAmount; }
        if (args.column.headerText == "Balance Amount" && args.value.length === 0) { args.value = args.data.BalanceAmount; }
    }

    function onRowSelected(args) {
        var gridObj = document.getElementById("InvoiceGrid").ej2_instances[0];
        var exceldata = gridObj.getSelectedRecords();
        vm.selectedRowCount = exceldata.length;
    }

    function onRowDeselected(args) {
        var gridObj = document.getElementById("InvoiceGrid").ej2_instances[0];
        var exceldata = gridObj.getSelectedRecords();
        vm.selectedRowCount = exceldata.length;
    }

    function customiseCell(args) {
        if (args.column.field === 'InvoiceStatusName') {
            if (args.data['InvoiceStatusName'].indexOf("past due") > -1) {
                args.cell.classList.add('colorRed');
            }
        }
    }

</script>

<script id="invoiceNo" type="text/x-template">
    <a href="${InvoiceFile}" target="_blank">${InvoiceId}</a>
</script>
<script id="orderNo" type="text/x-template">
    <a href="/orders/${OrderNo}">${OrderNo}</a>
</script>
<ejs-scripts></ejs-scripts>
@using Nop.Core
@using Nop.Web.Models.Customer
@using NSS.Plugin.Misc.SwiftCore.Helpers
@using NSS.Plugin.Misc.SwiftPortalOverride
@using NSS.Plugin.Misc.SwiftCore.Services
@inject IWorkContext workContext
@inject ICustomerCompanyService customerCompanyService
@model CustomerAddressEditModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-address-edit-page");

    Html.AppendScriptParts("~/Themes/SwiftPortal/Content/js/custom.mask.js");
}

@{
    var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, workContext.CurrentCustomer.Id);
    int eRPCompanyId = Common.GetSavedERPCompanyIdFromCookies(Context.Request.Cookies[compIdCookieKey]);
    bool isBuyer = customerCompanyService.Authorize(workContext.CurrentCustomer.Id, eRPCompanyId, ERPRole.Buyer);
}

@section left
{
    @await Component.InvokeAsync("CustomCustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Addresses, isABuyer = isBuyer })
}
<form asp-route="CustomerAddressAdd" method="post">
    <div class="page account-page address-edit-page">
        <div class="page-body">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "Address";
                @await Html.PartialAsync("_CreateOrUpdateAddress", Model.Address, dataDictAddress)
            }
            <div class="buttons">
                <input type="submit" class="cancel-button" style="background-color: transparent !important;" value="Cancel" />
                <input type="submit" onClick="return validatePhoneNumbers();" class="button-1 save-address-button" value="@T("Common.Save")" />
            </div>
        </div>
    </div>
</form>

<script>
    let phoneElement = "";
    $(document).ready(function () {
        phoneElement = document.getElementById('phone-number');
        phoneElement.addEventListener('keydown', enforceFormat);
        phoneElement.addEventListener('keyup', formatToPhone);
    });

    function validatePhoneNumbers() {
        if (phoneElement.value != "") {
            re = /^[(]\d{3}[)][\s.-]\d{3}[\s.-]\d{4}$/igm;
            if (!re.test(phoneElement.value)) {
                alert('Please enter a valid phone number.');
                return false;
            }
        }
    }
</script>
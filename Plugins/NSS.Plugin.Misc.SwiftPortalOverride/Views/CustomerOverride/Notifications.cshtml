@using Nop.Core
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using NSS.Plugin.Misc.SwiftCore.Helpers
@using NSS.Plugin.Misc.SwiftPortalOverride
@using NSS.Plugin.Misc.SwiftCore.Services
@using Nop.Services.Common
@using Nop.Web.Framework.Themes
@model NotificationsModel
@inject Nop.Core.IWebHelper webHelper
@inject IThemeContext themeContext
@inject IWorkContext workContext
@inject IGenericAttributeService genericAttributeService
@inject ICustomerCompanyService customerCompanyService

@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-customer-info-page");
}

@{
    var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, workContext.CurrentCustomer.Id);

    int eRPCompanyId = Convert.ToInt32(genericAttributeService.GetAttribute<string>(workContext.CurrentCustomer, compIdCookieKey));
    bool isBuyer = customerCompanyService.Authorize(workContext.CurrentCustomer.Id, eRPCompanyId, ERPRole.Buyer);
}

@{ var themeName = themeContext.WorkingThemeName; }

@section left
{
    @await Component.InvokeAsync("CustomCustomerNavigation", new { selectedTabId = CustomerNavigationEnum.NotificationPreferences, isABuyer = isBuyer })
}

<style>
    .iconContainer {
        background-color: #0076B4 !important;
    }
</style>

<div id="notifications" class="page account-page customer-info-page" v-cloak>
    <div class="page-body">
        <div class=account-page-card>
            <div class="title">
                <strong>NOTIFICATIONS</strong>
                <a v-on:click="enableAllNotifications" class="notification-all">Enable all notifications</a>
            </div>

            <div class=notification-group>
                <div class="notification-top">
                    <p></p>
                    <div class="action-titles mb-2">
                        <p>Email</p>
                        <p>SMS</p>
                    </div>
                </div>
                <div class="notification" v-for="preference in preferenceArr">
                    <p>{{preference.title}}</p>
                    <div class="notification-actions">
                        <div v-for="p in preference.preferences" :class="{'iconContainer': p.Value}">
                            <label class="mb-1">
                                <input type="checkbox" hidden v-model="p.Value">
                                <template v-if="itemsContains(p.Key, 'email')">
                                    <svg v-if="p.Value" xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         aria-hidden="true" focusable="false" width="1em" height="1em"
                                         style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
                                         preserveAspectRatio="xMidYMid meet"
                                         viewBox="0 0 24 24">
                                        <path d="M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-.4 4.25l-6.54 4.09c-.65.41-1.47.41-2.12 0L4.4 8.25a.85.85 0 1 1 .9-1.44L12 11l6.7-4.19a.85.85 0 1 1 .9 1.44z"
                                              fill="#FFFFFF" />
                                    </svg>
                                    <svg v-if="!p.Value" xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         aria-hidden="true" focusable="false" width="1em" height="1em"
                                         style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
                                         preserveAspectRatio="xMidYMid meet"
                                         viewBox="0 0 24 24">
                                        <path d="M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-.4 4.25l-6.54 4.09c-.65.41-1.47.41-2.12 0L4.4 8.25a.85.85 0 1 1 .9-1.44L12 11l6.7-4.19a.85.85 0 1 1 .9 1.44z"
                                              fill="#AAAAAA" />
                                    </svg>

                                </template>
                                <template v-if="itemsContains(p.Key, 'sms')">
                                    <svg v-if="p.Value" xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         aria-hidden="true" focusable="false" width="1em" height="1em"
                                         style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
                                         preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24">
                                        <path d="M17 19H7V5h10m0-4H7c-1.11 0-2 .89-2 2v18a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2z" fill="#FFFFFF" />
                                    </svg>
                                    <svg v-if="!p.Value" xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         aria-hidden="true" focusable="false" width="1em" height="1em"
                                         style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
                                         preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24">
                                        <path d="M17 19H7V5h10m0-4H7c-1.11 0-2 .89-2 2v18a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2z" fill="#AAAAAA" />
                                    </svg>

                                </template>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="buttons save-customer-info-button notification-btn">
                <input type=submit v-on:click="updatePreferences"
                       id=save-info-button value='Update Preferences' name=save-info-button
                       class="button-2 ">
            </div>
        </div>
    </div>
</div>

<script>
    var vm = new Vue({
        el: '#notifications',
        data: {
            preferences: [],
            preferenceArr: [],
            transformedPreference: [],
        },
        mounted: function () {
            this.getPreferences();
        },
        methods: {
            transformDataForClient: function (data) {
                this.preferenceArr = [];
                    data.map(item => {
                        this.preferenceArr.push({
                            title: item.Title,
                            preferences: item.Preferences
                        });
                    })

            },

            transformDataForServer: function (data) {
                this.transformedPreference = [];
                for (var i = 0; i < data.length; i++) {
                    data[i].preferences.map(item => {
                        this.transformedPreference.push({
                            key: item.Key,
                            value: item.Value
                        });
                    })
                }
            },

            showLoading: function () {
                $('#custom-loading').show();
            },
            hideLoading: function () {
                $('#custom-loading').hide();
            },
            getPreferences: function () {
                this.showLoading();
                const self = this;
                $.ajax({
                    url: "@Url.Action("GetNotifications", "CustomerOverride")",
                    type: 'GET',
                    contentType: 'application/json;',
                    success: function (data, _, _) {
                        console.log('getNotifications - data', self.preferences)
                        self.transformDataForClient(data.model.Notifications);
                        self.hideLoading();
                    },
                    error: function (xhr, thrownError) {
                        self.hideLoading();
                        console.log(xhr, 'error-data', thrownError);
                    }
                });
            },

            updatePreferences: function () {
                this.transformDataForServer(this.preferenceArr);
                const request = {
                    Preferences: this.transformedPreference
                }

                this.showLoading();
                const self = this;
                console.log('JSONrequest', request);
                $.ajax({
                    url: "@Url.Action("UpdateNotifications", "CustomerOverride")",
                    type: 'POST',
                    traditional: true,
                    contentType: 'application/json;',
                    data: JSON.stringify(request),
                    success: function (data,_,_) {
                        console.log('success-data', data);
                        self.hideLoading();
                    },
                    error: function (xhr, thrownError) {
                        self.hideLoading();
                        console.log(xhr, 'error-data', thrownError);
                    }
                });
            },

            enableAllNotifications: function () {
                for (var i = 0; i < this.preferenceArr.length; i++) {
                    this.preferenceArr[i].preferences.map(item => {
                        item.Value = true;
                    })
                }
            },

            itemsContains(key, iconText) {
                return key.indexOf(iconText) > -1;
            }
        },
    });
</script>
@using Syncfusion.EJ2
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@model FilterableProductsModel

@{
    Layout = "_ColumnsOne";

    //page class
    Html.AppendPageCssClassParts("html-home-page");
    Html.AddCssFileParts("~/Plugins/Misc.SwiftPortalOverride/Content/catalog.css");
}


<style>
    .card-body {
        padding: 0.5rem 0 0.5rem 1.25rem;
    }

    .e-treeview .e-ul {
        padding: 0 0 0 12px !important;
    }

    .chip {
        display: inline-block;
        padding: 0 1rem;
        height: 1.5rem;
        font-size: 12px;
        line-height: 1.6rem;
        border-radius: 25px;
        background-color: #f1f1f1
    }

    .spinner {
        height: 60px;
        width: 60px;
        margin: auto;
        display: flex;
        position: absolute;
        -webkit-animation: rotation .6s infinite linear;
        -moz-animation: rotation .6s infinite linear;
        -o-animation: rotation .6s infinite linear;
        animation: rotation .6s infinite linear;
        border-left: 6px solid rgba(0, 174, 239, .15);
        border-right: 6px solid rgba(0, 174, 239, .15);
        border-bottom: 6px solid rgba(0, 174, 239, .15);
        border-top: 6px solid rgba(0, 174, 239, .8);
        border-radius: 100%;
    }

    @@-webkit-keyframes rotation {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(359deg);
        }
    }

    @@-moz-keyframes rotation {
        from {
            -moz-transform: rotate(0deg);
        }

        to {
            -moz-transform: rotate(359deg);
        }
    }

    @@-o-keyframes rotation {
        from {
            -o-transform: rotate(0deg);
        }

        to {
            -o-transform: rotate(359deg);
        }
    }

    @@keyframes rotation {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(359deg);
        }
    }

    #overlay {
        position: absolute;
        display: none;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        /*background-color: rgba(0,0,0,0.5);*/
        z-index: 2;
    }

    .chip-closebtn:hover {
        color: #666666;
    }

    /*checkbox*/
    .pure-material-checkbox {
        z-index: 0;
        position: relative;
        display: inline-block;
        color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.87);
        font-family: var(--pure-material-font, "Roboto", "Segoe UI", BlinkMacSystemFont, system-ui, -apple-system);
        font-size: 16px;
        line-height: 1.5;
    }

        /* Input */
        .pure-material-checkbox > input {
            appearance: none;
            -moz-appearance: none;
            -webkit-appearance: none;
            z-index: -1;
            position: absolute;
            left: -10px;
            top: -8px;
            display: block;
            margin: 0;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            background-color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.6);
            box-shadow: none;
            outline: none;
            opacity: 0;
            transform: scale(1);
            pointer-events: none;
            transition: opacity 0.3s, transform 0.2s;
        }

        /* Span */
        .pure-material-checkbox > span {
            display: inline-block;
            width: 100%;
            cursor: pointer;
        }

            /* Box */
            .pure-material-checkbox > span::before {
                content: "";
                display: inline-block;
                box-sizing: border-box;
                margin: 3px 11px 3px 1px;
                border: solid 2px; /* Safari */
                border-color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.6);
                border-radius: 2px;
                width: 18px;
                height: 18px;
                vertical-align: top;
                transition: border-color 0.2s, background-color 0.2s;
            }

            /* Checkmark */
            .pure-material-checkbox > span::after {
                content: "";
                display: block;
                position: absolute;
                top: 3px;
                left: 1px;
                width: 10px;
                height: 5px;
                border: solid 2px transparent;
                border-right: none;
                border-top: none;
                transform: translate(3px, 4px) rotate(-45deg);
            }

        /* Checked, Indeterminate */
        .pure-material-checkbox > input:checked,
        .pure-material-checkbox > input:indeterminate {
            background-color: rgb(var(--pure-material-primary-rgb, 33, 150, 243));
        }

            .pure-material-checkbox > input:checked + span::before,
            .pure-material-checkbox > input:indeterminate + span::before {
                border-color: rgb(var(--pure-material-primary-rgb, 33, 150, 243));
                background-color: rgb(var(--pure-material-primary-rgb, 33, 150, 243));
            }

            .pure-material-checkbox > input:checked + span::after,
            .pure-material-checkbox > input:indeterminate + span::after {
                border-color: rgb(var(--pure-material-onprimary-rgb, 255, 255, 255));
            }

            .pure-material-checkbox > input:indeterminate + span::after {
                border-left: none;
                transform: translate(4px, 3px);
            }



    /*checkbox*/
</style>

<div class="page home-page">
    <div class="page-body">
        <div class="row">
            <div class="col-sm-3"></div>
            <div class="col-sm-9">
                <div id="cc">

                </div>
                @*<ejs-chiplist id="chip-avatar" enableDelete="true">
                        <e-chips>
                            <e-chip text="Sent a text" enabled="true"></e-chip>
                            <e-chip text="Set a remainder" enabled="true"></e-chip>
                        </e-chips>
                    </ejs-chiplist>*@
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div id="accordion">
                    <div class="card">
                        <div class="card-header">
                            <a class="card-link" data-toggle="collapse" href="#collapseOne">
                                SHAPES
                            </a>
                        </div>
                        <div id="collapseOne" class="collapse">
                            <div class="">
                                <ejs-treeview id="treedata" showCheckBox="true" nodeClicked="nodeCheck" keyPress="nodeCheck">
                                    <e-treeview-fields dataSource="@ViewBag.dataSource" id="id" parentId="pid" text="name" hasChildren="hasChild" expanded="expanded" selected="is_selected"></e-treeview-fields>
                                </ejs-treeview>
                            </div>
                        </div>
                    </div>
                    @if (Model.ProductsGroupedBySpecTitle != null)
                    {
                        @foreach (var (group, index) in Model.ProductsGroupedBySpecTitle.Select((value, i) => (value, i)))
                        {
                            <div class="card">
                                <div class="card-header">
                                    <a class="collapsed card-link" data-toggle="collapse" href="#collapse-@index">
                                        @group.Key
                                    </a>
                                </div>
                                @foreach (var item in group)
                                {
                                    <div id="collapse-@index" class="collapse">
                                        <div class="card-body">
                                            <label class="pure-material-checkbox">
                                                <input id="checkbox-@item.Id" value="@item.Name" type="checkbox" name="Specs">
                                                <span>@item.Name (@item.ProductCount)</span>
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }

                </div>
            </div>
            <div class="col-sm-9">
                <div id="prtialview"></div>
            </div>
        </div>
    </div>
</div>
<div id="overlay">
    <div class="w-100 d-flex justify-content-center align-items-center">
        <div class="spinner"></div>
    </div>
</div>
<script>
    var specNames = [];
    var specIDs = [];
    function nodeCheck(args) {
        var checkedNode = [args.node];
        var treeObj = document.getElementById('treedata').ej2_instances[0];
        if (args.event.target.classList.contains('e-fullrow') || args.event.key == "Enter") {
            var getNodeDetails = treeObj.getNodeData(args.node);
            if (getNodeDetails.isChecked == 'true') {
                treeObj.uncheckAll(checkedNode);
            } else {
                treeObj.checkAll(checkedNode);
            }
        }
    }

   $(function () {
       $(document).on("change", "[type=checkbox]", function () {
           populateFilteredProductsTable(specIDs, specNames)
        })
   })

    function populateFilteredProductsTable(specIDs, specNames) {
        $("#overlay").css("display", "flex");
        var specId = event.target.id.split('-')[1]
        var checkedValue = event.target.defaultValue;
        specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
        specNames.indexOf(checkedValue) === -1 ? specNames.push(checkedValue) : specNames.splice(specNames.indexOf(checkedValue), 1);
        var arrayValue = "";
        for (i = 0; i < specNames.length; i++) {
            var sChip = specNames[i].replace(/ /g, "_");
            arrayValue += "<div class=\"chip\">" + specNames[i] + "<span class=\"chip-closebtn\" style=\"cursor:pointer\" name=" + sChip + " onclick=doSomething()>×</span></div>";
        }
        document.getElementById("cc").innerHTML = arrayValue;
        $("#overlay").css("display", "flex");
        var postData = { SpecIds: specIDs };

        $.ajax({
            url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
            type: 'POST',
            cache: false,
            dataType: 'html',
            data: postData,
            success: function (data, textStatus, XMLHttpRequest) {
                if(data != null)
                {
                    $("#overlay").css("display", "none");
                    $('#prtialview').html(data)
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(thrownError, 'datadata-error', xhr);
                $('#prtialview').html('an error has occured here')
                $("#overlay").css("display", "none");
            }
        });
    }

    var boxId = 0;
    function doSomething() {
        $("#overlay").css("display", "flex");
        var selectedChip = event.target.getAttribute('name');
        var inputs = document.querySelectorAll("input[type='checkbox']");
        selectedChip = selectedChip.replace(/_/g, " ");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].checked == true && inputs[i].value == selectedChip) {
                boxId = inputs[i].id;
                $("#" + inputs[i].id).prop('checked', false);
                specNames.indexOf(selectedChip) === -1 ? specNames.push(selectedChip) : specNames.splice(specNames.indexOf(selectedChip), 1);
                var arrayValue = "";
                for (i = 0; i < specNames.length; i++) {
                    var sChip = specNames[i].replace(/ /g, "_");
                    arrayValue += "<div class=\"chip\">" + specNames[i] + "<span class=\"chip-closebtn\" style=\"cursor:pointer\" name=" + sChip + " onclick=doSomething()>×</span></div>";
                }
                document.getElementById("cc").innerHTML = arrayValue;
            }
        }

        var specId = boxId.split('-')[1];
        specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
        var postData = { SpecIds: specIDs };
        $.ajax({
            url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
            type: 'POST',
            cache: false,
            dataType: 'html',
            data: postData,
            success: function (data, textStatus, XMLHttpRequest) {
                if(data != null)
                {
                    $("#overlay").css("display", "none");
                    $('#prtialview').html(data)
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(thrownError, 'datadata-error', xhr);
                $('#prtialview').html('an error has occured here')
                $("#overlay").css("display", "none");
            }
        });
    }
</script>
<ejs-scripts></ejs-scripts>
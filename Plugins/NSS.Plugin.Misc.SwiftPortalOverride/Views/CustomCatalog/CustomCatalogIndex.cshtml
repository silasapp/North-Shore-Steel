@using Syncfusion.EJ2
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@model CatalogModel

@{
    Layout = "_ColumnsOne";

    //page class
    Html.AppendPageCssClassParts("html-home-page");
    Html.AddCssFileParts("~/Plugins/Misc.SwiftPortalOverride/Content/catalog.css");
}

@{
    var groupedSpecificationAttributes = Model.PagingFilteringContext.SpecificationFilter.NotFilteredItems.GroupBy(sf => sf.SpecificationAttributeName);
}
<div class="page home-page">
    <div class="page-body">
        <div class="row">
            <div class="col-sm-3"></div>
            <div class="col-sm-9">
                <div id="cc"></div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div id="accordion">
                    <div class="card">
                        <div class="card-header">
                            <a class="card-link" data-toggle="collapse" href="#collapseOne">
                                SHAPES
                            </a>
                        </div>
                        <div id="collapseOne" class="collapse">
                            <div class="">
                                <ejs-treeview id="treedata" showCheckBox="true" nodeClicked="nodeCheck" keyPress="nodeCheck">
                                    <e-treeview-fields dataSource="@ViewBag.dataSource" id="id" parentId="pid" text="name" hasChildren="hasChild" expanded="expanded" selected="is_selected"></e-treeview-fields>
                                </ejs-treeview>
                            </div>
                        </div>
                    </div>
                    @if (groupedSpecificationAttributes != null)
                    {
                        var key = "";
                        @foreach (var (group, index) in groupedSpecificationAttributes.Select((value, i) => (value, i)))
                        {
                            switch (@group.Key)
                            {
                                case "coating":
                                    key = "COATING";
                                    break;
                                case "condition":
                                    key = "CONDITION";
                                    break;
                                case "countryOfOrigin":
                                    key = "COUNTRY OF ORIGIN";
                                    break;
                                case "displayThickness":
                                    key = "THICKNESS (in)";
                                    break;
                                case "displayWidth":
                                    key = "MINIMUM WIDTH (in)";
                                    break;
                                case "grade":
                                    key = "GRADES";
                                    break;
                                case "metal":
                                    key = "METAL";
                                    break;
                                default:
                                    key = group.Key;
                                    break;
                            }
                            <div class="card">
                                <div class="card-header">
                                    <a class="collapsed card-link" data-toggle="collapse" href="#collapse-@index">
                                        @key
                                    </a>
                                </div>
                                @foreach (var item in group)
                                {
                                    <div id="collapse-@index" class="collapse">
                                        <div class="card-body">
                                            <label class="pure-material-checkbox">
                                                <input id="checkbox-@item.SpecificationAttributeOptionId" value="@item.SpecificationAttributeOptionName" type="checkbox" name="Specs">
                                                <span>@item.SpecificationAttributeOptionName</span>
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="col-sm-9">
                <div id="prtialview"></div>
            </div>
        </div>
    </div>
</div>
<div id="overlay">
    <div class="w-100 d-flex justify-content-center align-items-center">
        <div class="spinner"></div>
    </div>
</div>
<script>

    $(document).ready(function () {
        catalogProducts([], [], []);
    });


    let specNames = [];
    let specIDs = [];
    let shapeIDs = [];
    function nodeCheck(args) {
        if (event.which === 3 && event.button === 2) {
            return;
        }

        var checkedNode = [args.node];
        console.log(args, 'checkedNode', checkedNode);
        var treeObj = document.getElementById('treedata').ej2_instances[0];
        var selectedShape = treeObj.getNodeData(args.node);
        var shapeId = selectedShape.id;
        var checkedValue = selectedShape.text
        shapeIDs.indexOf(shapeId) === -1 ? shapeIDs.push(shapeId) : shapeIDs.splice(shapeIDs.indexOf(shapeId), 1);
        specNames.indexOf(checkedValue) === -1 ? specNames.push(checkedValue) : specNames.splice(specNames.indexOf(checkedValue), 1);
        populateFilteredProductsTable(specIDs, specNames, shapeIDs);
    }

    function catalogProducts(specIDs, specNames, shapeIDs) {
        populateFilteredProductsTable(specIDs, specNames, shapeIDs);
    };

    $(document).on("change", "[type=checkbox]", function () {

        var shapeIDs = [];
        var specId = event.target.id.split('-')[1]
        var checkedValue = event.target.defaultValue;
        specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
        specNames.indexOf(checkedValue) === -1 ? specNames.push(checkedValue) : specNames.splice(specNames.indexOf(checkedValue), 1);
        populateFilteredProductsTable(specIDs, specNames, shapeIDs);
    })

    function populateFilteredProductsTable(specIDs, specNames, shapeIDs) {
        $("#overlay").css("display", "flex");


        var arrayValue = "";
        arrayValue = "<div style =\"display: flex; margin: 0 20px 12px 0;\">";
        for (i = 0; i < specNames.length; i++) {
            var sChip = specNames[i].replace(/ /g, "_");
            arrayValue += "<span class=\"filter-tag\">" + specNames[i] + "<button><img alt= " + sChip + " src=\"Themes/SwiftPortal/Content/assets/close-filled.svg\" width=\"15\" height=\"15\" onclick=removeFiltered()></button></span>";
        }
        arrayValue += "</div>";

        document.getElementById("cc").innerHTML = arrayValue;
        $("#overlay").css("display", "flex");
        var filterParams = { SpecIds: specIDs, ShapeIds: shapeIDs};


        $.ajax({
            url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(filterParams),
            success: function (data) {
                if(data != null)
                {
                    $("#overlay").css("display", "none");
                    $('#prtialview').html(data)
                }
            },
            error: function (xhr, thrownError) {
                console.log(thrownError, 'datadata-error', xhr);
                $('#prtialview').html('an error has occured here')
                $("#overlay").css("display", "none");
            }
        });
    }

    var boxId = 0;
    function removeFiltered() {
        $("#overlay").css("display", "flex");
        var selectedChip = event.target.alt;
        var inputs = document.querySelectorAll("input[type='checkbox']");
        var elements = $('li.e-list-item');
        selectedChip = selectedChip.replace(/_/g, " ");

            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].checked == true && inputs[i].value == selectedChip) {
                    boxId = inputs[i].id;
                    $("#" + inputs[i].id).prop('checked', false);
                    specNames.indexOf(selectedChip) === -1 ? specNames.push(selectedChip) : specNames.splice(specNames.indexOf(selectedChip), 1);

                    var specId = boxId.split('-')[1];
                    specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
                }
            }

            for (var i = 0; i < elements.length; i++) {
                if (elements[i].childNodes[1].childNodes[0].ariaChecked == "true" && elements[i].childNodes[1].childNodes[1].innerHTML == selectedChip) {
                    boxId = elements[i].dataset.uid;
                    var checkedNode = elements[i];
                    var treeObj = document.getElementById('treedata').ej2_instances[0];
                    // treeObj.uncheckAll(checkedNode);
                    treeObj.checkNode();
                    console.log('treeObj', checkedNode);
                    elements[i].childNodes[1].childNodes[0].ariaChecked == "false";
                    specNames.indexOf(selectedChip) === -1 ? specNames.push(selectedChip) : specNames.splice(specNames.indexOf(selectedChip), 1);
                    shapeIDs.indexOf(boxId) === -1 ? shapeIDs.push(boxId) : shapeIDs.splice(shapeIDs.indexOf(boxId), 1);
                }
            }

        var arrayValue = "";
        arrayValue = "<div style =\"display: flex; margin: 0 20px 12px 0;\">";
        for (i = 0; i < specNames.length; i++) {
            var sChip = specNames[i].replace(/ /g, "_");
            arrayValue += "<span class=\"filter-tag\">" + specNames[i] + "<button><img alt= " + sChip + " src=\"Themes/SwiftPortal/Content/assets/close-filled.svg\" width=\"15\" height=\"15\" onclick=removeFiltered()></button></span>";

            //arrayValue += "<div class=\"chip\">" + specNames[i] + "<span class=\"chip-closebtn\" style=\"cursor:pointer\" name=" + sChip + " onclick=doSomething()>×</span></div>";
        }
        arrayValue += "</div>";
        document.getElementById("cc").innerHTML = arrayValue;


        var filterParams = { SpecIds: specIDs, ShapeIds: shapeIDs };
        console.log('filterParams', filterParams);
        $.ajax({
             url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(filterParams),
            success: function (data, textStatus, XMLHttpRequest) {
                if(data != null)
                {
                    $("#overlay").css("display", "none");
                    $('#prtialview').html(data)
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(thrownError, 'datadata-error', xhr);
                $('#prtialview').html('an error has occured here')
                $("#overlay").css("display", "none");
            }
        });
    }

    var $sortable = $('.sortable');
    $sortable.on('click', function () {
        var $this = $(this);
        var asc = $this.hasClass('asc');
        var desc = $this.hasClass('desc');
        $sortable.removeClass('asc').removeClass('desc');
        if (desc || (!asc && !desc)) {
            $this.addClass('asc');
        } else {
            $this.addClass('desc');
        }

    });
    $(function () {
        $('table')
            .on('click', 'th', function () {
                var index = $(this).index(),
                    rows = [],
                    thClass = $(this).hasClass('asc') ? 'desc' : 'asc';

                $('#catalogTable th').removeClass('asc desc');
                $(this).addClass(thClass);

                $('#catalogTable tbody tr').each(function (index, row) {
                    rows.push($(row).detach());
                });

                rows.sort(function (a, b) {
                    var aValue = $(a).find('td').eq(index).text(),
                        bValue = $(b).find('td').eq(index).text();

                    return aValue > bValue
                        ? 1
                        : aValue < bValue
                            ? -1
                            : 0;
                });

                if ($(this).hasClass('desc')) {
                    rows.reverse();
                }

                $.each(rows, function (index, row) {
                    $('#catalogTable tbody').append(row);
                });
            });
    });

</script>
<ejs-scripts></ejs-scripts>
@using Syncfusion.EJ2
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@model FilterableProductsModel

@{
    Layout = "_ColumnsOne";

    //page class
    Html.AppendPageCssClassParts("html-home-page");
    Html.AddCssFileParts("~/Plugins/Misc.SwiftPortalOverride/Content/catalog.css");
}


<style>
   
</style>

<div class="page home-page">
    <div class="page-body">
        <div class="row">
            <div class="col-sm-3"></div>
            <div class="col-sm-9">
                <div id="cc">

                </div>
                @*<ejs-chiplist id="chip-avatar" enableDelete="true">
                        <e-chips>
                            <e-chip text="Sent a text" enabled="true"></e-chip>
                            <e-chip text="Set a remainder" enabled="true"></e-chip>
                        </e-chips>
                    </ejs-chiplist>*@
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div id="accordion">
                    <div class="card">
                        <div class="card-header">
                            <a class="card-link" data-toggle="collapse" href="#collapseOne">
                                SHAPES
                            </a>
                        </div>
                        <div id="collapseOne" class="collapse">
                            <div class="">
                                <ejs-treeview id="treedata" showCheckBox="true" nodeClicked="nodeCheck" keyPress="nodeCheck">
                                    <e-treeview-fields dataSource="@ViewBag.dataSource" id="id" parentId="pid" text="name" hasChildren="hasChild" expanded="expanded" selected="is_selected"></e-treeview-fields>
                                </ejs-treeview>
                            </div>
                        </div>
                    </div>
                    @if (Model.GroupedSpecificationAttributeName != null)
                    {
                        @foreach (var (group, index) in Model.GroupedSpecificationAttributeName.Select((value, i) => (value, i)))
                        {
                            <div class="card">
                                <div class="card-header">
                                    <a class="collapsed card-link" data-toggle="collapse" href="#collapse-@index">
                                        @group.Key
                                    </a>
                                </div>
                                @foreach (var item in group)
                                {
                                    <div id="collapse-@index" class="collapse">
                                        <div class="card-body">
                                            <label class="pure-material-checkbox">
                                                <input id="checkbox-@item.SpecificationAttributeOptionId" value="@item.SpecificationAttributeOptionName" type="checkbox" name="Specs">
                                                <span>@item.SpecificationAttributeOptionName ()</span>
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }

                </div>
            </div>
            <div class="col-sm-9">
                <div id="prtialview"></div>
            </div>
        </div>
    </div>
</div>
<div id="overlay">
    <div class="w-100 d-flex justify-content-center align-items-center">
        <div class="spinner"></div>
    </div>
</div>
<script>
    let specNames = [];
    let specIDs = [];
    function nodeCheck(args) {
        var checkedNode = [args.node];
        var treeObj = document.getElementById('treedata').ej2_instances[0];
        if (args.event.target.classList.contains('e-fullrow') || args.event.key == "Enter") {
            var getNodeDetails = treeObj.getNodeData(args.node);
            if (getNodeDetails.isChecked == 'true') {
                treeObj.uncheckAll(checkedNode);
            } else {
                treeObj.checkAll(checkedNode);
            }
        }
    }

   $(function () {
       $(document).on("change", "[type=checkbox]", function () {
           populateFilteredProductsTable(specIDs, specNames)
        })
   })

    function populateFilteredProductsTable(specIDs, specNames) {
        $("#overlay").css("display", "flex");
        var specId = event.target.id.split('-')[1]
        var checkedValue = event.target.defaultValue;
        specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
        specNames.indexOf(checkedValue) === -1 ? specNames.push(checkedValue) : specNames.splice(specNames.indexOf(checkedValue), 1);
        var arrayValue = "";
        for (i = 0; i < specNames.length; i++) {
            var sChip = specNames[i].replace(/ /g, "_");
            arrayValue += "<div class=\"chip\">" + specNames[i] + "<span class=\"chip-closebtn\" style=\"cursor:pointer\" name=" + sChip + " onclick=doSomething()>×</span></div>";
        }
        document.getElementById("cc").innerHTML = arrayValue;
        $("#overlay").css("display", "flex");
        var postData = { SpecIds: specIDs };

        $.ajax({
            url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
            type: 'POST',
            cache: false,
            dataType: 'html',
            data: postData,
            success: function (data, textStatus, XMLHttpRequest) {
                if(data != null)
                {
                    $("#overlay").css("display", "none");
                    $('#prtialview').html(data)
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(thrownError, 'datadata-error', xhr);
                $('#prtialview').html('an error has occured here')
                $("#overlay").css("display", "none");
            }
        });
    }

    var boxId = 0;
    function doSomething() {
        $("#overlay").css("display", "flex");
        var selectedChip = event.target.getAttribute('name');
        var inputs = document.querySelectorAll("input[type='checkbox']");
        selectedChip = selectedChip.replace(/_/g, " ");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].checked == true && inputs[i].value == selectedChip) {
                boxId = inputs[i].id;
                $("#" + inputs[i].id).prop('checked', false);
                specNames.indexOf(selectedChip) === -1 ? specNames.push(selectedChip) : specNames.splice(specNames.indexOf(selectedChip), 1);
                var arrayValue = "";
                for (i = 0; i < specNames.length; i++) {
                    var sChip = specNames[i].replace(/ /g, "_");
                    arrayValue += "<div class=\"chip\">" + specNames[i] + "<span class=\"chip-closebtn\" style=\"cursor:pointer\" name=" + sChip + " onclick=doSomething()>×</span></div>";
                }
                document.getElementById("cc").innerHTML = arrayValue;
            }
        }

        var specId = boxId.split('-')[1];
        specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
        var postData = { SpecIds: specIDs };
        $.ajax({
            url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
            type: 'POST',
            cache: false,
            dataType: 'html',
            data: postData,
            success: function (data, textStatus, XMLHttpRequest) {
                if(data != null)
                {
                    $("#overlay").css("display", "none");
                    $('#prtialview').html(data)
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(thrownError, 'datadata-error', xhr);
                $('#prtialview').html('an error has occured here')
                $("#overlay").css("display", "none");
            }
        });
    }

</script>
<ejs-scripts></ejs-scripts>
@using Syncfusion.EJ2
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@model CatalogModel

@{
    Layout = "_ColumnsOne";

    //page class
    Html.AppendPageCssClassParts("html-home-page");
}

@{
    var groupedSpecificationAttributes = Model.PagingFilteringContext.SpecificationFilter.NotFilteredItems.GroupBy(sf => sf.SpecificationAttributeName);
}

<div id="app" class="page catalog-page">
    <div class="cart-side-drawer-trigger">
        <img src="Themes/SwiftPortal/Content/assets/settings-adjust.svg" alt="">
    </div>
    <div class="cat-side-drawer">

        <div id="accordion">
            <div class="card">
                <a class="card-link" data-toggle="collapse" href="#collapseOne">
                    <div class="card-header">SHAPES</div>
                </a>
                <div id="collapseOne" class="collapse show">
                    <div>
                        <ejs-treeview id="treedata1" showCheckBox="true" autoCheck="false" nodeChecking="nodeChecking" nodeClicked="nodeCheck">
                            <e-treeview-fields dataSource="ViewBag.dataSource" id="id" parentId="pid" text="name" hasChildren="hasChild" expanded="expanded"></e-treeview-fields>
                        </ejs-treeview>
                    </div>
                </div>
            </div>
            @if (groupedSpecificationAttributes != null)
            {
                var key = "";
                @foreach (var (group, index) in groupedSpecificationAttributes.Select((value, i) => (value, i)))
                {
                    switch (@group.Key)
                    {
                        case "coating":
                            key = "COATING";
                            break;
                        case "condition":
                            key = "CONDITION";
                            break;
                        case "countryOfOrigin":
                            key = "COUNTRY OF ORIGIN";
                            break;
                        case "displayThickness":
                            key = "THICKNESS (in)";
                            break;
                        case "displayWidth":
                            key = "MINIMUM WIDTH (in)";
                            break;
                        case "grade":
                            key = "GRADES";
                            break;
                        case "metal":
                            key = "METAL";
                            break;
                        default:
                            key = group.Key;
                            break;
                    }
                    if (@key == "METAL" || @key == "COATING")
                    {
                        <div class="card defaultSpecs" style="display: flex">
                            <a class="collapsed card-link" data-toggle="collapse" href="#collapse-@index">
                                <div class="card-header"> @key</div>
                            </a>
                            @foreach (var item in group)
                            {
                                <div id="collapse-@index" class="collapse show">
                                    <div class="card-body">
                                        <label class="pure-material-checkbox">
                                            <input id="checkbox-@item.SpecificationAttributeOptionId" value="@item.SpecificationAttributeOptionName" type="checkbox" name="Specs">
                                            <span class="checkmark"></span>@item.SpecificationAttributeOptionName
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    <div class="card plateIndividualSpecs" style="display: none">
                        <a class="collapsed card-link" data-toggle="collapse" href="#collapse-@index">
                            <div class=card-header> @key</div>
                        </a>
                        @foreach (var item in group)
                        {
                            <div id="collapse-@index" class="collapse show">
                                <div class="card-body">
                                    <label class="pure-material-checkbox">
                                        <input id="checkbox-@item.SpecificationAttributeOptionId" value="@item.SpecificationAttributeOptionName" type="checkbox" name="Specs">
                                        <span class="checkmark"></span>@item.SpecificationAttributeOptionName
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>

    </div>
    <div class="page-body">
        <div class="row">
            <div class="col-md-4 col-lg-3 col-xl-2"></div>
            <div class="col-md-12 col-lg-9 col-xl-9 filter-tags">
                <div id="searchWord" style=float:left></div>
                <div id=specs style=float:left></div>
                <div id=shapes></div>
                <button id="clearAllFilters" onclick="clearFilters()" class="clear-filter">Clear filters</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 col-lg-3 col-xl-3 shapes-treeview">
                <div id="accordion">
                    <div class="card">
                        <a class="card-link" data-toggle="collapse" href="#collapseOne">
                            <div class="card-header">SHAPES</div>
                        </a>
                        <div id="collapseOne" class="collapse show">
                            <div>
                                <ejs-treeview id="treedata" showCheckBox="true" autoCheck="false" nodeChecking="nodeChecking" nodeClicked="nodeCheck">
                                    <e-treeview-fields dataSource="ViewBag.dataSource" id="id" parentId="pid" text="name" hasChildren="hasChild" expanded="expanded"></e-treeview-fields>
                                </ejs-treeview>
                            </div>
                        </div>
                    </div>
                    @if (groupedSpecificationAttributes != null)
                    {
                        var key = "";
                        @foreach (var (group, index) in groupedSpecificationAttributes.Select((value, i) => (value, i)))
                        {
                            switch (@group.Key)
                            {
                                case "coating":
                                    key = "COATING";
                                    break;
                                case "condition":
                                    key = "CONDITION";
                                    break;
                                case "countryOfOrigin":
                                    key = "COUNTRY OF ORIGIN";
                                    break;
                                case "displayThickness":
                                    key = "THICKNESS (in)";
                                    break;
                                case "displayWidth":
                                    key = "MINIMUM WIDTH (in)";
                                    break;
                                case "grade":
                                    key = "GRADES";
                                    break;
                                case "metal":
                                    key = "METAL";
                                    break;
                                default:
                                    key = group.Key;
                                    break;
                            }
                            if (@key == "METAL" || @key == "COATING")
                            {
                                <div class="card defaultSpecs" style="display: flex">
                                    <a class="collapsed card-link" data-toggle="collapse" href="#collapse-@index">
                                        <div class="card-header"> @key</div>
                                    </a>
                                    @foreach (var item in group)
                                    {
                                        <div id="collapse-@index" class="collapse show">
                                            <div class="card-body">
                                                <label class="pure-material-checkbox">
                                                    <input id="checkbox-@item.SpecificationAttributeOptionId" value="@item.SpecificationAttributeOptionName" type="checkbox" name="Specs">
                                                    <span class="checkmark"></span>@item.SpecificationAttributeOptionName
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            <div class="card plateIndividualSpecs" style="display: none">
                                <a class="collapsed card-link" data-toggle="collapse" href="#collapse-@index">
                                    <div class=card-header> @key</div>
                                </a>
                                @foreach (var item in group)
                                {
                                    <div id="collapse-@index" class="collapse show">
                                        <div class="card-body">
                                            <label class="pure-material-checkbox">
                                                <input id="checkbox-@item.SpecificationAttributeOptionId" value="@item.SpecificationAttributeOptionName" type="checkbox" name="Specs">
                                                <span class="checkmark"></span>@item.SpecificationAttributeOptionName
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="col-md-12 col-lg-9 col-xl-9">
                <div id="partialview"></div>
            </div>
        </div>
    </div>
</div>
<div id="overlay">
    <div class="w-100 d-flex justify-content-center align-items-center">
        <div class="spinner"></div>
    </div>
</div>


<script>
    let isChecked = false;
    function nodeChecking(args) {
        return args.isInteracted ? isChecked = true : !isChecked;
    }

    let specIDs = [];
    let specNames = [];
    let shapeIDs = [];
    let shapeNames = [];
    let searchKeyword = getUrlParameter('q');

    $(document).ready(function () {
        populateFilteredProductsTable(specIDs, specNames, shapeIDs, shapeNames);
    });

    function nodeCheck(args) {
        if (isChecked) {
            var checkedNode = [args.node];
            var treeObj = document.getElementById('treedata').ej2_instances[0];
            var selectedShape = treeObj.getNodeData(args.node);
            var selectedShapeId = selectedShape.id;
            var selectedShapeText = selectedShape.text
            var defaultSpecs = document.getElementsByClassName("defaultSpecs");
            var plateIndividualSpecs = document.getElementsByClassName("plateIndividualSpecs");
            var inputs = document.querySelectorAll("input[type='checkbox']");
            if (selectedShape.isChecked == 'true') {
                treeObj.uncheckAll();
                shapeIDs = [];
                shapeNames = [];
                treeObj.checkAll(checkedNode);
                if (selectedShape.hasChildren) {
                    treeObj.uncheckAll();
                    $(args.node.children[1].childNodes[1]).find('span:nth-child(2)').addClass("e-check");
                }
                shapeIDs.indexOf(selectedShapeId) === -1 ? shapeIDs.push(selectedShapeId) : shapeIDs.splice(shapeIDs.indexOf(selectedShapeId), 1);
                shapeNames.indexOf(selectedShapeText) === -1 ? shapeNames.push(selectedShapeText) : shapeNames.splice(shapeNames.indexOf(selectedShapeText), 1);
            }
            else {
                var shapeButtons = $('.e-frame.e-icons.e-check');
                if (shapeButtons.length == 0) {
                    shapeIDs = [];
                    shapeNames = [];
                }
            }

            if (selectedShapeId == 13 && selectedShape.isChecked == "true") {
                var i = resetSpecFilters(inputs);
                defaultSpecs[0].style.display = "none";
                defaultSpecs[1].style.display = "none";
                for (var j = 0; j < plateIndividualSpecs.length; j++) {
                    plateIndividualSpecs[j].style.display = "flex";
                }
            }
            else if ((selectedShapeId == 13 && selectedShape.isChecked == "false") || defaultSpecs[0].style.display == "none") {
                var i = resetSpecFilters(inputs);
                defaultSpecs[0].style.display = "flex";
                defaultSpecs[1].style.display = "flex";
                for (var j = 0; j < plateIndividualSpecs.length; j++) {
                    plateIndividualSpecs[j].style.display = "none";
                }
            }
            populateFilteredProductsTable(specIDs, specNames, shapeIDs, shapeNames);
        }
        isChecked = false;
    }

    function resetSpecFilters(inputs) {
        specNames = [];
        specIDs = [];
        for (var i = 0; i < inputs.length; i++) {
            $(inputs[i]).prop('checked', false);
        }
        return i;
    }

    $(document).on("change", "[type=checkbox]", function () {
        var shapeIDs = [];
        var specId = event.target.id.split('-')[1]
        var checkedValue = event.target.defaultValue;
        specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
        specNames.indexOf(checkedValue) === -1 ? specNames.push(checkedValue) : specNames.splice(specNames.indexOf(checkedValue), 1);
        populateFilteredProductsTable(specIDs, specNames, shapeIDs, shapeNames);
    })

    function populateFilteredProductsTable(specIDs, specNames, shapeIDs, shapeNames) {
        $("#overlay").css("display", "flex");

        var specChipsValue = "";
        var shapeChipsValue = "";
        var allFilterValue = "";
        var searchChipsValue = "";

        specChipsValue = "<div style =\"display: flex; margin: 0 0 12px 0;\">";
        for (i = 0; i < specNames.length; i++) {
            var sChip = specNames[i].replace(/ /g, "_");
            specChipsValue += "<span class=\"filter-tag\">" + specNames[i] + "<button><img alt= " + sChip + " src=\"Themes/SwiftPortal/Content/assets/close-filled.svg\" width=\"15\" height=\"15\" onclick=removeFiltered()></button></span>";
        }
        specChipsValue += "</div>";
        document.getElementById("specs").innerHTML = specChipsValue;


        shapeChipsValue = "<div style =\"display: flex; margin: 0 0 12px 0;\">";
        for (i = 0; i < shapeNames.length; i++) {
            var sChip = shapeNames[i].replace(/ /g, "_");
            shapeChipsValue += "<span class=\"filter-tag\">" + shapeNames[i] + "<button><img alt= " + sChip + " src=\"Themes/SwiftPortal/Content/assets/close-filled.svg\" width=\"15\" height=\"15\" onclick=removeFiltered()></button></span>";
        }
        shapeChipsValue += "</div>";
        document.getElementById("shapes").innerHTML = shapeChipsValue;

        searchChipsValue = "<div class =\"chipsStyle\" style=\"display: flex;margin: 0 0px 12px 0;\">";
        if (searchKeyword.length > 0) {
            searchChipsValue += "<span class=\"filter-tag\">\"" + searchKeyword + "\"<button><img src=\"Themes/SwiftPortal/Content/assets/close-filled.svg\" width=\"15\" height=\"15\" onclick=removeParam()></button></span>";
        }
        searchChipsValue += "</div>";
        document.getElementById("searchWord").innerHTML = searchChipsValue;

        if (specNames.length > 0 || shapeNames.length > 0 || searchKeyword.length > 0) {
            allFilterValue = "<div class=\"chipsStyle\">Clear filters</div>";
        }
        document.getElementById("clearAllFilters").innerHTML = allFilterValue;



        console.log("getUrlParameter: ", searchKeyword);
        var filterParams = { SpecIds: specIDs, ShapeIds: shapeIDs, SearchKeyword: searchKeyword };

      $.ajax({
          url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
          type: 'POST',
          contentType: 'application/json; charset=utf-8',
          data: JSON.stringify(filterParams),
          success: function (data) {
              if(data != null)
              {
                  console.log("filterParams: ", filterParams);
                  $("#overlay").css("display", "none");
                  $('#partialview').html(data);
              }
          },
          error: function (xhr, thrownError) {
              console.log(thrownError, 'datadata-error', xhr);
              $('#partialview').html('an error has occured here')
              $("#overlay").css("display", "none");
          }
      });
}

    function removeParam() {
        var url = window.location.href;
        searchKeyword = '';
        window.history.pushState("object or string", "Title", "/" + window.location.href.substring(window.location.href.lastIndexOf('/') + 1).split("?")[0]);
        populateFilteredProductsTable(specIDs, specNames, shapeIDs, shapeNames);
    }


    function clearFilters() {
        specNames = [];
        shapeNames = [];
        specIDs = [];
        shapeIDs = [];
        var inputs = document.querySelectorAll("input[type='checkbox']");
        var treeObj = document.getElementById('treedata').ej2_instances[0];
        var defaultSpecs = document.getElementsByClassName("defaultSpecs");
        var plateIndividualSpecs = document.getElementsByClassName("plateIndividualSpecs");
        document.getElementById("clearAllFilters").innerHTML = "";

        searchKeyword = '';
        window.history.pushState("object or string", "Title", "/" + window.location.href.substring(window.location.href.lastIndexOf('/') + 1).split("?")[0]);

        defaultSpecs[0].style.display = "flex";
        defaultSpecs[1].style.display = "flex";
        treeObj.uncheckAll();
        for (var j = 0; j < plateIndividualSpecs.length; j++) {
            plateIndividualSpecs[j].style.display = "none";
        }

        for (var i = 0; i < inputs.length; i++) {
            $(inputs[i]).prop('checked', false);
        }

        populateFilteredProductsTable(specIDs, specNames, shapeIDs, shapeNames);
    }

    var boxId = 0;
    function removeFiltered() {
        $("#overlay").css("display", "flex");
        var selectedChip = event.target.alt;
        var inputs = document.querySelectorAll("input[type='checkbox']");
        var elements = $('li.e-list-item');
        var checkedButtons = $('.e-frame.e-icons.e-check');
        var expandableButtons = $("[aria-checked=mixed]");
        var mixedButtons = $('.e-frame.e-icons.e-stop');
        var defaultSpecs = document.getElementsByClassName("defaultSpecs");
        var plateIndividualSpecs = document.getElementsByClassName("plateIndividualSpecs");
        var specChipsValue = "";
        var shapeChipsValue = "";
        var allFilterValue = "";
        selectedChip = selectedChip.replace(/_/g, " ");
        if (expandableButtons.length > 0) {
            expandableButtons[0].setAttribute("aria-checked", "false");
            mixedButtons.removeClass("e-stop");
        }

        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].checked == true && inputs[i].value == selectedChip) {
                boxId = inputs[i].id;
                var specId = boxId.split('-')[1];
                $("#" + inputs[i].id).prop('checked', false);
                specIDs.indexOf(specId) === -1 ? specIDs.push(specId) : specIDs.splice(specIDs.indexOf(specId), 1);
                specNames.indexOf(selectedChip) === -1 ? specNames.push(selectedChip) : specNames.splice(specNames.indexOf(selectedChip), 1);
                break;
            }
        }

        for (var j = 0; j < elements.length; j++) {
            var listElements = $(elements[j].childNodes[1]).find('span.e-list-text');
            if (listElements[0].innerHTML == selectedChip) {
                defaultSpecs[0].style.display = "flex";
                defaultSpecs[1].style.display = "flex";
                checkedButtons.removeClass("e-check");
                boxId = elements[j].dataset.uid;
                elements[j].childNodes[1].childNodes[0].ariaChecked == "false";
                for (var k = 0; k < plateIndividualSpecs.length; k++) {
                    plateIndividualSpecs[k].style.display = "none";
                }
                shapeNames.indexOf(selectedChip) === -1 ? shapeNames.push(selectedChip) : shapeNames.splice(shapeNames.indexOf(selectedChip), 1);
                shapeIDs.indexOf(boxId) === -1 ? shapeIDs.push(boxId) : shapeIDs.splice(shapeIDs.indexOf(boxId), 1);
                break;
            }
        }


        specChipsValue = "<div class =\"chipsStyle\">";
        for (i = 0; i < specNames.length; i++) {
            var sChip = specNames[i].replace(/ /g, "_");
            specChipsValue += "<span class=\"filter-tag\">" + specNames[i] + "<button><img alt= " + sChip + " src=\"Themes/SwiftPortal/Content/assets/close-filled.svg\" width=\"15\" height=\"15\" onclick=removeFiltered()></button></span>";
        }
        specChipsValue += "</div>";
        document.getElementById("specs").innerHTML = specChipsValue;

        shapeChipsValue = "<div class =\"chipsStyle\">";
        for (i = 0; i < shapeNames.length; i++) {
            var sChip = shapeNames[i].replace(/ /g, "_");
            shapeChipsValue += "<span class=\"filter-tag\">" + shapeNames[i] + "<button><img alt= " + sChip + " src=\"Themes/SwiftPortal/Content/assets/close-filled.svg\" width=\"15\" height=\"15\" onclick=removeFiltered()></button></span>";
        }
        shapeChipsValue += "</div>";
        document.getElementById("shapes").innerHTML = shapeChipsValue;

        let searchKeyword = getUrlParameter('q');
        console.log("getUrlParameter: ", searchKeyword);

        if (specNames.length > 0 || shapeNames.length > 0 || searchKeyword.length > 0) {
            allFilterValue = "<div class=\"chipsStyle\">Clear filters</div>";
        }
        document.getElementById("clearAllFilters").innerHTML = allFilterValue;


        var filterParams = { SpecIds: specIDs, ShapeIds: shapeIDs, SearchKeyword: searchKeyword };
        console.log('filterParams', filterParams);
        $.ajax({
           url: "@Url.Action("FilteredProductsResult", "CatalogOverride")",
          type: 'POST',
          contentType: 'application/json; charset=utf-8',
          data: JSON.stringify(filterParams),
          success: function (data, textStatus, XMLHttpRequest) {
              if(data != null)
              {
                  $("#overlay").css("display", "none");
                  $('#partialview').html(data);
              }
          },
          error: function (xhr, ajaxOptions, thrownError) {
              console.log(thrownError, 'datadata-error', xhr);
              $('#partialview').html('an error has occured here')
              $("#overlay").css("display", "none");
          }
     });
}


    function getUrlParameter(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    };
    $(window).resize(sliderheight);
    function sliderheight() {
        divHeight = $('.catalog-page').height();
        $('.cat-side-drawer').css({ 'height': divHeight+140 });
    }
    sliderheight();
</script>
<ejs-scripts></ejs-scripts>
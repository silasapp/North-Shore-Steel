@using Nop.Core
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using NSS.Plugin.Misc.SwiftPortalOverride
@using Nop.Services.Common
@using Nop.Services.Catalog
@using Nop.Core.Domain.Catalog
@inject IWorkContext workContext
@inject IGenericAttributeService genericAttributeService
@inject IProductAttributeService productAttributeService
@using Syncfusion.EJ2

@model CatalogModel
@using Nop.Core.Domain.Orders
@using NSS.Plugin.Misc.SwiftPortalOverride.Controllers;

<style>

    .e-dlg-header-content {
        background: #03175B;
    }

        .e-dlg-header-content .e-icon-dlg-close {
            color: #FFF;
        }

        .e-dlg-header-content .dialog-header {
            color: #FFF;
            font-weight: 700;
        }

    .nss-modal-title {
        color: #03175B;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .e-radio-wrapper {
        margin-right: 1.5rem;
    }

    li {
        list-style: none;
    }

    .nss-radio {
        width: 18px;
        height: 18px;
    }

        .nss-radio:checked + .e-primary::after { /* csslint allow: adjoining-classes */
            background-color: #0076B4;
            border-color: #0076B4;
        }

        .nss-radio:checked:focus + .e-primary::after, .nss-radio:checked + .e-primary:hover::after { /* csslint allow: adjoining-classes */
            background-color: #0076B4;
            border-color: #0076B4;
        }

        .nss-radio:checked + .e-primary::before {
            border-color: #0076B4;
        }

        .nss-radio:checked:focus + .e-success::before, .e-radio:checked + .e-primary:hover::before { /* csslint allow: adjoining-classes */
            border-color: #0076B4;
        }

        .nss-radio + .e-primary:hover::before {
            border-color: #0076B4;
        }

    .nss-textarea {
        border: 1px solid grey;
        resize: none;
        font-size: 16px;
    }

        .nss-textarea::-webkit-input-placeholder {
            font-style: italic;
        }

        .nss-textarea:-moz-placeholder { /* Firefox 18- */
            font-style: italic;
        }

        .nss-textarea::-moz-placeholder { /* Firefox 19+ */
            font-style: italic;
        }

        .nss-textarea:-ms-input-placeholder {
            font-style: italic;
        }

        .nss-textarea::placeholder {
            font-style: italic;
        }

    .nss-btn-box {
        border: 0.1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        width: 42px;
        height: 42px;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

    .nss-input {
        padding: 0.5rem;
        border: 1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        height: auto !important;
        text-align: center;
        width: 90px;
        margin: 0px 0.5rem;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

        /* Chrome, Safari, Edge, Opera */
        .nss-input::-webkit-outer-spin-button,
        .nss-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Firefox */
        .nss-input[type=number] {
            -moz-appearance: textfield;
        }

    .nss-btn-default {
        border: none;
        outline: none;
        background: #ECECEC;
        color: #000;
        font-size: 16px;
        line-height: 1;
    }

        .nss-btn-default:hover {
            background: #0076B4;
            color: #FFF;
        }

    .e-footer-content {
        padding: 2rem;
    }

    .cursor-pointer {
        cursor: pointer;
    }
</style>
@{
    //prepare "Add to cart" AJAX link
    @Html.Hidden("selectedProductId", 0);
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var wishListShoppingCartId = (int)ShoppingCartType.Wishlist;
    var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, workContext.CurrentCustomer.Id);
    var headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>();
    var ERPCompanyIdExist = Context.Request.Cookies.Any(x => x.Key == compIdCookieKey);
}

@{List<object> ObjectData = new List<object>(); }




@{

    Func<object, object>
    Content1 =
    @<form id="sawOptionModal">
        <div class="d-flex flex-column">
            <div class="d-flex flex-column mt-4 mb-2">
                <label class="nss-modal-title">SAW OPTIONS</label>
                <div class="d-flex flex-row">
                    <label v-for="option in sawOptions" v-bind:for="sawOptionControlId + '_' + option.id"
                           class="mr-3 d-flex align-items-center cursor-pointer">
                        <input v-bind:id="sawOptionControlId + '_' + option.id" type="radio" class="nss-radio mr-2 cursor-pointer"
                               v-bind:value="option.id" v-model="sawOption">
                        {{ option.name }}
                    </label>
                </div>
            </div>
            <hr />
            <div class="d-flex flex-column">
                <label class="nss-modal-title">WORK ORDER INSTRUCTIONS</label>
                <textarea name="workOrderInstructionsId" rows="4" maxlength="100" class="nss-textarea" placeholder="Max 100 characters" v-model="workOrderInstructions"></textarea>
            </div>
            <hr />
            <div class="d-flex flex-row justify-content-between mb-3">
                <div class="d-flex flex-column">
                    <label class="nss-modal-title">LENGTH TOLERANCE CUT</label>
                    <div class="d-flex flex-row">
                        <button type="button" class="nss-btn-box"
                                v-on:click="decrementToleranceCut">
                            -
                        </button>
                        <input type="text" class="nss-input" v-model="lengthToleranceCut" />
                        <button type="button" class="nss-btn-box"
                                v-on:click="incrementToleranceCut">
                            +
                        </button>
                    </div>
                </div>
                <div class="d-flex flex-column">
                    <label class="nss-modal-title">ITEM QUANTITY</label>
                    <div class="d-flex flex-row">
                        <button type="button" class="nss-btn-box" v-on:click="decrementQuantity">-</button>
                        <input id="itemQuantity" type="number" class="nss-input" v-model="quantity" />
                        <button type="button" class="nss-btn-box" v-on:click="incrementQuantity">+</button>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-row-reverse mt-4">
                <button type="button" v-bind:id="'add-to-cart-button-' + productId" class="nss-btn-default px-2 py-2"
                        v-on:click="addToCart">
                    ADD TO CART
                </button>
            </div>
        </div>
    </form>;
}

@if (Model.Products != null && Model.Products.Count > 0)
{

    var shapeIds = Model.FilterParams.ShapeIds;

    if (shapeIds.Count > 0)
    {
        headerColumns = Model.Products.FirstOrDefault().Shape?.Atttributes.ToList();
    }
    else
    {
        headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>()
{
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemNo",
                DisplayName = "Item #",
                Sort = "itemNo"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemName",
                DisplayName = "Description",
                Sort = "itemName"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "weight",
                DisplayName = "Weight (lb)",
                Sort = "weight"
            }
        };

    }


    @foreach (var item in Model.Products)
    {
        var productRowData = new Dictionary<string, string>();
        var attr = genericAttributeService.GetAttributesForEntity(item.Id, nameof(Product));
        string _isSerialized = attr.FirstOrDefault(x => x.Key == "serialized")?.Value;

        var mappings = productAttributeService.GetProductAttributeMappingsByProductId(item.Id);

        var mappingIds = mappings.Select(x => x.Id).ToArray();

        var attrIds = mappings.Select(x => x.ProductAttributeId)?.ToArray();
        var attrs = productAttributeService.GetProductAttributeByIds(attrIds);
        var _productAttributes = GetJson(attrs);
        var prodAttrs = new List<SawOptionsAttribute>();


        foreach (var it in attrs)
        {
            var xMapping = mappings.FirstOrDefault(x => x.ProductAttributeId == it.Id);
            var xValues = productAttributeService.GetProductAttributeValues(xMapping.Id);
            var obj = new SawOptionsAttribute
            {
                Name = it.Name,
                Values = xValues,
                Id = xMapping.Id,
            };

            prodAttrs.Add(obj);
        }

        @foreach (var it in headerColumns)
        {
            var itemCode = it.Code;
            var Code = _isSerialized == "True" ? "itemTagNo" : "itemNo";
            itemCode = itemCode == "itemNo" ? Code : itemCode;
            productRowData.Add(it.DisplayName, item.ProductCustomAttributes.FirstOrDefault(x => x.Key == itemCode)?.Value);
        }

        productRowData.Add("_itemId", item.Id.ToString());
        productRowData.Add("_mtr", item.ProductCustomAttributes.FirstOrDefault(x => x.Key == "mtr")?.Value);
        productRowData.Add("_sawOption", item.Shape?.SawOption.ToString().ToLower());
        productRowData.Add("_cartId", shoppingCartTypeId.ToString());
        productRowData.Add("_eRPCompanyIdExist", ERPCompanyIdExist.ToString().ToLower());
        productRowData.Add("_wishListId", wishListShoppingCartId.ToString());
        productRowData.Add("_isSerialized", _isSerialized.ToString().ToLower());
        productRowData.Add("_productAttributes", GetJson(prodAttrs));
        productRowData.Add("_product", "");

        ObjectData.Add(productRowData);
    }
}


<div id="_partialview">
    <div class="control-section">
        <ejs-grid id="GridOverview" allowFiltering="true" allowSorting="true" allowPaging="true" enableHover="false" dataSource=ObjectData>
            <e-grid-filtersettings type="Menu"></e-grid-filtersettings>
            <e-grid-pagesettings pageSize="100"></e-grid-pagesettings>
            <e-grid-columns>
                @foreach (var it in headerColumns)
                {
                    if (!it.DisplayName.StartsWith("_"))
                    {
                        @if ((it.DisplayName).Contains("Description"))
                        {
                            <e-grid-column field=@it.DisplayName filter="@(new { type="CheckBox"})" headerText=@it.DisplayName width="160"></e-grid-column>
                        }
                        else if ((it.DisplayName).Contains("Item"))
                        {
                            <e-grid-column field=@it.DisplayName filter="@(new { type="CheckBox"})" headerText=@it.DisplayName width="110"></e-grid-column>
                        }
                        else if ((it.DisplayName).Contains("Weight"))
                        {
                            <e-grid-column field=@it.DisplayName filter="@(new { type="CheckBox"})" headerText=@it.DisplayName width="130"></e-grid-column>
                        }
                        else
                        {
                            <e-grid-column field=@it.DisplayName filter="@(new { type="CheckBox"})" headerText=@it.DisplayName width="120"></e-grid-column>
                        }
                    }
                }
                <e-grid-column field="Quantity" headerText="Quantity" allowFiltering="false" allowSorting="false" template="#quantityTemplate" width="90"></e-grid-column>
                <e-grid-column field="Options" headerText="Actions" allowFiltering="false" allowSorting="false" template="#optionsTemplate" width="110"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>

        @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onDialogCreated").Header("<span class='dialog-header'>SAW OPTIONS FOR PRODUCT</span>").ContentTemplate(
@Content1).ShowCloseIcon(true).Visible(false).Width("650px").Target("body").Render()

    </div>
</div>


<script id="quantityTemplate" type="text/x-template">
    ${if(_isSerialized == "true")}
    <label style="width: 40px" for="">1</label>
    ${else}
    <input type="number" min="1" name="quantity" style="width: 40px" id="qty${_itemId}" oninput="this.value = !!this.value && Math.abs(this.value)>= 0 ? Math.abs(this.value) : null">
    ${/if}
</script>

<script id="optionsTemplate" type="text/x-template">
     ${if(_mtr)}
     <a class="table-action-button" style="text-decoration:none" href="${_mtr}" target="_blank">
         <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon" width="20" height="20" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24" style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);">
     <title>invoice</title>
     <path d="M13 16H7a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2zm-4-6h2a1 1 0 0 0 0-2H9a1 1 0 0 0 0 2zm12 2h-3V3a1 1 0 0 0-.5-.87a1 1 0 0 0-1 0l-3 1.72l-3-1.72a1 1 0 0 0-1 0l-3 1.72l-3-1.72a1 1 0 0 0-1 0A1 1 0 0 0 2 3v16a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3v-6a1 1 0 0 0-1-1zM5 20a1 1 0 0 1-1-1V4.73l2 1.14a1.08 1.08 0 0 0 1 0l3-1.72l3 1.72a1.08 1.08 0 0 0 1 0l2-1.14V19a3 3 0 0 0 .18 1zm15-1a1 1 0 0 1-2 0v-5h2zm-7-7H7a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2z"/><rect x="0" y="0" width="24" height="24" fill="rgba(0, 0, 0, 0)" /></svg>
     </a>
     ${/if}

     ${if(_sawOption == "true")}
     <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon"  onclick="handleSawOption(`${_itemId}`, `${_productAttributes}`, `${_product}`); return false;" width="20" height="20" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24" style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);">
     <title>saw options</title>
    <path d="M20 15s-1.4 1.3 1.1 2l-2.8 2.8h-2.8s-1.9-.1-.5 2.2h-4l-2-2s-1.3-1.4-2 1.1l-2.8-2.8v-2.8s.1-1.9-2.2-.5v-4l2-2s1.4-1.3-1.2-1.9l2.8-2.9h2.9s1.9.1.5-2.2h4l2 2s1.3 1.4 2-1.2l2.8 2.8v2.9s-.1 1.9 2.2.5v4l-2 2m-6-3a2 2 0 0 0-2-2a2 2 0 0 0-2 2a2 2 0 0 0 2 2a2 2 0 0 0 2-2z" /><rect x="0" y="0" width="24" height="24" fill="rgba(0, 0, 0, 0)" /></svg>

     ${/if}
     ${if(_eRPCompanyIdExist == "true")}
     <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon" onclick="getInputQuantity(`${_itemId}`, `${_cartId}`);return false;" width="20" height="20" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24" style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);">
     <title>add to cart</title>
    <path d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2s-.9-2-2-2zM1 2v2h2l3.6 7.59l-1.35 2.45c-.16.28-.25.61-.25.96c0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12l.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49A1.003 1.003 0 0 0 20 4H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2s2-.9 2-2s-.9-2-2-2z"/><rect x="0" y="0" width="24" height="24" fill="rgba(0, 0, 0, 0)" /></svg>

     ${/if}
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon" onclick="getInputQuantity(`${_itemId}`, `${_wishListId}`);return false;" aria-hidden="true" focusable="false" width="20" height="20" style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);" preserveAspectRatio="xMidYMid meet" viewBox="0 0 1024 1024">
     <title>add to wishlist</title>
    <path d="M923 283.6a260.04 260.04 0 0 0-56.9-82.8a264.4 264.4 0 0 0-84-55.5A265.34 265.34 0 0 0 679.7 125c-49.3 0-97.4 13.5-139.2 39c-10 6.1-19.5 12.8-28.5 20.1c-9-7.3-18.5-14-28.5-20.1c-41.8-25.5-89.9-39-139.2-39c-35.5 0-69.9 6.8-102.4 20.3c-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 0 0-56.9 82.8c-13.9 32.3-21 66.6-21 101.9c0 33.3 6.8 68 20.3 103.3c11.3 29.5 27.5 60.1 48.2 91c32.8 48.9 77.9 99.9 133.9 151.6c92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3c56-51.7 101.1-102.7 133.9-151.6c20.7-30.9 37-61.5 48.2-91c13.5-35.3 20.3-70 20.3-103.3c.1-35.3-7-69.6-20.9-101.9z" /></svg>

</script>

<script>

    var modalVm = new Vue({
        el: '#sawOptionModal',
        data: {
            sawOptionControlId: null,
            sawOptions: [],
            sawOption: null,
            workOrderInstructions: null,
            workOrderInstructionsId: null,
            lengthToleranceCut: null,
            lengthToleranceCutControlId: null,
            quantity: 0,
            quantityId: 0,
            productId: null,
        },
        mounted: function () {

        },
        methods: {
            addToCart: function () {
                let request = {
                    [this.sawOptionControlId]: this.sawOption,
                    [this.workOrderInstructionsId]: this.workOrderInstructions,
                    [this.lengthToleranceCutControlId]: this.lengthToleranceCut,
                    [`addtocart_${this.productId}.EnteredQuantity`]: this.quantity,
                };
                sawOptionModal.hide();
                AjaxCart.setLoadWaiting(true);
                $.ajax({
                    cache: false,
                    url: `/addproducttocart/details/${this.productId}/@Html.Raw((int)ShoppingCartType.ShoppingCart)`,
                    type: 'POST',
                    data: request,
                    success: function (data, textStatus, XMLHttpRequest) {
                        AjaxCart.setLoadWaiting(false);
                        if (data != null) {
                            AjaxCart.success_process(data);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        AjaxCart.setLoadWaiting(false);
                        console.log(thrownError, 'addToCart datadata-error', xhr);
                    }
                });
            },

            incrementToleranceCut: function () {
                this.lengthToleranceCut = Number(this.lengthToleranceCut) + 1;
            },
            decrementToleranceCut: function () {
                this.lengthToleranceCut = this.lengthToleranceCut > 0 ? Number(this.lengthToleranceCut) - 1 : 0;
            },

            incrementQuantity: function () {
                this.quantity = Number(this.quantity) + 1;
            },
            decrementQuantity: function () {
                this.quantity = this.quantity > 1 ? Number(this.quantity) - 1 : 1;
            },
        },
    });

        function getInputQuantity(itemId, cartId) {
            event.preventDefault();
            let qty = $('#qty' + itemId).val();
            if (!qty)
                qty = 1;
            let link = `/CartOverride/CustomAddProductToCart_Catalog?productId=${itemId}&shoppingCartTypeId=${cartId}&quantity=${qty}`
            $('#qty' + itemId).val("");
            AjaxCart.addproducttocart_catalog(link);
        }

        var sawOptionModal, toleranceLength;
        let itemQuantity = document.getElementById('itemQuantity');
        function onDialogCreated() {
            sawOptionModal = this;
        }

    function handleSawOption(productId, attributes) {
        const at = JSON.parse(attributes);
        console.log("handleSawOption: ", at);
        let qty = $('#qty' + productId).val();
        const cutOptions = at.find(x => x.name === "Cut Options");
        const prefix = '@Html.Raw(NopCatalogDefaults.ProductAttributePrefix)';
        modalVm.quantity = qty ? qty : 1;
        modalVm.productId = productId;
        modalVm.sawOptionControlId = prefix + cutOptions.id;
        modalVm.sawOptions = cutOptions.values;
        modalVm.sawOption = cutOptions.values.find(x => x.isPreSelected).id;
        modalVm.workOrderInstructions = null;
        modalVm.workOrderInstructionsId = prefix + at.find(x => x.name === "Work Order Instructions").id;
        modalVm.lengthToleranceCutControlId = prefix + at.find(x => x.name === "Length Tolerance Cut").id;
        modalVm.lengthToleranceCut = 0;
            sawOptionModal.show();
        }

        function onSawOptionModalClose() {
            console.log("onSawOptionModalClose...");
        }
</script>
<ejs-scripts></ejs-scripts>

@functions {
    String GetJson(object input)
    {
        @using Newtonsoft.Json.Serialization;
        @using Newtonsoft.Json;

        var contractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() };
        return JsonConvert.SerializeObject(input, new JsonSerializerSettings
        {
            ContractResolver = contractResolver,
            Formatting = Formatting.None
        });
    }
}

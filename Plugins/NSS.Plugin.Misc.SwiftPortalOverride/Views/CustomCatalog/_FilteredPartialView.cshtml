@using Nop.Core
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using NSS.Plugin.Misc.SwiftPortalOverride
@using Nop.Services.Common
@using Nop.Core.Domain.Catalog
@inject IWorkContext workContext
@inject IGenericAttributeService genericAttributeService
@using Syncfusion.EJ2

@model CatalogModel
@using Nop.Core.Domain.Orders

<style>
    div.e-content {
        height: 20rem !important;
    }

    .e-dlg-header-content {
        background: #03175B;
    }

        .e-dlg-header-content .e-icon-dlg-close {
            color: #FFF;
        }

        .e-dlg-header-content .dialog-header {
            color: #FFF;
            font-weight: 700;
        }

    .nss-modal-title {
        color: #03175B;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .e-radio-wrapper {
        margin-right: 1.5rem;
    }

    li {
        list-style: none;
    }

    .e-radio-wrapper .e-label {
        font-size: 14px;
    }

    .e-radio:checked + .e-primary::after { /* csslint allow: adjoining-classes */
        background-color: #0076B4;
        border-color: #0076B4;
    }

    .e-radio:checked:focus + .e-primary::after, .e-radio:checked + .e-primary:hover::after { /* csslint allow: adjoining-classes */
        background-color: #0076B4;
        border-color: #0076B4;
    }

    .e-radio:checked + .e-primary::before {
        border-color: #0076B4;
    }

    .e-radio:checked:focus + .e-success::before, .e-radio:checked + .e-primary:hover::before { /* csslint allow: adjoining-classes */
        border-color: #0076B4;
    }

    .e-radio + .e-primary:hover::before {
        border-color: #0076B4;
    }

    .nss-textarea {
        border: 1px solid grey;
        resize: none;
        font-size: 16px;
    }

        .nss-textarea::-webkit-input-placeholder {
            font-style: italic;
        }

        .nss-textarea:-moz-placeholder { /* Firefox 18- */
            font-style: italic;
        }

        .nss-textarea::-moz-placeholder { /* Firefox 19+ */
            font-style: italic;
        }

        .nss-textarea:-ms-input-placeholder {
            font-style: italic;
        }

        .nss-textarea::placeholder {
            font-style: italic;
        }

    .nss-btn-box {
        border: 0.1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        width: 45px;
        height: 45px;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

    .nss-input {
        padding: 0.5rem;
        border: 1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        height: auto !important;
        text-align: center;
        width: 90px;
        margin: 0px 0.5rem;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

        /* Chrome, Safari, Edge, Opera */
        .nss-input::-webkit-outer-spin-button,
        .nss-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Firefox */
        .nss-input[type=number] {
            -moz-appearance: textfield;
        }

    .nss-btn-default {
        border: none;
        outline: none;
        background: none;
        color: #000;
        font-size: 16px;
        line-height: 1;
    }

        .nss-btn-default:hover {
            background: #0076B4;
            color: #FFF;
        }

    .e-footer-content {
        padding: 2rem;
    }
</style>
@{
    //prepare "Add to cart" AJAX link
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var wishListShoppingCartId = (int)ShoppingCartType.Wishlist;
    var quantity = 1;
    int customerId = workContext.CurrentCustomer.Id;
    string ERPComId = SwiftPortalOverrideDefaults.ERPCompanyId;
    ERPComId += customerId;
    var headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>();
    var ERPCompanyIdExist = Context.Request.Cookies.Any(x => x.Key == ERPComId);
}

@{List<object> ObjectData = new List<object>(); }



@{
    Func<object, object> headerContent = @<div><div id='template' title='Saw Option Dialog' class=''>Saw Option</div></div>;

Func<object, object> Content1 =
@<form id="sawOptionForm" onsubmit="">
    <div class="d-flex flex-column">
        <div class="d-flex flex-column mt-4 mb-2">
            <label class="nss-modal-title">SAW OPTIONS</label>

            <div class="d-flex flex-row">
                @Html.EJS().RadioButton("so-1").Label("Saw in half").CssClass("e-primary").Name("default").Render()
                @Html.EJS().RadioButton("so-2").Label("Saw in thirds").CssClass("e-primary").Name("default").Render()
                @Html.EJS().RadioButton("so-3").Label("Saw in quarters").CssClass("e-primary").Name("default").Render()
                @Html.EJS().RadioButton("so-4").Label("Other").CssClass("e-primary").Name("default").Render()
            </div>
        </div>
        <hr />
        <div class="d-flex flex-column">
            <label class="nss-modal-title">WORK ORDER INSTRUCTIONS</label>
            <textarea rows="4" class="nss-textarea" placeholder="Max 100 characters"></textarea>
        </div>
        <hr />
        <div class="d-flex flex-row justify-content-between mb-3">
            <div class="d-flex flex-column">
                <label class="nss-modal-title">LENGTH TOLERANCE CUT</label>
                <div class="d-flex flex-row">
                    <button type="button" class="nss-btn-box">-</button>
                    <input type="text" class="nss-input" />
                    <button type="button" class="nss-btn-box">+</button>
                </div>
            </div>
            <div class="d-flex flex-column">
                <label class="nss-modal-title">ITEM QUANTITY</label>
                <div class="d-flex flex-row">
                    <button type="button" class="nss-btn-box" onclick="onDecrementQuantity()">-</button>
                    <input id="itemQuantity" type="number" class="nss-input" />
                    <button type="button" class="nss-btn-box" onclick="onIncrementQuantity()">+</button>
                </div>
            </div>
        </div>
    </div>
</form>;

Func<object, object> footerContent = @<div>@Html.EJS().Button("primarybtn").Content("ADD TO CART").Render()</div>;
}

@if (Model.Products != null && Model.Products.Count > 0)
{
    if (Model.FilterParams.ShapeIds.Count > 0)
    {
        headerColumns = Model.Products.FirstOrDefault().Shape?.Atttributes.ToList();
    }
    else
    {
        headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>()
{
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemNo",
                DisplayName = "Item #"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemName",
                DisplayName = "Description"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "displayHeight",
                DisplayName = "Height (in)"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "displayLength",
                DisplayName = "Length (ft)"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "weight",
                DisplayName = "Weight (lb)"
            }
        };

    }

    @foreach (var item in Model.Products)
    {
        //string serialized = item.FirstOrDefault(x => x.Key == "serialized")?.Value;
        var productRowData = new Dictionary<string, string>();
        var attr = genericAttributeService.GetAttributesForEntity(item.Id, nameof(Product));
        string serialized = attr.FirstOrDefault(x => x.Key == "serialized")?.Value;

        @foreach (var it in headerColumns)
        {
            var itemCode = it.Code;
            var Code = serialized == "True" ? "itemTagNo" : "itemNo";
            itemCode = itemCode == "itemNo" ? Code : itemCode;
            productRowData.Add(it.DisplayName, item.ProductCustomAttributes.FirstOrDefault(x => x.Key == itemCode)?.Value);
        }

        productRowData.Add("_itemId", item.Id.ToString());
        productRowData.Add("_mtr", item.ProductCustomAttributes.FirstOrDefault(x => x.Key == "mtr")?.Value);
        productRowData.Add("_sawOption", item.Shape?.SawOption.ToString());
        productRowData.Add("_cartId", shoppingCartTypeId.ToString());
        productRowData.Add("_eRPCompanyIdExist", ERPCompanyIdExist.ToString());
        productRowData.Add("_wishListId", wishListShoppingCartId.ToString());

        ObjectData.Add(productRowData);
    }


    <div id="_partialview">
        <div class="control-section">
            <ejs-grid id="GridOverview" allowFiltering="true" allowSorting="true" allowPaging="true" allowResizing="true" rowHeight="38" enableHover="false" dataSource=ObjectData>
                <e-grid-filtersettings type="Menu"></e-grid-filtersettings>
                <e-grid-pagesettings pageSize="100"></e-grid-pagesettings>
                <e-grid-columns>
                    @foreach (var it in headerColumns)
                    {
                        if (!it.DisplayName.StartsWith("_"))
                        {
                            <e-grid-column field=@it.DisplayName filter="@(new { type="CheckBox"})" headerText=@it.DisplayName width="150"></e-grid-column>
                        }
                    }
                    <e-grid-column field="Quantity" headerText="Qty" allowFiltering="false" allowSorting="false" template="#quantityTemplate" width="82"></e-grid-column>
                    <e-grid-column field="Options" headerText="" allowFiltering="false" allowSorting="false" template="#optionsTemplate" width="130"></e-grid-column>

                </e-grid-columns>
            </ejs-grid>

            @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onDialogCreated").Header("<span class='dialog-header'>SAW OPTIONS FOR PRODUCT</span>").ContentTemplate(
           @Content1).FooterTemplate("<button type='submit' class='nss-btn-default px-2 py-2'>ADD TO CART</button>").ShowCloseIcon(true).Visible(false).Width("650px").Target("body").Render()

        </div>
    </div>

}


<script id="quantityTemplate" type="text/x-template">
    <input type="number" min="1" name="quantity" style="width: 40px" id="qty${_itemId}" oninput="this.value = !!this.value && Math.abs(this.value)>= 0 ? Math.abs(this.value) : null">
</script>

<script id="optionsTemplate" type="text/x-template">
    ${if(_mtr)}
    <a class="table-action-button" style="text-decoration:none" href="${_mtr}" target="_blank">
        <img src="Themes/SwiftPortal/Content/assets/invoice.svg" width="20" height="20" alt="">
    </a>
    ${/if}

    ${if(_sawOption == "True")}
    <button class="table-action-button" onclick="handleSawOption(`${_itemId}`); return false;">
        <img src="Themes/SwiftPortal/Content/assets/saw-blade.svg" width="20" height="20" alt="">
    </button>
    ${/if}
    ${if(_eRPCompanyIdExist == "True")}
    <button class="table-action-button" onclick="getInputQuantity(`${_itemId}`, `${_cartId}`);return false;">
        <img src="Themes/SwiftPortal/Content/assets/shopping-cart.svg" width="20" height="20" alt="">
    </button>
    ${/if}
    <button class="table-action-button" onclick="getInputQuantity(`${_itemId}`, `${_wishListId}`);return false;">
        <img src="Themes/SwiftPortal/Content/assets/heart.svg" width="20" height="20" alt="">
    </button>
</script>

<script>
    function getInputQuantity(itemId, cartId) {
        event.preventDefault();
        let qty = $('#qty' + itemId).val();
        if (!qty)
            qty = 1;
        let link = `/CartOverride/CustomAddProductToCart_Catalog?productId=${itemId}&shoppingCartTypeId=${cartId}&quantity=${qty}`
        $('#qty' + itemId).val("");
        AjaxCart.addproducttocart_catalog(link);
    }

    var sawOptionModal, toleranceLength;
    let itemQuantity = document.getElementById('itemQuantity');
    function onDialogCreated() {
        sawOptionModal = this;
    }

    function handleSawOption(itemId) {
        //event.preventDefault();

        itemQuantity.value = 1;
        console.log("handleSawOption: ", itemId);
        sawOptionModal.show();
    }

    function onSawOptionModalClose() {
        console.log("onSawOptionModalClose...");
    }

    function onDecrementQuantity() {
        console.log("onDecrementQuantity...");
        var value = parseInt(itemQuantity.value) ?? 0;

        console.log("onDecrementQuantity...");
        itemQuantity.value = value > 0 ? value - 1 : 0;
    }

    function onIncrementQuantity() {
        console.log("onIncrementQuantity...");
        var value = parseInt(itemQuantity.value) ?? 0;
        itemQuantity.value = value ? value + 1 : 1;
    }
</script>
<ejs-scripts></ejs-scripts>

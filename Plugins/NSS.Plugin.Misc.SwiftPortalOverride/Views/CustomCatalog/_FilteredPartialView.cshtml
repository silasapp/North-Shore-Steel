@using Nop.Core
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using NSS.Plugin.Misc.SwiftPortalOverride
@using Nop.Services.Common
@using Nop.Services.Catalog
@using Nop.Core.Domain.Catalog
@inject IWorkContext workContext
@inject IGenericAttributeService genericAttributeService
@inject IProductAttributeService productAttributeService
@using Syncfusion.EJ2

@model CatalogModel
@using Nop.Core.Domain.Orders
@using NSS.Plugin.Misc.SwiftPortalOverride.Controllers;

<style>

    .e-dlg-header-content {
        background: #03175B;
    }

        .e-dlg-header-content .e-icon-dlg-close {
            color: #FFF;
        }

    .nss-modal-title {
        color: #03175B;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .e-radio-wrapper {
        margin-right: 1.5rem;
    }

    li {
        list-style: none;
    }

    .nss-radio {
        width: 18px;
        height: 18px;
    }

        .nss-radio:checked + .e-primary::after { /* csslint allow: adjoining-classes */
            background-color: #0076B4;
            border-color: #0076B4;
        }

        .nss-radio:checked:focus + .e-primary::after, .nss-radio:checked + .e-primary:hover::after { /* csslint allow: adjoining-classes */
            background-color: #0076B4;
            border-color: #0076B4;
        }

        .nss-radio:checked + .e-primary::before {
            border-color: #0076B4;
        }

        .nss-radio:checked:focus + .e-success::before, .e-radio:checked + .e-primary:hover::before { /* csslint allow: adjoining-classes */
            border-color: #0076B4;
        }

        .nss-radio + .e-primary:hover::before {
            border-color: #0076B4;
        }

    .nss-textarea {
        border: 1px solid grey;
        resize: none;
        font-size: 16px;
    }

        .nss-textarea::-webkit-input-placeholder {
            font-style: italic;
        }

        .nss-textarea:-moz-placeholder { /* Firefox 18- */
            font-style: italic;
        }

        .nss-textarea::-moz-placeholder { /* Firefox 19+ */
            font-style: italic;
        }

        .nss-textarea:-ms-input-placeholder {
            font-style: italic;
        }

        .nss-textarea::placeholder {
            font-style: italic;
        }

    .nss-btn-box {
        border: 0.1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        width: 42px;
        height: 42px;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

    .nss-input {
        padding: 0.5rem;
        border: 1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        height: auto !important;
        text-align: center;
        width: 90px;
        margin: 0px 0.5rem;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

        /* Chrome, Safari, Edge, Opera */
        .nss-input::-webkit-outer-spin-button,
        .nss-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Firefox */
        .nss-input[type=number] {
            -moz-appearance: textfield;
        }

    .nss-btn-default {
        border: none;
        outline: none;
        background: #ECECEC;
        color: #000;
        font-size: 16px;
        line-height: 1;
    }

        .nss-btn-default:hover {
            background: #0076B4;
            color: #FFF;
        }

    .e-footer-content {
        padding: 2rem;
    }

    .cursor-pointer {
        cursor: pointer;
    }
</style>
@{
    //prepare "Add to cart" AJAX link
    @Html.Hidden("selectedProductId", 0);
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var wishListShoppingCartId = (int)ShoppingCartType.Wishlist;
    var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, workContext.CurrentCustomer.Id);
    var headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>();
    var ERPCompanyIdExist = Context.Request.Cookies.Any(x => x.Key == compIdCookieKey);
}

@{List<object> ObjectData = new List<object>(); }

@if (Model.Products != null && Model.Products.Count > 0)
{

    var shapeIds = Model.FilterParams.ShapeIds;

    if (shapeIds.Count > 0)
    {
        headerColumns = Model.Products.FirstOrDefault().Shape?.Atttributes.ToList();
    }
    else
    {
        headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>()
{
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemNo",
                DisplayName = "Item #",
                Sort = "itemNo"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemName",
                DisplayName = "Description",
                Sort = "itemName"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "weight",
                DisplayName = "Weight (lb)",
                Sort = "weight"
            }
        };
    }


    @foreach (var item in Model.Products)
    {
        var productRowData = new Dictionary<string, object>();
        var attr = genericAttributeService.GetAttributesForEntity(item.Id, nameof(Product));
        string _isSerialized = attr.FirstOrDefault(x => x.Key == "serialized")?.Value;

        var mappings = productAttributeService.GetProductAttributeMappingsByProductId(item.Id);

        var mappingIds = mappings.Select(x => x.Id).ToArray();

        var attrIds = mappings.Select(x => x.ProductAttributeId)?.ToArray();
        var attrs = productAttributeService.GetProductAttributeByIds(attrIds);
        var _productAttributes = Serialize(attrs);
        var prodAttrs = new List<SawOptionsAttribute>();


        foreach (var it in attrs)
        {
            var xMapping = mappings.FirstOrDefault(x => x.ProductAttributeId == it.Id);
            var xValues = productAttributeService.GetProductAttributeValues(xMapping.Id);
            var obj = new SawOptionsAttribute
            {
                Name = it.Name,
                Values = xValues,
                Id = xMapping.Id,
            };

            prodAttrs.Add(obj);
        }

        @foreach (var it in headerColumns)
        {
            var itemCode = it.Code;
            var Code = _isSerialized == "True" ? "itemTagNo" : "itemNo";
            itemCode = itemCode == "itemNo" ? Code : itemCode;
            productRowData.Add(it.Code.ToLower(), item.ProductCustomAttributes.FirstOrDefault(x => x.Key == itemCode)?.Value);
            @Html.Raw(buildGridScript(it.DisplayName, it.Code));
            if (it.Code != it.Sort)
            {
                double value = 0;
                double.TryParse((item.ProductCustomAttributes.FirstOrDefault(x => x.Key == it.Sort)?.Value), out value);
                productRowData.Add($"{it.Sort.ToLower()}", value);

                var script = buildDisplayScript(it.Code);
                @Html.Raw(script);
            }
        }

        productRowData.Add("_itemId", item.Id.ToString());
        productRowData.Add("_mtr", item.ProductCustomAttributes.FirstOrDefault(x => x.Key == "mtr")?.Value);
        productRowData.Add("_sawOption", item.Shape?.SawOption.ToString().ToLower());
        productRowData.Add("_cartId", shoppingCartTypeId.ToString());
        productRowData.Add("_eRPCompanyIdExist", ERPCompanyIdExist.ToString().ToLower());
        productRowData.Add("_wishListId", wishListShoppingCartId.ToString());
        productRowData.Add("_isSerialized", _isSerialized.ToString().ToLower());
        productRowData.Add("_productAttributes", Serialize(prodAttrs));
        productRowData.Add("_productName", item.Name);

        ObjectData.Add(productRowData);
    }
}


<div id="_partialview">
    <div class="control-section">
        <div id="Grid"></div>
    </div>
</div>

@functions{
    @using Newtonsoft.Json.Serialization;
    @using Newtonsoft.Json;

    string Serialize(object input)
    {
        return JsonConvert.SerializeObject(input, new JsonSerializerSettings
        {
            ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() },
            Formatting = Formatting.None
        });
    }

    string buildDisplayScript(string columnName) => $@"<script id='{columnName.ToLower()}Template' type='text/x-template'>
    <label class='{(isDefaultColumn(columnName) ? "non-default-column" : "")}>${{{ columnName.ToLower() }}}</label></script>";

    string buildGridScript(string title, string columnName) => $@"<script id='{columnName.ToLower()}Template' type='text/x-template'>
    <div class='{(!isDefaultColumn(columnName) ? "non-default-column" : "")}'><label class='mv-title'>{ title }:</label><label>${{{ columnName.ToLower() }}}</label></div></script>";

    bool isDefaultColumn(string columnName) => columnName.ToLower() == "itemno" || columnName.ToLower() == "itemname" || columnName.ToLower() == "itemtagno";
}

<script>
    gridData = @Html.Raw(Serialize(ObjectData));
    gridColumns = @Html.Raw(Serialize(headerColumns));
    shopVm.buildSortOptions(gridColumns);

    console.log("gridData: ", gridData);
    console.log("gridColumns: ", gridColumns);

    var gridVm = new Vue({
        el: '_partialview',
        data: {
            grid: null,
            gridData,
        },
        mounted: function() {
            this.buildGrid();
        },
        methods: {
            getGridColumns: function () {
                let retVal = [];
                gridColumns.forEach(col => {
                    if (col.displayName[0] === "_") return;
                    let column;
                    if (col.code !== col.sort)
                        column = {
                            field: `${col.sort.toLowerCase()}`, headerText: col.displayName,
                            template: `#${col.code.toLowerCase()}Template`, width: 120,
                        };
                     else
                        column = {
                            field: col.code.toLowerCase(), headerText: col.displayName,
                            template: `#${col.code.toLowerCase()}Template`,
                            width: col.displayName.includes("Description") ? 230 : 150,
                        };

                    retVal = [...retVal, column];
                });
                return retVal;
            },
            buildGrid: function () {
                const gridColumns = this.getGridColumns();
                this.grid = new ej.grids.Grid({
                    dataSource: gridData,
                    allowPaging: true,
                    allowSorting: true,
                    allowFiltering: true,
                    filterSettings: { type: 'CheckBox' },
                    enableHover: false,
                    rowHeight: 38,
                    enableResponsiveRow: true,
                    isResponsive: true,
                    columns: [
                        ...gridColumns,
                        { headerText: 'Quantity', width: 120, template: '#quantityTemplate' },
                        { headerText: 'Actions', width: 130, template: '#optionsTemplate' },
                    ],
                    pageSettings: { pageSize: 100 },
                });
                this.grid.appendTo('#Grid');
            },
        },
    });
</script>

<script>
    function getInputQuantity(itemId, cartId) {
        event.preventDefault();
        let qty = $('#qty' + itemId).val();
        if (!qty)
            qty = 1;
        let link = `/CartOverride/CustomAddProductToCart_Catalog?productId=${itemId}&shoppingCartTypeId=${cartId}&quantity=${qty}`
        $('#qty' + itemId).val("");
        AjaxCart.addproducttocart_catalog(link);
    }

    function handleSawOption(productId, attributes, product) {
        modalVm.handleSawOption(productId, attributes, product);
    }
</script>

<script id="quantityTemplate" type="text/x-template">
    ${if(_isSerialized == "true")}
    <label style="width: 40px" for="">1</label>
    ${else}
    <input type="number" min="1" name="quantity" style="width: 40px" id="qty${_itemId}" placeholder="Qty"
           oninput="this.value = !!this.value && Math.abs(this.value) >= 0 ? Math.abs(this.value) : null">
    ${/if}
</script>
<script id="optionsTemplate" type="text/x-template">
    ${if(_mtr)}
    <a class="table-action-button" style="text-decoration:none" href="${_mtr}" target="_blank">
        <img src="Themes/SwiftPortal/Content/assets/invoice.svg" title="mtr report" width="20" height="20" alt="">
    </a>
    ${/if}

    ${if(_sawOption == "true")}
    <img src="Themes/SwiftPortal/Content/assets/saw-blade.svg" class="icon-btn" width="20" height="20" alt="" title="saw options"
         onclick="handleSawOption(`${_itemId}`, `${_productAttributes}`, `${_productName}`); return false;">
    ${/if}

    ${if(_eRPCompanyIdExist == "true")}
    <img src="Themes/SwiftPortal/Content/assets/shopping-cart.svg" class="icon-btn" onclick="getInputQuantity(`${_itemId}`, `${_cartId}`);return false;" title="add to cart" width="20" height="20" alt="">
    ${/if}

    <img src="Themes/SwiftPortal/Content/assets/c-heart.svg" class="icon-btn" onclick="getInputQuantity(`${_itemId}`, `${_wishListId}`);return false;" title="add to wishlist" width="20" height="20" alt="">
</script>
<ejs-scripts></ejs-scripts>

@using Nop.Core
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using NSS.Plugin.Misc.SwiftPortalOverride
@using Nop.Services.Common
@using Nop.Services.Catalog
@using Nop.Core.Domain.Catalog
@inject IWorkContext workContext
@inject IGenericAttributeService genericAttributeService
@inject IProductAttributeService productAttributeService
@using Syncfusion.EJ2

@model CatalogModel
@using Nop.Core.Domain.Orders
@using NSS.Plugin.Misc.SwiftPortalOverride.Controllers;

<style>

    .e-dlg-header-content {
        background: #123250;
    }

        .e-dlg-header-content .e-icon-dlg-close {
            color: #FFF;
        }

    .e-dlg-header {
        color: #fff !important;
    }

    .nss-modal-title {
        color: #03175B;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .e-radio-wrapper {
        margin-right: 1.5rem;
    }

    li {
        list-style: none;
    }

    .nss-radio {
        width: 18px;
        height: 18px;
    }

        .nss-radio:checked + .e-primary::after { /* csslint allow: adjoining-classes */
            background-color: #0076B4;
            border-color: #0076B4;
        }

        .nss-radio:checked:focus + .e-primary::after, .nss-radio:checked + .e-primary:hover::after { /* csslint allow: adjoining-classes */
            background-color: #0076B4;
            border-color: #0076B4;
        }

        .nss-radio:checked + .e-primary::before {
            border-color: #0076B4;
        }

        .nss-radio:checked:focus + .e-success::before, .e-radio:checked + .e-primary:hover::before { /* csslint allow: adjoining-classes */
            border-color: #0076B4;
        }

        .nss-radio + .e-primary:hover::before {
            border-color: #0076B4;
        }

    .nss-textarea {
        border: 1px solid grey;
        resize: none;
        font-size: 16px;
    }

        .nss-textarea::-webkit-input-placeholder {
            font-style: italic;
        }

        .nss-textarea:-moz-placeholder { /* Firefox 18- */
            font-style: italic;
        }

        .nss-textarea::-moz-placeholder { /* Firefox 19+ */
            font-style: italic;
        }

        .nss-textarea:-ms-input-placeholder {
            font-style: italic;
        }

        .nss-textarea::placeholder {
            font-style: italic;
        }

    .nss-btn-box {
        border: 0.1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        width: 42px;
        height: 42px;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

    .nss-input {
        padding: 0.5rem;
        border: 1px solid #ddd;
        outline: none;
        background: none;
        font-size: 16px;
        color: #000;
        height: auto !important;
        text-align: center;
        width: 90px;
        margin: 0px 0.5rem;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.1);
    }

        /* Chrome, Safari, Edge, Opera */
        .nss-input::-webkit-outer-spin-button,
        .nss-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Firefox */
        .nss-input[type=number] {
            -moz-appearance: textfield;
        }

    .nss-btn-default {
        border: none;
        outline: none;
        background: #ECECEC;
        color: #000;
        font-size: 16px;
        line-height: 1;
    }

        .nss-btn-default:hover {
            background: #0076B4;
            color: #FFF;
        }

    .e-footer-content {
        padding: 2rem;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .e-rowcell.e-templatecell {
        position: relative;
        padding-top: 10px;
    }

    .e-rowcell:last-child {
        display: flex;
        align-items: center;
        position: sticky;
        right: 0;
        background: #ffffff;
        opacity: 1 !important;
    }

    .e-grid .e-gridheader tr th:last-child {
        position: sticky;
        right: 0;
    }

    td.e-rowcell.e-templatecell {
        padding-bottom: 5px;
        padding-top: 5px;
    }
</style>
@{
    //prepare "Add to cart" AJAX link
    @Html.Hidden("selectedProductId", 0);
    var currentCustomer = workContext.CurrentCustomer;
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var wishListShoppingCartId = (int)ShoppingCartType.Wishlist;
    var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, currentCustomer.Id);
    var headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>();
    //var ERPCompanyIdExist = Convert.ToInt32(genericAttributeService.GetAttribute<string>(currentCustomer, compIdCookieKey));

}

@{List<object> ObjectData = new List<object>(); }
@{List<string> CustomScripts = new List<string>(); }

@if (Model.Products != null && Model.Products.Count > 0)
{

    var shapeIds = Model.FilterParams.ShapeIds;

    bool sawOption = Model.FilterParams.SawOption;

    if (shapeIds.Count > 0)
    {
        headerColumns = Model.ActiveShapeAttributes.ToList();
    }
    else
    {
        headerColumns = new List<NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute>()
{
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemNo",
                DisplayName = "Item #",
                Sort = "itemNo"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "itemName",
                DisplayName = "Description",
                Sort = "itemName"
            },
            new NSS.Plugin.Misc.SwiftCore.Domain.Shapes.ShapeAttribute
            {
                Code = "weight",
                DisplayName = "Weight (lb)",
                Sort = "weight"
            }
        };
    }


    @foreach (var item in Model.Products)
    {
        var productRowData = new Dictionary<string, object>();
        var attr = genericAttributeService.GetAttributesForEntity(item.Id, nameof(Product));
        string _isSerialized = attr.FirstOrDefault(x => x.Key == "serialized")?.Value;

        var mappings = productAttributeService.GetProductAttributeMappingsByProductId(item.Id);

        var mappingIds = mappings.Select(x => x.Id).ToArray();

        var attrIds = mappings.Select(x => x.ProductAttributeId)?.ToArray();
        var attrs = productAttributeService.GetProductAttributeByIds(attrIds);
        var _productAttributes = Serialize(attrs);
        var prodAttrs = new List<SawOptionsAttribute>();


        foreach (var it in attrs)
        {
            var xMapping = mappings.FirstOrDefault(x => x.ProductAttributeId == it.Id);
            var xValues = productAttributeService.GetProductAttributeValues(xMapping.Id);
            var obj = new SawOptionsAttribute
            {
                Name = it.Name,
                Values = xValues,
                Id = xMapping.Id,
            };

            prodAttrs.Add(obj);
        }

        @foreach (var it in headerColumns)
        {
            var itemCode = it.Code;
            var Code = _isSerialized == "True" ? "itemTagNo" : "itemNo";
            itemCode = itemCode == "itemNo" ? Code : itemCode;
            productRowData.Add(it.Code.ToLower(), item.ProductCustomAttributes.FirstOrDefault(x => x.Key == itemCode)?.Value);
            if (!CustomScripts.Any(x => x == it.Code))
            {
                @Html.Raw(buildColumnScript(it.Code));
                CustomScripts.Add(it.Code);
            }
            if (it.Code != it.Sort)
            {
                double value = 0;
                double.TryParse((item.ProductCustomAttributes.FirstOrDefault(x => x.Key == it.Sort)?.Value), out value);
                productRowData.Add($"{it.Sort.ToLower()}", value);
            }
        }

        productRowData.Add("_itemId", item.Id.ToString());
        productRowData.Add("_mtr", item.ProductCustomAttributes.FirstOrDefault(x => x.Key == "mtr")?.Value);
        productRowData.Add("_sawOption", sawOption);
        productRowData.Add("_cartId", shoppingCartTypeId.ToString());
        //productRowData.Add("_eRPCompanyIdExist", ERPCompanyIdExist.ToString().ToLower());
        productRowData.Add("_wishListId", wishListShoppingCartId.ToString());
        productRowData.Add("_isSerialized", _isSerialized.ToString().ToLower());
        productRowData.Add("_productAttributes", Serialize(prodAttrs));
        productRowData.Add("_productName", item.Name);

        ObjectData.Add(productRowData);
    }
}

@{

    Func<object, object>
    Content1 =
    @<div id="openMTRModal">
        <div class="">
            <ejs-pdfviewer id="pdfviewer" enableTextSearch="false" enablePrint="false" enableAnnotation="false" enableTextSelection="false" enableThumbnail="false" enableBookmark="false"></ejs-pdfviewer>
        </div>
    </div>;

}


<div id="gridView">
    <div>
        <div class="d-none d-md-block">
            <div id="Grid"></div>
        </div>
        <div class="d-md-none">
            <div class="product-sm d-flex flex-column align-items-start mb-2" v-for="data in gridData">
                <label class="fs12-primary mb-1">Item: {{ data.itemno || data.itemtagno }}</label>
                <label class="h2-primary my-2">{{ data.itemname }}</label>
                <div class="d-flex flex-row flex-wrap">
                    <label v-if="data.height" class="fs12-default mr-3 mb-1">Height(in): {{ data.height }}</label>
                    <label v-if="data.length" class="fs12-default mr-3 mb-1">Length(ft): {{ data.length }}</label>
                    <label v-if="data.weight" class="fs12-default mr-3 mb-1">Weight(lb): {{ data.weight }}</label>
                    <label v-if="data.leg1" class="fs12-default mr-3 mb-1">Leg 1: {{ data.leg1 }}</label>
                    <label v-if="data.leg2" class="fs12-default mr-3 mb-1">Leg 2: {{ data.leg2 }}</label>
                    <label v-if="data.thickness" class="fs12-default mr-3 mb-1">Thickness: {{ data.thickness }}</label>
                    <label v-if="data.width" class="fs12-default mr-3 mb-1">Width: {{ data.width }}</label>
                    <label v-if="data.weightperfoot" class="fs12-default mr-3 mb-1">Weight Per Foot: {{ data.weightperfoot }}</label>
                    <label v-if="data.pipesize" class="fs12-default mr-3 mb-1">Pipe Size: {{ data.pipesize }}</label>
                    <label v-if="data.wall" class="fs12-default mr-3 mb-1">Wall: {{ data.wall }}</label>
                    <label v-if="data.grade" class="fs12-default mr-3 mb-1">Grade: {{ data.grade }}</label>
                    <label v-if="data.dimensions" class="fs12-default mr-3 mb-1">Dimensions: {{ data.dimensions }}</label>
                    <label v-if="data.condition" class="fs12-default mr-3 mb-1">Condition: {{ data.condition }}</label>
                    <label v-if="data.countryoforigin" class="fs12-default mr-3 mb-1">Country of Origin: {{ data.countryoforigin }}</label>
                    <label v-if="data.millname" class="fs12-default mr-3 mb-1">Mill Name: {{ data.millname }}</label>
                </div>
                <div class="d-flex flex-row justify-content-between w-100 my-3">
                    <div class="d-flex flex-row align-items-center">
                        <img src="Themes/SwiftPortal/Content/assets/c-heart.svg" class="product-action-sm"
                             v-on:click="handleAddToWishList(data)" title="add to wishlist" width="24" height="24" alt="">

                        <img v-if="data._sawOption" src="Themes/SwiftPortal/Content/assets/saw-blade.svg" class="product-action-sm" width="24" height="24" alt=""
                             v-on:click="handleSawOption(data)">

                        <a v-if="data._mtr" class="table-action-button" style="text-decoration: none" v-bind:href="data._mtr" target="_blank">
                            <img class="product-action-sm" src="Themes/SwiftPortal/Content/assets/invoice.svg" title="mtr report" width="24" height="24" alt="">
                        </a>
                    </div>
                    <div class="d-flex flex-row">
                        <button type="button" class="btn-sm-step" v-on:click="handleDecrementQuantity(data._itemId)">-</button>
                        <input class="form-control-sm" type="number" min="1" name="quantity" v-bind:id="'qty' + data._itemId" value="1"
                               oninput="this.value = !!this.value && Math.abs(this.value) >= 0 ? Math.abs(this.value) : null">
                        <button type="button" class="btn-sm-step" v-on:click="handleIncrementQuantity(data._itemId)">+</button>
                    </div>
                </div>
                <button type="button" class="btn-sm-add-to-cart" v-on:click="handleAddToCart(data)">
                    <img src="Themes/SwiftPortal/Content/assets/shopping-cart.svg" class="product-action-sm" width="24" height="24" alt="">
                    Add to cart
                </button>
            </div>
        </div>
    </div>
    @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onDialogCreated").Header("MILL TEST REPORT PDF").ContentTemplate(@Content1).ShowCloseIcon(true).Visible(false).Height("45rem").Width("97rem").Target("body").Render()

</div>



@functions{
    @using Newtonsoft.Json.Serialization;
    @using Newtonsoft.Json;

    string Serialize(object input)
    {
        return JsonConvert.SerializeObject(input, new JsonSerializerSettings
        {
            ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() },
            Formatting = Formatting.None
        });
    }

    string buildColumnScript(string columnName) => $@"<script id='{columnName.ToLower()}Template' type='text/x-template'><label>${{{ columnName.ToLower() }}}</label></script>";
}

<script type="text/javascript">
    function onDialogCreated() {
        openMTRModal = this;
    }


    function openMTR(mtrFile) {
        var pdfViewer = document.getElementById('pdfviewer').ej2_instances[0];
        pdfViewer.serviceUrl = window.location.origin + '/api/PdfViewer';
        pdfViewer.load(mtrFile, null);
        openMTRModal.show();
    }
</script>

<script>
    gridData = @Html.Raw(Serialize(ObjectData));
    gridColumns = @Html.Raw(Serialize(headerColumns));
    shopVm.buildSortOptions(gridColumns);


    var gridVm = new Vue({
        el: '#gridView',
        data: {
            dataFalse: false,
            grid: null,
            gridColumns,
            gridData,
        },
        mounted: function () {
            this.buildGrid();
            this.addCommaToWeight();
        },
        methods: {
            getGridColumns: function () {
                let retVal = [];
                gridColumns.forEach(col => {
                    if (col.displayName[0] === "_") return;
                    let column;
                    if (col.code !== col.sort)
                        column = {
                            field: `${col.sort.toLowerCase()}`, headerText: col.displayName,
                            template: `#${col.code.toLowerCase()}Template`, width: 120,
                        };
                    else
                        column = {
                            field: col.code.toLowerCase(), headerText: col.displayName,
                            template: `#${col.code.toLowerCase()}Template`,
                            width: col.displayName.includes("Description") ? 230 : col.displayName.includes("Item #") ? 170 : 150,
                        };

                    retVal = [...retVal, column];
                });
                return retVal;
            },
            buildGrid: function () {
                const gridColumns = this.getGridColumns();
                this.grid = new ej.grids.Grid({
                    dataSource: gridData,
                    allowPaging: true,
                    allowSorting: true,
                    allowFiltering: true,
                    filterSettings: { type: 'CheckBox' },
                    enableHover: false,
                    rowHeight: 38,
                    enableResponsiveRow: true,
                    isResponsive: true,
                    columns: [
                        ...gridColumns,
                        { headerText: 'Qty.', width: 120, textAlign: 'Center', template: '#quantityTemplate' },
                        { headerText: 'Actions', width: 250, template: '#optionsTemplate', tooltip: "#columnTip" },
                    ],
                    pageSettings: { pageSize: 100 },
                    queryCellInfo: this.handleTooltipping,
                });
                this.grid.appendTo('#Grid');
            },
            addCommaToWeight: function () {
                gridData.map(g => g.weight = g.weight?.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
            },
            handleTooltipping: function (args) {
            },
            handleDecrementQuantity: function (itemId) {
                const quantityEl = $('#qty' + itemId);
                const quantity = Number(quantityEl.val());
                quantityEl.val(quantity && quantity - 1 > 1 ? quantity - 1 : 1);
            },

            handleIncrementQuantity: function (itemId) {
                const quantityEl = $('#qty' + itemId);
                const quantity = Number(quantityEl.val());
                $('#qty' + itemId).val(quantity ? quantity + 1 : 1);
            },

            handleAddToWishList: function(data) {
                getInputQuantity(data._itemId, data._wishListId);
            },
            handleAddToCart: function (data) {
                getInputQuantity(data._itemId, data._cartId);
            },
            handleSawOption: function (data) {
                handleSawOption(data._itemId, data._productAttributes, data._productName)
            },
        },
    });
</script>

<script type="text/template" id="columnTip">
    custom tooltipping
</script>

<script>
    function getInputQuantity(itemId, cartId) {
        let qty = $('#qty' + itemId).val();
        if (!qty)
            qty = 1;
        let link = `/CartOverride/CustomAddProductToCart_Catalog?productId=${itemId}&shoppingCartTypeId=${cartId}&quantity=${qty}`
        $('#qty' + itemId).val("");
        AjaxCart.addproducttocart_catalog(link);
    }

    function handleSawOption(productId, attributes, product) {
        modalVm.handleSawOption(productId, attributes, product);
    }
</script>

<script id="quantityTemplate" type="text/x-template">
    ${if(_isSerialized == "true")}
    <label style="width: 40px" for="" class="text-center">1</label>
    ${else}
    <input min="1" name="quantity" style="width: 40px" class="text-center" id="qty${_itemId}"
           oninput="this.value = !!this.value && Math.abs(this.value) >= 0 ? Math.abs(this.value) : null">
    ${/if}
</script>
<script id="optionsTemplate" type="text/x-template">
    <div class="d-flex align-items-center w-100" style="justify-content: space-evenly;">
        <svg id="add-to-wishlist" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon mr-1" aria-hidden="true" focusable="false" width="24" height="24"
             style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
             preserveAspectRatio="xMidYMid meet" viewBox="0 0 1024 1024" onclick="getInputQuantity(`${_itemId}`, `${_wishListId}`);return false;">
            <title>Add to favorite</title>
            <path d="M923 283.6a260.04 260.04 0 0 0-56.9-82.8a264.4 264.4 0 0 0-84-55.5A265.34 265.34 0 0 0 679.7 125c-49.3 0-97.4 13.5-139.2 39c-10 6.1-19.5 12.8-28.5 20.1c-9-7.3-18.5-14-28.5-20.1c-41.8-25.5-89.9-39-139.2-39c-35.5 0-69.9 6.8-102.4 20.3c-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 0 0-56.9 82.8c-13.9 32.3-21 66.6-21 101.9c0 33.3 6.8 68 20.3 103.3c11.3 29.5 27.5 60.1 48.2 91c32.8 48.9 77.9 99.9 133.9 151.6c92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3c56-51.7 101.1-102.7 133.9-151.6c20.7-30.9 37-61.5 48.2-91c13.5-35.3 20.3-70 20.3-103.3c.1-35.3-7-69.6-20.9-101.9z" />
        </svg>

        ${if(_sawOption)}
        @*<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon mx-1" width="24" height="24"
             onclick="handleSawOption(`${_itemId}`, `${_productAttributes}`, `${_productName}`); return false;" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"
             style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);">
            <title>Saw Options</title>
            <path d="M20 15s-1.4 1.3 1.1 2l-2.8 2.8h-2.8s-1.9-.1-.5 2.2h-4l-2-2s-1.3-1.4-2 1.1l-2.8-2.8v-2.8s.1-1.9-2.2-.5v-4l2-2s1.4-1.3-1.2-1.9l2.8-2.9h2.9s1.9.1.5-2.2h4l2 2s1.3 1.4 2-1.2l2.8 2.8v2.9s-.1 1.9 2.2.5v4l-2 2m-6-3a2 2 0 0 0-2-2a2 2 0 0 0-2 2a2 2 0 0 0 2 2a2 2 0 0 0 2-2z" />
            <rect x="0" y="0" width="24" height="24" fill="rgba(0, 0, 0, 0)" />
        </svg>*@
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24" class="hover-icon mx-1" width="24" height="24"  onclick="handleSawOption(`${_itemId}`, `${_productAttributes}`, `${_productName}`); return false;">
            <g transform="translate(-580 -80)">
                <title>Saw Options</title>
                <path d="M0,0H24V24H0Z" transform="translate(580 80)"  fill="rgba(0, 0, 0, 0)"/>
                <path  d="M7.031,11.781h2.52l-.72,6.36,1.42,1.42,1.78-1.78,4,5h2v-2.52l6.36.7,1.42-1.42-1.78-1.76,5-4v-2h-2.52l.7-6.36L25.791,4l-1.76,1.78-4-5h-2V3.3l-6.36-.72L10.251,4l1.78,1.78-5,4Zm11-3a3,3,0,1,1-3,3,3,3,0,0,1,3-3Z" transform="translate(574.409 80.409)" />
            </g>
        </svg>
        ${/if}

        ${if(_mtr)}
        <a class="table-action-button mx-1" style="text-decoration:none" onclick="openMTR(`${_mtr}`)">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon" width="24" height="24"
                 preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"
                 style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);">
                <title>View MTRs</title>
                <path d="M13 16H7a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2zm-4-6h2a1 1 0 0 0 0-2H9a1 1 0 0 0 0 2zm12 2h-3V3a1 1 0 0 0-.5-.87a1 1 0 0 0-1 0l-3 1.72l-3-1.72a1 1 0 0 0-1 0l-3 1.72l-3-1.72a1 1 0 0 0-1 0A1 1 0 0 0 2 3v16a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3v-6a1 1 0 0 0-1-1zM5 20a1 1 0 0 1-1-1V4.73l2 1.14a1.08 1.08 0 0 0 1 0l3-1.72l3 1.72a1.08 1.08 0 0 0 1 0l2-1.14V19a3 3 0 0 0 .18 1zm15-1a1 1 0 0 1-2 0v-5h2zm-7-7H7a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2z" />
                <rect x="0" y="0" width="24" height="24" fill="rgba(0, 0, 0, 0)" />
            </svg>
        </a>
        ${/if}

        <button onclick="getInputQuantity(`${_itemId}`, `${_cartId}`);return false;" style="border: none;background-color: #1899E1;color:#ffffff;display: flex;align-items: center;padding: 5px 10px;margin-left: 5px;">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="hover-icon mx-1" width="24" height="24"
                 preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"
                 style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);">
                <title>Add to cart</title>
                <path style="fill: #ffffff;" d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2s-.9-2-2-2zM1 2v2h2l3.6 7.59l-1.35 2.45c-.16.28-.25.61-.25.96c0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12l.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49A1.003 1.003 0 0 0 20 4H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2s2-.9 2-2s-.9-2-2-2z" />
                <rect x="0" y="0" width="24" height="24" fill="rgba(0, 0, 0, 0)" />
            </svg>
            Add to cart
        </button>
    </div>
</script>
<ejs-scripts></ejs-scripts>

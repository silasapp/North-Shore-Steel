@using Nop.Web.Models.Catalog
@using Nop.Core
@using NSS.Plugin.Misc.SwiftPortalOverride
@using NSS.Plugin.Misc.SwiftCore.Helpers
@using NSS.Plugin.Misc.SwiftCore.Services
@using Nop.Services.Common
@model SearchBoxModel

@inject ICustomerCompanyService customerCompanyService
@inject IGenericAttributeService genericAttributeService
@inject IWorkContext workContext

@{
    var currentCustomer = workContext.CurrentCustomer;
    var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, currentCustomer.Id);
    string eRPCompanyId = genericAttributeService.GetAttribute<string>(currentCustomer, compIdCookieKey);
    bool isBuyer = customerCompanyService.Authorize(currentCustomer.Id, Convert.ToInt32(eRPCompanyId), ERPRole.Buyer);
}

@if (isBuyer)
{
    <form action="/catalog" method="get" id="small-search-box-form">
        @if (Model.ShowSearchBox)
        {
            <input type="text" class="search-box-text" id="small-searchterms" autocomplete="off" name="q" placeholder="Search products" aria-label="@T("Search.SearchBox.Text.Label")" v-bind:class="{'small-searchterms-mob': isMobile, 'small-searchterms': !isMobile}" />
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBoxBeforeSearchButton })
            <button type="submit" class="button-1 search-box-button">
                <img v-if="isMobile" style="position: absolute" src="~/Themes/SwiftPortal/Content/assets/search.svg" width="20" height="20" alt="">
                <img v-if="!isMobile" style="position: absolute" src="~/Themes/SwiftPortal/Content/assets/search-black.svg" width="20" height="20" alt="">
            </button>
            @if (Model.SearchTermMinimumLength > 0)
            {
                <script asp-location="Footer">
                $("#small-search-box-form").on("submit", function(event) {
                    if ($("#small-searchterms").val() == "") {
                        alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))');
                        $("#small-searchterms").focus();
                        event.preventDefault();
                    }
                });
                </script>
            }

            @if (Model.AutoCompleteEnabled)
            {
                <script asp-location="Footer">
                $(document).ready(function() {
                    var showLinkToResultSearch;
                    var searchText;
                    $('#small-searchterms').autocomplete({
                            delay: 500,
                            minLength: @(Model.SearchTermMinimumLength.ToString()),
                            source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                            appendTo: '.search-box',
                            select: function(event, ui) {
                                $("#small-searchterms").val(ui.item.label);
                                setLocation(ui.item.producturl);
                                return false;
                        },
                        //append link to the end of list
                        open: function(event, ui) {
                            //display link to search page
                            if (showLinkToResultSearch) {
                                searchText = document.getElementById("small-searchterms").value;
                                $(".ui-autocomplete").append("<li class=\"ui-menu-item\" role=\"presentation\"><a href=\"/search?q=" + searchText + "\">@T("Search.SearchBox.SearchPageLink")</a></li>");
                            }
                        }
                    })
                    .data("ui-autocomplete")._renderItem = function(ul, item) {
                        var t = item.label;
                        showLinkToResultSearch = item.showlinktoresultsearch;
                        //html encode
                        t = htmlEncode(t);
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)<span>" + t + "</span></a>")
                            .appendTo(ul);
                    };
                });
                </script>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBox })
        }
    </form>
}

<script>
    var vm = new Vue({
        el: '#small-search-box-form',
        data: {
            window: {
                width: 0,
                height: 0,
            },
            isExportMode: false,
        },
        created: function () {
            window.addEventListener("resize", this.handleResize);
            this.handleResize();
        },
        destroyed: function () {
            window.removeEventListener("resize", this.handleResize);
        },
        computed: {
            isMobile: function () {
                return this.window.width <= 767.98;
            },
        },
        methods: {
            handleResize: function () {
                this.window.width = window.innerWidth;
                this.window.height = window.innerHeight;
            },

        },
    });
</script>
@using Nop.Core
@using NSS.Plugin.Misc.SwiftCore.Helpers
@using NSS.Plugin.Misc.SwiftPortalOverride
@using NSS.Plugin.Misc.SwiftCore.Services
@using Nop.Web.Models.Common
@using Nop.Services.Common

@model HeaderLinksModel
@inject Nop.Core.IWebHelper webHelper
@inject IWorkContext workContext
@inject ICustomerCompanyService customerCompanyService
@inject IGenericAttributeService genericAttributeService
@inject IThemeContext themeContext
@using Nop.Web.Framework.Themes

@{
    var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, workContext.CurrentCustomer.Id);
    int eRPCompanyId = Convert.ToInt32(genericAttributeService.GetAttribute<string>(workContext.CurrentCustomer, compIdCookieKey));
    bool isBuyer = customerCompanyService.Authorize(workContext.CurrentCustomer.Id, eRPCompanyId, ERPRole.Buyer);
}

<div id="header-links" class="header-links">

    <div class="overlay" v-bind:style="{'display': isDrawerOpen ? 'block' : 'none' }" v-on:click="closeDrawer"></div>
    <ul class="mb-0">
        @{ var themeName = themeContext.WorkingThemeName; }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
        @if (Model.IsAuthenticated)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account"><img src="~/Themes/@(themeName)/Content/assets/person.svg" /></a></li>
            @if (Model.WishlistEnabled && isBuyer)
            {
                <li>
                    <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                        <span class="wishlist-label" title="Wishlist"><img src="~/Themes/@(themeName)/Content/assets/heart.svg"></span>
                        <span class="wishlist-qty">@Model.WishlistItems</span>
                    </a>
                </li>
            }
            @if (Model.ShoppingCartEnabled && isBuyer)
            {
                <li id="topcartlink">
                    <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                        <span class="cart-label"><img src="~/Themes/@(themeName)/Content/assets/cart.svg"></span>
                        <span class="cart-qty" title="Cart">@Model.ShoppingCartItems</span>
                    </a>
                </li>
            }
            <li class="d-none d-lg-block">
                <a href="@Url.RouteUrl("Logout")" class="ico-wishlist">
                    <span class="wishlist-label"><img src="~/Themes/@(themeName)/Content/assets/logout.svg"></span>
                </a>
            </li>
            <li class="d-lg-none">
                <span v-on:click="openDrawer()"><img src="~/Themes/@(themeName)/Content/assets/hamburger-menu-white.svg" /></span>
            </li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !String.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
            <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>

<script>
    var headerLinksVm = new Vue({
        el: '#header-links',
        data: {
            isDrawerOpen: false,
        },
        mounted: function () {
            console.log("mounting...");
        },
        methods: {
            openDrawer: function () {
                console.log("opening drawer...");
                const drawer = document.getElementById("top-menu-drawer");
                drawer.style.width = '351px';
                drawer.style.maxWidth = '90%';
                drawer.style.minWidth = '30%';
                drawer.style.transform = 'translateX(0)';
                this.isDrawerOpen = true;
            },
            closeDrawer: function () {
                console.log("closing drawer...");
                const drawer = document.getElementById("top-menu-drawer");
                drawer.style.width = '0px';
                drawer.style.minWidth = '0px';
                drawer.style.maxWidth = '100%';
                this.isDrawerOpen = false;
            },
        }
    });
</script>
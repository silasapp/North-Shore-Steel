@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Web.Models.ShoppingCart
@using Nop.Web.Extensions
@using Nop.Services.Common
@using Nop.Core.Domain.Catalog
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
@inject IGenericAttributeService genericAttributeService


<div class="order-summary-content">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div style="display: flex; margin: 20px 0; justify-content: space-between;" class="col-lg-5">
                <div class="filter-menu">
                    <label for="purchase-order">Purchase Order #</label>
                    <input type="text" name="purchase-order" id="purchase-order" placeholder="ENTER...">
                </div>
                <div class="filter-menu">
                    <label for="estimated-date">Delivery Date</label>
                    <input type="text" name="estimated-date" id="estimated-date" onfocus="(this.type='date')" onblur="(this.type='text')" placeholder="TBD" disabled>
                </div>
            </div>
            <div class="table-wrapper">
                <table class="table table-bordered cart-table">
                    <thead>
                        <tr>
                            <th scope="col">Item #</th>
                            <th scope="col">Description</th>
                            <th scope="col">Customer Part #</th>
                            <th scope="col">Unit Price</th>
                            <th scope="col">Total Price</th>
                            <th scope="col">Weight</th>
                            <th scope="col">Length</th>
                            <th scope="col">Order Qty</th>
                            <th scope="col">Notes</th>
                            <th scope="col">Remove</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            var attr = genericAttributeService.GetAttributesForEntity(item.ProductId, nameof(Product));
                            var itemNo = attr.FirstOrDefault(x => x.Key == "itemTagNo")?.Value ?? attr.FirstOrDefault(x => x.Key == "itemNo")?.Value;
                            var pricePerFt = attr.FirstOrDefault(x => x.Key == "pricePerFt")?.Value;
                            var pricePerCWT = attr.FirstOrDefault(x => x.Key == "pricePerCWT")?.Value;
                            var pricePerPiece = attr.FirstOrDefault(x => x.Key == "pricePerPiece")?.Value;

                            var unitPrice = "0.00";


                            <tr>
                                <td>@(itemNo)</td>
                                <td>@item.ProductName</td>
                                <td>
                                    <input style="width: 100px;height: 30px;" type="text" name="customer-part" id="">
                                </td>
                                <td>
                                    @{unitPrice = !string.IsNullOrEmpty(pricePerPiece) ? pricePerPiece : !string.IsNullOrEmpty(pricePerCWT) ? pricePerCWT : !string.IsNullOrEmpty(pricePerFt) ? pricePerFt : unitPrice; }

                                    <input style="width: 100px;height: 30px;" disabled type="text" name="unit-price" id="itemunitprice@(item.Id)" value="$@(DoFormat(Convert.ToDouble(unitPrice)))">
                                    <select name="itemunit@(item.Id)" id="itemunit@(item.Id)" style="height: 30px;" onchange="toggleUnitPrice(@item.Id, @pricePerCWT, @pricePerPiece, @pricePerFt, )">
                                        @if (!string.IsNullOrEmpty(pricePerPiece))
                                        {
                                            <option value="EA">EA</option>
                                        }
                                        @if (!string.IsNullOrEmpty(pricePerCWT))
                                        {
                                            <option value="CWT">CWT</option>
                                        }
                                        @if (!string.IsNullOrEmpty(pricePerFt))
                                        {
                                            <option value="FT">FT</option>
                                        }
                                    </select>
                                </td>
                                <td id="itemsubtotal@(item.Id)"> @item.SubTotal </td>
                                <td id="itemweight@(item.Id)">@(double.TryParse(attr.FirstOrDefault(x => x.Key == "weight")?.Value, out double weight) ? DoFormat(weight) : "0.00") </td>
                                <td id="itemlength@(item.Id)">@(double.TryParse(attr.FirstOrDefault(x => x.Key == "length")?.Value, out double length) ? DoFormat(length) : "0.00") </td>
                                <td>
                                    <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="number" min="1" value="@(item.Quantity)" style="width: 100px" aria-label="@T("ShoppingCart.Quantity")" onchange="calculateItemTotalPrice(@item.Id)" />
                                    @*<input style="width: 100px" type="number" name="quantity" id="">*@
                                </td>
                                <td style="text-align:center">
                                    <button style="background: none; border: none;">
                                        <img src="Themes/SwiftPortal/Content/assets/invoice.svg" width="20" height="20" alt="">
                                    </button>
                                </td>
                                <td class="remove-from-cart" style="text-align:center">
                                    <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" aria-label="@T("ShoppingCart.Remove")" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="cart-options">
                @if (Model.IsEditable)
                {
                    <div class="common-buttons">
                        @*<button class="no-backgroud-button" type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")"><img src="Themes/SwiftPortal/Content/assets/reload.svg" alt=""> Update Cart</button>
                            <button class="no-backgroud-button" type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")"><img src="Themes/SwiftPortal/Content/assets/return.svg" alt="">Continue Shopping</button>*@
                        <input type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" />
                        <input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />
                        @*@await Component.InvokeAsync("ShoppingCartEstimateShipping")*@
                    </div>
                }
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                @await Component.InvokeAsync("SelectedCheckoutAttributes")
            </div>
            <div class="cart-footer">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals">
                        <div class="deals">
                            @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                            @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                            <div class="pickup-options">
                                <div>
                                    <label for="customer" class="radio control-label">
                                        <input type="radio" id="customer" name="ship" value="customer">
                                        Ship to Customer
                                    </label>
                                </div>
                                <div>
                                    <label for="pickup" class="radio control-label">
                                        <input type="radio" id="pickup" name="ship" value="pickup">
                                        Pickup from North Shore Steel
                                    </label>
                                </div>
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                        </div>
                    </div>
                }
                <div class="totals">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                    @if (Model.IsEditable)
                    {
                        if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        }
                    }
                    @if (Model.IsEditable)
                    {
                        if (Model.TermsOfServiceOnShoppingCartPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service">
                                <input id="termsofservice" type="checkbox" name="termsofservice" />
                                <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                                @if (Model.TermsOfServicePopup)
                                {
                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                    <script asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#read-terms').on('click',
                                                function(e) {
                                                    e.preventDefault();
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                        '@T("Checkout.TermsOfService")');
                                                });
                                        });
                                    </script>
                                }
                                else
                                {
                                    <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                }
                            </div>
                        }
                        <div class="checkout-buttons">
                            @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                            {
                                <script asp-location="Footer">
                                    $(document).ready(function () {
                                        $('#checkout').on('click', function () {
                                            //terms of service
                                            var termOfServiceOk = true;
                                            if ($('#termsofservice').length > 0) {
                                                //terms of service element exists
                                                if (!$('#termsofservice').is(':checked')) {
                                                    $("#terms-of-service-warning-box").dialog();
                                                    termOfServiceOk = false;
                                                } else {
                                                    termOfServiceOk = true;
                                                }
                                            }
                                            return termOfServiceOk;
                                        });
                                    });
                                </script>
                                if (orderSettings.CheckoutDisabled)
                                {
                                    <div class="checkout-disabled">
                                        @T("Checkout.Disabled")
                                    </div>
                                }
                                else
                                {
                                    <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                        @T("Checkout.Button")
                                    </button>
                                }
                            }
                        </div>
                        <div class="addon-buttons">
                            @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                            @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                            {
                                @await Component.InvokeAsync(pm)
                            }
                        </div>
                    }
                </div>
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
</div>

@functions{
    string DoFormat(double myNumber)
    {
        var s = string.Format("{0:0.00}", myNumber);

        return s;
    }
}

<script>
    function calculateItemTotalPrice(itemId) {
        var qty = parseInt(document.getElementById('itemquantity' + itemId).value, 10);
        var itemUnit = document.getElementById('itemunit' + itemId).value;
        var unitPrice = parseFloat(document.getElementById('itemunitprice' + itemId).value.replace(/\$/g, ''));
        var length = parseFloat(document.getElementById('itemlength' + itemId).innerHTML);
        var weight = parseFloat(document.getElementById('itemweight' + itemId).innerHTML);
        var subtotal = document.getElementById('itemsubtotal' + itemId);
        var totalPrice = 0.00;

        switch (itemUnit) {
            case 'EA':
                totalPrice = qty * unitPrice;
                break;
            case 'FT':
                totalPrice = qty * unitPrice * length;
                break;
            case 'CWT':
                totalPrice = (weight / 100) * qty * unitPrice;
                break;

            default:
                break;
        }

        subtotal.innerHTML = `$${totalPrice.toFixed(2)}`;
    }

    function toggleUnitPrice(itemId, weightPrice, piecePrice, ftPrice) {
        debugger;
        var itemUnit = document.getElementById('itemunit' + itemId).value;
        var unitPriceCtrl = document.getElementById('itemunitprice' + itemId);
        var unitPrice = 0.00;
        switch (itemUnit) {
            case "EA":
                unitPrice = Number(piecePrice).toFixed(2);
                break;
            case "FT":
                unitPrice = Number(weightPrice).toFixed(2);
                break;
            case "CWT":
                unitPrice = Number(ftPrice).toFixed(2);
                break;
            default:
                break;
        }
        unitPriceCtrl.value = `$${unitPrice}`;

        calculateItemTotalPrice(itemId);
    }
</script>
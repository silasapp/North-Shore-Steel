@model ShoppingCartModel
@using Nop.Core
@using Syncfusion.EJ2
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Web.Models.ShoppingCart
@using Nop.Web.Extensions
@using Nop.Services.Common
@using Nop.Core.Domain.Catalog
@using Nop.Web.Factories
@using Nop.Services.Catalog
@using Nop.Web.Models.Catalog
@using Nop.Services.Localization
@using Nop.Core.Domain
@using NSS.Plugin.Misc.SwiftPortalOverride
@using NSS.Plugin.Misc.SwiftCore.Services
@using NSS.Plugin.Misc.SwiftCore.Domain.Customers
@using Nop.Services.Orders
@using NSS.Plugin.Misc.SwiftCore.Helpers
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
@inject IGenericAttributeService genericAttributeService
@inject IProductModelFactory productModelFactory
@inject IProductAttributeParser productAttributeParser
@inject IProductAttributeService productAttributeService
@inject ILocalizationService localizationService
@inject IProductService productService
@inject IShoppingCartService shoppingCartService
@inject ICustomerCompanyProductService customerCompanyProductService
@inject ICustomerCompanyService customerCompanyService
@inject ICompanyService companyService

@{
    var customer = workContext.CurrentCustomer;

    // get cust company
    var (erpCompId, customerCompany) = GetCustomerCompanyDetails();

    var cartItems = shoppingCartService.GetShoppingCart(customer, ShoppingCartType.ShoppingCart);

    var purchasechkattr = Model.CheckoutAttributes.FirstOrDefault(x => x.Name == Constants.CheckoutPONoAttribute);
    var deliverychkattr = Model.CheckoutAttributes.FirstOrDefault(x => x.Name == Constants.CheckoutDeliveryOptionAttribute);
}

<style>
    .modal-backdrop {
        position: unset !important;
    }

    .ui-dialog.ui-corner-all.ui-widget.ui-widget-content.ui-front.ui-draggable.ui-resizable {
        width: 67rem !important;
        margin: auto;
        position: relative !important;
        top: -111rem !important;
    }

    .button-2.update-cart-button {
        min-width: 128px !important;
    }

    th {
        white-space: nowrap;
    }

    .e-dlg-header {
        color: #fff !important;
        text-align: center;
    }

    .e-dialog .e-dlg-header {
        width: 93% !important;
    }
</style>

<!-- Modal -->
<div id="overlay"></div>

@{

    Func<object, object>
    Content1 =
    @<div id="viewNotesModal">
        <div class="modal-body">
            <textarea class="form-control rounded-0" maxlength="100" name="productNote" id="productNote" rows="3"></textarea>
        </div>
    </div>;
}

@*<div class="modal fade" id="noteModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header" style="background-color:#03175B; color: #fff">
                    <span class="modal-title">NOTES</span>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <textarea class="form-control rounded-0" maxlength="100" name="productNote" id="productNote" rows="3"></textarea>
                </div>
            </div>
        </div>
    </div>*@


<div class="cart-summary-content card">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div style="display: flex; margin: 20px 0; justify-content: space-between;flex-wrap: wrap;">

                <div class="col-md-5 cart-input-options">
                    <div class="cart-filter-menu">
                        <label for="purchase-order">Purchase Order #</label>
                        @if (purchasechkattr != null)
                        {
                            var controlId = $"checkout_attribute_{purchasechkattr.Id}";
                            <input type="text" name="@(controlId)" id="@(controlId)" value="@(purchasechkattr.DefaultValue)" placeholder="ENTER..." />
                        }

                    </div>
                    <div class="cart-filter-menu">
                        <label for="estimated-date">Delivery Date</label>
                        <input type="text" name="estimated-date" id="estimated-date" onfocus="(this.type='date')" onblur="(this.type='text')" placeholder="TBD" disabled>
                    </div>
                </div>

                @if (Model.IsEditable)
                {
                    <div class="common-buttons col-md-5 cart-action-options">
                        @*<button class="no-backgroud-button" type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")"><img src="Themes/SwiftPortal/Content/assets/reload.svg" alt=""> Update Cart</button>
                            <button class="no-backgroud-button" type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")"><img src="Themes/SwiftPortal/Content/assets/return.svg" alt="">Continue Shopping</button>*@
                        <div class="cart-action-btn">
                            <input style="z-index: 1;" type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />

                            <img style="position: absolute" src="Themes/SwiftPortal/Content/assets/return.svg" width="20" height="20" alt="">
                        </div>
                        <div class="cart-action-btn">
                            <input style="z-index: 1;" type="submit" name="updatecart" value="Update Cart" class="button-2 update-cart-button" />

                            <img style="position: absolute" src="Themes/SwiftPortal/Content/assets/reload.svg" width="20" height="20" alt="">
                        </div>
                        @*@await Component.InvokeAsync("ShoppingCartEstimateShipping")*@
                    </div>
                }
                @*@if (Model.IsEditable)
                    {
                        @await Html.PartialAsync("_CheckoutAttributes", Model)
                    }*@



            </div>
            @*@await Component.InvokeAsync("SelectedCheckoutAttributes")*@
            <div class="table-wrapper">
                <table class="table table-bordered cart-table">
                    <thead>
                        <tr>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Item #</th>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Description</th>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Customer Part #</th>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Unit Price</th>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Total Price</th>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Weight (lb)</th>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Length (ft)</th>
                            <th style="background-color: transparent !important; border: none !important" scope="col">Quantity</th>
                            <th style="background-color: transparent !important; border: none !important;" scope="col">Notes</th>
                            <th style="background-color: transparent !important; border: none !important;" scope="col">Remove</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            var product = productService.GetProductById(item.ProductId);
                            var attr = genericAttributeService.GetAttributesForEntity(item.ProductId, nameof(Product));

                            var itemTagNo = attr.FirstOrDefault(x => x.Key == "itemTagNo")?.Value;
                            var itemNo = attr.FirstOrDefault(x => x.Key == "itemNo")?.Value;
                            string isSerialized = attr.FirstOrDefault(x => x.Key == "serialized")?.Value;
                            var iNo = isSerialized == "True" ? itemTagNo : itemNo;
                            var pricePerFt = attr.FirstOrDefault(x => x.Key == "pricePerFt")?.Value;
                            var pricePerCWT = attr.FirstOrDefault(x => x.Key == "pricePerCWT")?.Value;
                            var pricePerPiece = attr.FirstOrDefault(x => x.Key == "pricePerPiece")?.Value;

                            var customerCompanyProduct = new CustomerCompanyProduct();
                            if (customerCompany != null)
                            {
                                customerCompanyProduct = customerCompanyProductService.GetCustomerCompanyProductById(customerCompany.Id, item.ProductId);
                            }

                            // get attribute

                            var cartItem = cartItems.FirstOrDefault(x => x.Id == item.Id);
                            var attributes = PrepareProductAttributeModels(product, cartItem);

                            var custPartNoAttr = attributes.FirstOrDefault(x => x.Name == Constants.CustomerPartNoAttribute);
                            var purchaseUnitAttr = attributes.FirstOrDefault(x => x.Name == Constants.PurchaseUnitAttribute);
                            var noteAttr = attributes.FirstOrDefault(x => x.Name == Constants.WorkOrderInstructionsAttribute);

                            var unitControlId = purchaseUnitAttr != null ? $"{NopCatalogDefaults.ProductAttributePrefix}{purchaseUnitAttr.Id}{item.Id}" : $"itemuom{item.Id}";

                            //var unitPrice = "0.00";

                            <tr>
                                <td><label style="margin:0;">@(iNo)</label></td>
                                <td>
                                    <label style="margin:0;">
                                        @item.ProductName
                                    </label>
                                    @*@if (!string.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <div class="attributes">
                                                @Html.Raw(item.AttributeInfo)
                                            </div>
                                        }*@
                                    @if (item.Warnings.Count > 0)
                                    {
                                        <div class="message-error">
                                            <ul>
                                                @foreach (var warning in item.Warnings)
                                                {
                                                    <li>@Html.Raw(warning)</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </td>
                                <td>
                                    @*//var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{custPartNoAttr.Id}";*@
                                    <input class="cart-qty-input" type="text" style="height: 24px;width: 100px;" name="customerpartNo@(item.ProductId)" id="no-@item.Id" value="@customerCompanyProduct?.CustomerPartNo" />
                                </td>
                                <td style="white-space: nowrap;">
                                    @*<input style="width: 70%;height: 24px;" disabled type="text" name="unit-price" id="itemunitprice@(item.Id)" value="@(item.UnitPrice)">*@
                                    <label style="margin:0;margin-right:2px;" id="itemunitprice@(item.Id)">@item.UnitPrice</label> /

                                    @if (purchaseUnitAttr != null)
                                    {
                                        <select name="@(unitControlId)" id="@(unitControlId)" style="height: 24px;min-width: auto;margin: 0 !important;" onchange="toggleUnitPrice(this, '@unitControlId', @item.Id, '@(pricePerCWT ?? "")', '@(pricePerPiece ?? "")', '@(pricePerFt ?? "")')">
                                            @foreach (var attributeValue in purchaseUnitAttr.Values)
                                            {
                                                if (attributeValue.Name == "EA" && string.IsNullOrEmpty(pricePerPiece) || attributeValue.Name == "CWT" && string.IsNullOrEmpty(pricePerCWT) || attributeValue.Name == "FT" && string.IsNullOrEmpty(pricePerFt))
                                                    continue;

                                                <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeValue.Name</option>
                                            }
                                        </select>
                                    }

                                </td>
                                <td id="itemsubtotal@(item.Id)"> <label style="margin:0;">@item.SubTotal</label></td>
                                <td><label id="itemweight@(item.Id)" style="margin:0;">@(double.TryParse(attr.FirstOrDefault(x => x.Key == "weight")?.Value, out double weight) ? DoFormat(weight) : "0.00")</label></td>
                                <td><label id="itemlength@(item.Id)" style="margin:0;">@(double.TryParse(attr.FirstOrDefault(x => x.Key == "length")?.Value, out double length) ? DoFormat(length) : "0.00")</label></td>
                                <td>
                                    <input style="height: 24px;" name="itemquantity@(item.Id)" @(isSerialized?.ToLower() == "true" ? "disabled" : null) id="itemquantity@(item.Id)" type="number" min="1" oninput="this.value = !!this.value && Math.abs(this.value)>= 0 ? Math.abs(this.value) : null" value="@(item.Quantity)" style="width: 100px; height: 30px" aria-label="@T("ShoppingCart.Quantity")" onchange="calculateItemTotalPrice('@unitControlId', @item.Id)" />
                                </td>
                                <td style="text-align:center">
                                    @if (noteAttr != null)
                                    {
                                        var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{noteAttr.Id}{item.Id}";
                                        <a style="background: none; border: none;" data-toggle="modal" onclick="handleNotesModal('@controlId')" data-target="#noteModal">
                                            <img src="Themes/SwiftPortal/Content/assets/note-add.svg" width="20" height="20" alt="">
                                        </a>
                                        <input type="hidden" id=@controlId name="@controlId" value="@noteAttr.DefaultValue" />
                                    }
                                </td>
                                <td class="remove-from-cart" style="text-align:center">
                                    <label class="pure-material-checkbox">
                                        <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" style=" position: unset !important;" aria-label="@T("ShoppingCart.Remove")" />

                                        <span class="checkmark"></span>
                                    </label>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                </div>
            }
            <div class="cart-footer row">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals col-md-4 col-xs-12">
                        <div class="deals" style="width: 100%;max-width: 100%;">
                            @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                            @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)


                            <div class="pickup-options">
                                @if (deliverychkattr != null)
                                {
                                    var controlId = $"checkout_attribute_{deliverychkattr.Id}";
                                    @foreach (var attributeValue in deliverychkattr.Values)
                                    {
                                        <div>
                                            <label for="@(controlId)_@(attributeValue.Id)" class="radio control-label radio-button">
                                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected">
                                                <span class="rad-checkmark"></span>
                                                @attributeValue.Name
                                            </label>
                                        </div>
                                    }

                                }
                                else
                                {
                                    <div>
                                        <label for="pickup" class="radio control-label radio-button">
                                            <input type="radio" id="customer" name="ship" value="customer">
                                            <span class="rad-checkmark"></span>
                                            Ship to Customer
                                        </label>
                                    </div>
                                    <div>
                                        <label for="pickup" class="radio control-label radio-button">
                                            <input type="radio" id="pickup" name="ship" value="pickup">
                                            <span class="rad-checkmark"></span>
                                            Pickup from North Shore Steel
                                        </label>
                                    </div>
                                }

                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                        </div>
                    </div>
                }
                <div class="totals col-md-7 col-xs-12" style="background: none; padding: 0;">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                    @if (Model.IsEditable)
                    {
                        if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        }
                    }
                    @if (Model.IsEditable)
                    {
                        if (Model.TermsOfServiceOnShoppingCartPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service" style="display: flex;align-items: center;">

                                <label class="pure-material-checkbox" style=" display: unset;">
                                    <input id="termsofservice" type="checkbox" name="termsofservice" />
                                    <span class="checkmark"></span>@T("Checkout.TermsOfService.IAccept")

                                    @if (Model.TermsOfServicePopup)
                                    {
                                        <a class="read" id="read-terms" style="margin-left: 5px !important;">@T("Checkout.TermsOfService.Read")</a>
                                        <script asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#read-terms').on('click',
                                                function(e) {
                                                    e.preventDefault();
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new { SystemName = "conditionsofuse" })',
                                                        '@T("Checkout.TermsOfService")');
                                                });
                                        });
                                        </script>
                                    }
                                    else
                                    {
                                        <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                    }
                                </label>
                            </div>
                        }
                        <div class="checkout-buttons">
                            @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                            {
                                <script asp-location="Footer">
                                    $(document).ready(function () {
                                        $('#checkout').on('click', function () {
                                            //terms of service
                                            var termOfServiceOk = true;
                                            if ($('#termsofservice').length > 0) {
                                                //terms of service element exists
                                                if (!$('#termsofservice').is(':checked')) {
                                                    $("#terms-of-service-warning-box").dialog();
                                                    termOfServiceOk = false;
                                                } else {
                                                    termOfServiceOk = true;
                                                }
                                            }
                                            return termOfServiceOk;
                                        });
                                    });
                                </script>
                                if (orderSettings.CheckoutDisabled)
                                {
                                    <div class="checkout-disabled">
                                        @T("Checkout.Disabled")
                                    </div>
                                }
                                else
                                {
                                    <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                        @T("Checkout.Button")
                                    </button>
                                }
                            }
                        </div>
                        <div class="addon-buttons">
                            @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                            @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                            {
                                @await Component.InvokeAsync(pm)
                            }
                        </div>
                    }
                </div>
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @Html.EJS().Dialog("dialog").Visible(false).IsModal(true).Created("onDialogCreated").Header("NOTES").ContentTemplate(@Content1).ShowCloseIcon(true).Visible(false).Width("500px").Target("body").Render();

    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
</div>

@functions{
    string DoFormat(double myNumber)
    {
        var s = string.Format("{0:0.00}", myNumber);

        return s;
    }

    (int, CustomerCompany) GetCustomerCompanyDetails()
    {
        var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, workContext.CurrentCustomer.Id);

        int.TryParse(Context.Request.Cookies[compIdCookieKey], out int eRPCompanyId);

        CustomerCompany customerCompany = null;

        if (eRPCompanyId > 0)
            customerCompany = customerCompanyService.GetCustomerCompanyByErpCompId(workContext.CurrentCustomer.Id, eRPCompanyId);

        return (eRPCompanyId, customerCompany);
    }
    #region PrepareProductAttributeModels
    IList<ProductDetailsModel.ProductAttributeModel> PrepareProductAttributeModels(Product product, ShoppingCartItem updatecartitem)
    {
        if (product == null)
            throw new ArgumentNullException(nameof(product));

        var model = new List<ProductDetailsModel.ProductAttributeModel>();

        var productAttributeMapping = productAttributeService.GetProductAttributeMappingsByProductId(product.Id);
        foreach (var attribute in productAttributeMapping)
        {
            var productAttrubute = productAttributeService.GetProductAttributeById(attribute.ProductAttributeId);

            var attributeModel = new ProductDetailsModel.ProductAttributeModel
            {
                Id = attribute.Id,
                ProductId = product.Id,
                ProductAttributeId = attribute.ProductAttributeId,
                Name = localizationService.GetLocalized(productAttrubute, x => x.Name),
                Description = localizationService.GetLocalized(productAttrubute, x => x.Description),
                TextPrompt = localizationService.GetLocalized(attribute, x => x.TextPrompt),
                IsRequired = attribute.IsRequired,
                AttributeControlType = attribute.AttributeControlType,
                DefaultValue = updatecartitem != null ? null : localizationService.GetLocalized(attribute, x => x.DefaultValue),
                HasCondition = !string.IsNullOrEmpty(attribute.ConditionAttributeXml)
            };


            if (attribute.ShouldHaveValues())
            {
                //values
                var attributeValues = productAttributeService.GetProductAttributeValues(attribute.Id);
                foreach (var attributeValue in attributeValues)
                {
                    var valueModel = new ProductDetailsModel.ProductAttributeValueModel
                    {
                        Id = attributeValue.Id,
                        Name = localizationService.GetLocalized(attributeValue, x => x.Name),
                        ColorSquaresRgb = attributeValue.ColorSquaresRgb, //used with "Color squares" attribute type
                        IsPreSelected = attributeValue.IsPreSelected,
                        CustomerEntersQty = attributeValue.CustomerEntersQty,
                        Quantity = attributeValue.Quantity
                    };
                    attributeModel.Values.Add(valueModel);
                }
            }

            //set already selected attributes (if we're going to update the existing shopping cart item)
            if (updatecartitem != null)
            {
                switch (attribute.AttributeControlType)
                {
                    case AttributeControlType.DropdownList:
                    case AttributeControlType.RadioList:
                    case AttributeControlType.Checkboxes:
                    case AttributeControlType.ColorSquares:
                    case AttributeControlType.ImageSquares:
                        {
                            if (!string.IsNullOrEmpty(updatecartitem.AttributesXml))
                            {
                                //clear default selection
                                foreach (var item in attributeModel.Values)
                                    item.IsPreSelected = false;

                                //select new values
                                var selectedValues = productAttributeParser.ParseProductAttributeValues(updatecartitem.AttributesXml);
                                foreach (var attributeValue in selectedValues)
                                    foreach (var item in attributeModel.Values)
                                        if (attributeValue.Id == item.Id)
                                        {
                                            item.IsPreSelected = true;

                                            //set customer entered quantity
                                            if (attributeValue.CustomerEntersQty)
                                                item.Quantity = attributeValue.Quantity;
                                        }
                            }
                        }

                        break;
                    case AttributeControlType.ReadonlyCheckboxes:
                        {
                            //values are already pre-set

                            //set customer entered quantity
                            if (!string.IsNullOrEmpty(updatecartitem.AttributesXml))
                            {
                                foreach (var attributeValue in productAttributeParser.ParseProductAttributeValues(updatecartitem.AttributesXml)
                                    .Where(value => value.CustomerEntersQty))
                                {
                                    var item = attributeModel.Values.FirstOrDefault(value => value.Id == attributeValue.Id);
                                    if (item != null)
                                        item.Quantity = attributeValue.Quantity;
                                }
                            }
                        }

                        break;
                    case AttributeControlType.TextBox:
                    case AttributeControlType.MultilineTextbox:
                        {
                            if (!string.IsNullOrEmpty(updatecartitem.AttributesXml))
                            {
                                var enteredText = productAttributeParser.ParseValues(updatecartitem.AttributesXml, attribute.Id);
                                if (enteredText.Any())
                                    attributeModel.DefaultValue = enteredText[0];
                            }
                        }

                        break;
                    default:
                        break;
                }
            }

            model.Add(attributeModel);
        }

        return model;
    }
    #endregion
}


<script>

    function onDialogCreated() {
        viewNotesModal = this;
    }



    let itemNoteId;
    function handleNotesModal(itemId) {
        itemNoteId = itemId;
        $("#productNote").val($(`#${itemNoteId}`).val());
        viewNotesModal.show();
    }

    $('#noteModal').on('hidden.bs.modal', function () {
        $(`#${itemNoteId}`).val($(this).find("textarea").val());
        $(this).find("textarea").val('').end();
    });

    function calculateItemTotalPrice(attrId, itemId) {
        var qty = parseInt(document.getElementById('itemquantity' + itemId).value, 10);
        var itemUnit;
        if (attrId == null) {
            itemUnit = document.getElementById('itemunit' + itemId).value;
        }
        else {
            var el = document.getElementById(attrId);
            itemUnit = el.options[el.selectedIndex].text;
        }

        var unitPrice = parseFloat(document.getElementById('itemunitprice' + itemId).innerHTML.replace(/\$/g, ''));
        var length = parseFloat(document.getElementById('itemlength' + itemId).innerHTML);
        var weight = parseFloat(document.getElementById('itemweight' + itemId).innerHTML);
        var subtotal = document.getElementById('itemsubtotal' + itemId);
        var totalPrice = 0.00;

        switch (itemUnit) {
            case 'FT':
                totalPrice = evenRound(qty * length) * unitPrice;
                break;
            case 'CWT':
                totalPrice = (evenRound(weight * qty) / 100) * unitPrice;
                break;
            case 'EA':
            default:
                totalPrice = qty * unitPrice;
                break;
        }

        subtotal.innerHTML = `$${totalPrice.toFixed(2)}`;
    }

    function toggleUnitPrice(sel, attrId, itemId, weightPrice, piecePrice, ftPrice) {

        var itemUnit;
        if (attrId == null) {
            itemUnit = document.getElementById('itemunit' + itemId).value;
        }
        else {
            var el = document.getElementById(attrId);
            console.log(el);
            itemUnit = el.options[el.selectedIndex].text;
        }

        var unitPriceCtrl = document.getElementById('itemunitprice' + itemId);
        var unitPrice = 0.00;
        switch (itemUnit) {
            case "EA":
                unitPrice = Number(piecePrice).toFixed(2);
                break;
            case "FT":
                unitPrice = Number(ftPrice).toFixed(2);
                break;
            case "CWT":
                unitPrice = Number(weightPrice).toFixed(2);
                break;
            default:
                break;
        }

        unitPriceCtrl.innerHTML = `$${unitPrice}`;

        calculateItemTotalPrice(attrId, itemId);
    }

    function evenRound(num, decimalPlaces) {
        var d = decimalPlaces || 0;
        var m = Math.pow(10, d);
        var n = +(d ? num * m : num).toFixed(8); // Avoid rounding errors
        var i = Math.floor(n), f = n - i;
        var e = 1e-8; // Allow for rounding errors in f
        var r = (f > 0.5 - e && f < 0.5 + e) ?
            ((i % 2 == 0) ? i : i + 1) : Math.round(n);
        return d ? r / m : r;
    }
</script>
<ejs-scripts></ejs-scripts>
@model HeaderLinksModel
@inject Nop.Core.IWebHelper webHelper
@inject IThemeContext themeContext
@using Nop.Web.Framework.Themes

<div class="header-links">
    <ul class="mb-0">
        @{ var themeName = await themeContext.GetWorkingThemeNameAsync(); }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
        @if (Model.IsAuthenticated)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account"><img src="~/Themes/@(themeName)/Content/assets/person.svg" /></a></li>
            @if (Model.WishlistEnabled)
            {
                <li>
                    <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                        <span class="wishlist-label" title="Wishlist"><img src="~/Themes/@(themeName)/Content/assets/heart.svg"></span>
                        <span class="wishlist-qty">@Model.WishlistItems</span>
                    </a>
                </li>
            }
            @if (Model.ShoppingCartEnabled)
            {
                <li id="topcartlink">
                    <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                        <span class="cart-label"><img src="~/Themes/@(themeName)/Content/assets/cart.svg"></span>
                        <span class="cart-qty" title="Cart">@Model.ShoppingCartItems</span>
                    </a>
                </li>
            }
            <li>
                <a href="@Url.RouteUrl("Logout")" class="ico-wishlist">
                    <span class="wishlist-label"><img src="~/Themes/@(themeName)/Content/assets/logout.svg"></span>
                </a>
            </li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
            <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>

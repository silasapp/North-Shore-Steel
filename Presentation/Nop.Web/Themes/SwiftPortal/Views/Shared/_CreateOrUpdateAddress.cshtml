@using Nop.Core
@using Nop.Services.Common
@using Nop.Core.Domain.Customers 
@inject IWorkContext workContext
@inject IGenericAttributeService genericAttributeService
@model AddressModel

@{
    var customer = workContext.CurrentCustomer;
    var Email = customer.Email;
    string FirstName = genericAttributeService.GetAttribute<string>(customer, NopCustomerDefaults.FirstNameAttribute);
    string LastName = genericAttributeService.GetAttribute<string>(customer, NopCustomerDefaults.LastNameAttribute);
}


<input asp-for="Id" type="hidden" />
<style>
    .grey-bg {
        background-color: #f6f6f6 !important;
        padding: 20px;
    }

    .color-white {
        color: #ffffff !important;
    }
</style>
<div class="edit-address" id="edit-address-form"  v-bind:style="{'background-color':isMobile?'#f6f6f6 !important':'#ffffff'}">
    <div class="" hidden>
        <label asp-for="FirstName" asp-postfix=":"></label>
        <nop-required />
        <input asp-for="FirstName" placeholder="Enter first name" class="form-control custom-input" value="@FirstName"/>
        <span asp-validation-for="FirstName"></span>
    </div>
    <div class="" hidden>
        <label asp-for="LastName" asp-postfix=":"></label>
        <nop-required />
        <input asp-for="LastName" placeholder="Enter last name" class="form-control custom-input" value="@LastName"/>
        <span asp-validation-for="LastName"></span>
    </div>

    @if (Model.StreetAddressEnabled)
    {
        <div class="">
            <label asp-for="Address1" asp-postfix=":"></label>
            @if (Model.StreetAddressRequired)
            {
                <nop-required />
            }
            <input asp-for="Address1" placeholder="Enter address" class="form-control custom-input" />
            <span asp-validation-for="Address1"></span>
        </div>
    }
    @if (Model.StreetAddress2Enabled)
    {
        <div class="">
            <label asp-for="Address2" asp-postfix=":"></label>
            @if (Model.StreetAddress2Required)
            {
                <nop-required />
            }
            <input asp-for="Address2" placeholder="Enter address" class="form-control custom-input" />
            <span asp-validation-for="Address2"></span>
        </div>
    }

    @if (Model.CityEnabled)
    {
        <div class="">
            <label asp-for="City" asp-postfix=":"></label>
            @if (Model.CityRequired)
            {
                <nop-required />
            }
            <input asp-for="City" placeholder="Enter city" class="form-control custom-input" />
            <span asp-validation-for="City"></span>
        </div>
    }

    @if (Model.ZipPostalCodeEnabled)
    {
        <div class="">
            <label asp-for="ZipPostalCode" asp-postfix=":"></label>
            @if (Model.ZipPostalCodeRequired)
            {
                <nop-required />
            }
            <input asp-for="ZipPostalCode" placeholder="Enter zip/postal code" class="form-control custom-input" />
            <span asp-validation-for="ZipPostalCode"></span>
        </div>
    }

    @if (Model.CountryEnabled)
    {
        <div class="" hidden>
            <label asp-for="CountryId" asp-postfix=":"></label>
            <nop-required />
            <select asp-for="CountryId" asp-items="Model.AvailableCountries" class="form-control custom-input"
                    data-trigger="country-select"
                    data-url="@(Url.RouteUrl("GetStatesByCountryId"))"
                    data-stateprovince="#@Html.IdFor(model => model.StateProvinceId)"
                    data-loading="#states-loading-progress"></select>
            <span asp-validation-for="CountryId"></span>
        </div>
    }

    @if (Model.CountryEnabled && Model.StateProvinceEnabled)
    {
        <div class="">
            <label asp-for="StateProvinceId" asp-postfix=":"></label>
            <select asp-for="StateProvinceId" asp-items="Model.AvailableStates" class="form-control custom-input"></select>
            <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
            <span asp-validation-for="StateProvinceId"></span>
        </div>
    }

    @*@if (Model.CompanyEnabled)
    {
        <div class="">
            <label asp-for="Company" asp-postfix=":"></label>
            <nop-required />
            <input asp-for="Company" placeholder="Enter company" class="form-control custom-input" />
            <span asp-validation-for="Company"></span>
        </div>
    }*@


    <div class="" hidden>
        <label asp-for="Email" asp-postfix=":"></label>
        <nop-required />
        <input asp-for="Email" placeholder="Enter email" class="form-control custom-input" value="@Email"/>
        <span asp-validation-for="Email"></span>
    </div>

    @*@if (Model.PhoneEnabled)
    {
        <div class="">
            <label asp-for="PhoneNumber" asp-postfix=":"></label>
            <nop-required />
            <input asp-for="PhoneNumber" id="phone-number" placeholder="Enter phone number" maxlength="14" class="form-control custom-input" />
            <span asp-validation-for="PhoneNumber"></span>
        </div>
    }*@

    @if (Model.CustomAddressAttributes.Count > 0)
    {
        @await Html.PartialAsync("_AddressAttributes", Model.CustomAddressAttributes)
    }
</div>

<script>
    var vm = new Vue({
        el: '#edit-address-form',
        data: {
            window: {
                width: 0,
                height: 0,
            },
        },
        created: function () {
            window.addEventListener("resize", this.handleResize);
            this.handleResize();
        },
        destroyed: function () {
            window.removeEventListener("resize", this.handleResize);
        },
        computed: {
            isMobile: function () {
                return this.window.width <= 767.98;
            },
        },
        methods: {
            handleResize: function () {
                this.window.width = window.innerWidth;
                this.window.height = window.innerHeight;
            },
        },
    });
</script>
@using Nop.Services.Customers
@using Nop.Core
@using Nop.Core.Infrastructure
@using NSS.Plugin.Misc.SwiftPortalOverride
@using NSS.Plugin.Misc.SwiftPortalOverride.Models
@using NSS.Plugin.Misc.SwiftCore.Domain.Customers
@using NSS.Plugin.Misc.SwiftCore.Services
@inject IWorkContext workContext
@inject ICustomerCompanyService customerCompanyService
@{
    // check if user is guest
    var customer = EngineContext.Current.Resolve<IWorkContext>().CurrentCustomer;
    var isGuestCustomer = EngineContext.Current.Resolve<ICustomerService>().IsGuest(customer);
    int customerId = customer.Id;
    // get all companies assigned to customer
    IEnumerable<CustomerCompany> customerCompanies = customerCompanyService.GetCustomerCompanies(customerId);

    CustomerSelectAccountModel selectAccountModel = new CustomerSelectAccountModel();
    selectAccountModel.Companies = customerCompanies.Select(cc => cc.Company);
    selectAccountModel.loggedInCustomerId = customerId;
}

@{
    Layout = "_Root.Head";
}

@{

    // get cust company
    var (erpCompId, customerCompany) = GetCustomerCompanyDetails();
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")

<div class="master-wrapper-page">

    @await Component.InvokeAsync("AdminHeaderLinks")

    @await Html.PartialAsync("_Header")
    <script asp-location="Footer">
        var localized_data = {
            AjaxCartFailure: "@T("AjaxCart.Failure")"
        };
        AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart', localized_data);
    </script>

    @if (!isGuestCustomer)
    {
        @if (selectAccountModel.Companies != null)
        {
            <div class="header-lower p-0">
                <div class="header-menu bg-white py-3 mb-0">
                    <select id="accountSelect" name="options" class="account-select" data-role="accountSelect" onchange="SelectCompany(this)">
                        <option disabled>Accounts </option>
                        @foreach (var company in selectAccountModel.Companies)
                        {
                            <option value="@company.ErpCompanyId" id=@company.ErpCompanyId>@company.Name</option>
                        }
                    </select>
                    @await Component.InvokeAsync("TopMenu")
                </div>
            </div>
        }
    }

    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })

        @if (IsSectionDefined("Breadcrumb"))
        {
            @RenderSection("Breadcrumb")
        }
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @await Component.InvokeAsync("Footer")

    @* live chat widget *@
    <div id="chat-widget-container" style="opacity: 1; visibility: visible; z-index: 2147483639; position: fixed; bottom: 0px; width: 84px; height: 84px; max-width: 100%; max-height: calc(100% - 0px); min-height: 0px; min-width: 0px; background-color: transparent; border: 0px; overflow: hidden; right: 0px; transition: none 0s ease 0s !important;">
        <iframe allow="autoplay; microphone *; camera *;" src="https://secure.livechatinc.com/licence/10903842/v2/open_chat.cgi?license=10903842&amp;group=2&amp;embedded=1&amp;widget_version=3&amp;unique_groups=0" allowtransparency="true" id="chat-widget" name="chat-widget" scrolling="no" role="application" aria-label="LiveChat chat widget" data-gtm-yt-inspected-30770537_48="true" style="width: 100%; height: 100%; min-height: 0px; min-width: 0px; margin: 0px; padding: 0px; background-image: none; background-position: 0% 0%; background-size: initial; background-attachment: scroll; background-origin: initial; background-clip: initial; background-color: rgba(0, 0, 0, 0); border-width: 0px; float: none; position: absolute; top: 0px; left: 0px; bottom: 0px; right: 0px; transition: none 0s ease 0s !important;"></iframe>
    </div>

    <!-- Start of LiveChat (www.livechatinc.com) code -->
    <script type="text/javascript">
        window.__lc = window.__lc || {};
        window.__lc.license = 10903842;
        (function () {
            var lc = document.createElement('script'); lc.type = 'text/javascript'; lc.async = true;
            lc.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'cdn.livechatinc.com/tracking.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(lc, s);
        })();
    </script>

    <script type='text/javascript'>
        function SelectCompany(option) {
            let ErpId = option.options[option.selectedIndex].id;
            let cookieKey = `ERPCompanyId${@{@selectAccountModel.loggedInCustomerId}}=`
            document.cookie = cookieKey + ErpId;
            document.location.href = "/";
        }


        var erpCompId = @Html.Raw(erpCompId);
        $(document).ready(function () {
            $('select[name="options"]').find('option[value='+erpCompId+']').attr("selected", true);
        });

    </script>
    <noscript>
        <a href="https://www.livechatinc.com/chat-with/10903842/" rel="nofollow">Chat with us</a>,
        powered by <a href="https://www.livechatinc.com/?welcome" rel="noopener nofollow" target="_blank">LiveChat</a>
    </noscript>
    <!-- End of LiveChat code -->
</div>

@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })


@functions{

    (int, CustomerCompany) GetCustomerCompanyDetails()
    {
        var compIdCookieKey = string.Format(SwiftPortalOverrideDefaults.ERPCompanyCookieKey, workContext.CurrentCustomer.Id);

        int.TryParse(Context.Request.Cookies[compIdCookieKey], out int eRPCompanyId);

        CustomerCompany customerCompany = null;

        if (eRPCompanyId > 0)
            customerCompany = customerCompanyService.GetCustomerCompanyByErpCompId(workContext.CurrentCustomer.Id, eRPCompanyId);

        return (eRPCompanyId, customerCompany);
    }
}
